// Class Engine.Actor
// Size: 0x288 (Inherited: 0x28)
struct AActor : UObject {
	struct FActorTickFunction PrimaryActorTick; // 0x28(0x30)
	char bNetTemporary : 1; // 0x58(0x01)
	char pad_58_1 : 1; // 0x58(0x01)
	char bOnlyRelevantToOwner : 1; // 0x58(0x01)
	char bAlwaysRelevant : 1; // 0x58(0x01)
	char bReplicateMovement : 1; // 0x58(0x01)
	char bCallPreReplication : 1; // 0x58(0x01)
	char bCallPreReplicationForReplay : 1; // 0x58(0x01)
	char bHidden : 1; // 0x58(0x01)
	char bTearOff : 1; // 0x59(0x01)
	char bForceNetAddressable : 1; // 0x59(0x01)
	char bExchangedRoles : 1; // 0x59(0x01)
	char bNetLoadOnClient : 1; // 0x59(0x01)
	char bNetUseOwnerRelevancy : 1; // 0x59(0x01)
	char bRelevantForNetworkReplays : 1; // 0x59(0x01)
	char bRelevantForLevelBounds : 1; // 0x59(0x01)
	char bReplayRewindable : 1; // 0x59(0x01)
	char bAllowTickBeforeBeginPlay : 1; // 0x5a(0x01)
	char bAutoDestroyWhenFinished : 1; // 0x5a(0x01)
	char bCanBeDamaged : 1; // 0x5a(0x01)
	char bBlockInput : 1; // 0x5a(0x01)
	char bCollideWhenPlacing : 1; // 0x5a(0x01)
	char bFindCameraComponentWhenViewTarget : 1; // 0x5a(0x01)
	char bGenerateOverlapEventsDuringLevelStreaming : 1; // 0x5a(0x01)
	char bIgnoresOriginShifting : 1; // 0x5a(0x01)
	char bEnableAutoLODGeneration : 1; // 0x5b(0x01)
	char bIsEditorOnlyActor : 1; // 0x5b(0x01)
	char bActorSeamlessTraveled : 1; // 0x5b(0x01)
	char bReplicates : 1; // 0x5b(0x01)
	char bCanBeInCluster : 1; // 0x5b(0x01)
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x5b(0x01)
	char pad_5B_6 : 1; // 0x5b(0x01)
	char bReplicateUsingRegisteredSubObjectList : 1; // 0x5b(0x01)
	char pad_5C_0 : 6; // 0x5c(0x01)
	char bActorEnableCollision : 1; // 0x5c(0x01)
	char bActorIsBeingDestroyed : 1; // 0x5c(0x01)
	char pad_5D_0 : 1; // 0x5d(0x01)
	char bAsyncPhysicsTickEnabled : 1; // 0x5d(0x01)
	char pad_5D_2 : 6; // 0x5d(0x01)
	enum class EActorUpdateOverlapsMethod UpdateOverlapsMethodDuringLevelStreaming; // 0x5e(0x01)
	enum class EActorUpdateOverlapsMethod DefaultUpdateOverlapsMethodDuringLevelStreaming; // 0x5f(0x01)
	float InitialLifeSpan; // 0x60(0x04)
	float CustomTimeDilation; // 0x64(0x04)
	enum class ENetRole RemoteRole; // 0x68(0x01)
	char pad_69[0x3]; // 0x69(0x03)
	int32_t RayTracingGroupId; // 0x6c(0x04)
	struct FRepAttachment AttachmentReplication; // 0x70(0x60)
	struct FRepMovement ReplicatedMovement; // 0xd0(0x70)
	struct AActor* Owner; // 0x140(0x08)
	struct FName NetDriverName; // 0x148(0x04)
	enum class ENetRole Role; // 0x14c(0x01)
	enum class ENetDormancy NetDormancy; // 0x14d(0x01)
	enum class ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x14e(0x01)
	enum class EAutoReceiveInput AutoReceiveInput; // 0x14f(0x01)
	int32_t InputPriority; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
	struct UInputComponent* InputComponent; // 0x158(0x08)
	float NetCullDistanceSquared; // 0x160(0x04)
	int32_t NetTag; // 0x164(0x04)
	float NetUpdateFrequency; // 0x168(0x04)
	float MinNetUpdateFrequency; // 0x16c(0x04)
	float NetPriority; // 0x170(0x04)
	char pad_174[0x4]; // 0x174(0x04)
	struct APawn* Instigator; // 0x178(0x08)
	struct TArray<struct AActor*> Children; // 0x180(0x10)
	struct USceneComponent* RootComponent; // 0x190(0x08)
	char pad_198[0x8]; // 0x198(0x08)
	struct TArray<struct FName> Layers; // 0x1a0(0x10)
	struct TWeakObjectPtr<struct UChildActorComponent> ParentComponent; // 0x1b0(0x08)
	char pad_1B8[0x10]; // 0x1b8(0x10)
	struct TArray<struct FName> Tags; // 0x1c8(0x10)
	struct FMulticastSparseDelegate OnTakeAnyDamage; // 0x1d8(0x01)
	struct FMulticastSparseDelegate OnTakePointDamage; // 0x1d9(0x01)
	struct FMulticastSparseDelegate OnTakeRadialDamage; // 0x1da(0x01)
	struct FMulticastSparseDelegate OnActorBeginOverlap; // 0x1db(0x01)
	struct FMulticastSparseDelegate OnActorEndOverlap; // 0x1dc(0x01)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x1dd(0x01)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x1de(0x01)
	struct FMulticastSparseDelegate OnClicked; // 0x1df(0x01)
	struct FMulticastSparseDelegate OnReleased; // 0x1e0(0x01)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x1e1(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x1e2(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x1e3(0x01)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x1e4(0x01)
	struct FMulticastSparseDelegate OnActorHit; // 0x1e5(0x01)
	struct FMulticastSparseDelegate OnDestroyed; // 0x1e6(0x01)
	struct FMulticastSparseDelegate OnEndPlay; // 0x1e7(0x01)
	char pad_1E8[0x80]; // 0x1e8(0x80)
	struct TArray<struct UActorComponent*> InstanceComponents; // 0x268(0x10)
	struct TArray<struct UActorComponent*> BlueprintCreatedComponents; // 0x278(0x10)

	bool WasRecentlyRendered(float Tolerance); // Function Engine.Actor.WasRecentlyRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927b56c
	void UserConstructionScript(); // Function Engine.Actor.UserConstructionScript // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void TearOff(); // Function Engine.Actor.TearOff // (Native|Public|BlueprintCallable) // @ game+0x67ce468
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.Actor.SetTickGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x927b470
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.Actor.SetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x927b4ec
	void SetReplicates(bool bInReplicates); // Function Engine.Actor.SetReplicates // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x927b3f0
	void SetReplicateMovement(bool bInReplicateMovement); // Function Engine.Actor.SetReplicateMovement // (Native|Public|BlueprintCallable) // @ game+0x927b36c
	void SetRayTracingGroupId(int32_t InRaytracingGroupId); // Function Engine.Actor.SetRayTracingGroupId // (Final|Native|Public|BlueprintCallable) // @ game+0x927b2e4
	void SetOwner(struct AActor* NewOwner); // Function Engine.Actor.SetOwner // (Native|Public|BlueprintCallable) // @ game+0x67235dc
	void SetNetDormancy(enum class ENetDormancy NewDormancy); // Function Engine.Actor.SetNetDormancy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x927b264
	void SetLifeSpan(float InLifespan); // Function Engine.Actor.SetLifeSpan // (Native|Public|BlueprintCallable) // @ game+0x24a6954
	void SetAutoDestroyWhenFinished(bool bVal); // Function Engine.Actor.SetAutoDestroyWhenFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x927b1a4
	void SetActorTickInterval(float TickInterval); // Function Engine.Actor.SetActorTickInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x927b120
	void SetActorTickEnabled(bool bEnabled); // Function Engine.Actor.SetActorTickEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x21e8944
	void SetActorScale3D(struct FVector NewScale3D); // Function Engine.Actor.SetActorScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x22088dc
	void SetActorRelativeScale3D(struct FVector NewRelativeScale); // Function Engine.Actor.SetActorRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x927b090
	void SetActorHiddenInGame(bool bNewHidden); // Function Engine.Actor.SetActorHiddenInGame // (Native|Public|BlueprintCallable) // @ game+0x1c22d38
	void SetActorEnableCollision(bool bNewActorEnableCollision); // Function Engine.Actor.SetActorEnableCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x119217c
	void RemoveTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.Actor.RemoveTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x927b00c
	void RemoveTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.Actor.RemoveTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x927af88
	void ReceiveTick(float DeltaSeconds); // Function Engine.Actor.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveRadialDamage(float DamageReceived, struct UDamageType* DamageType, struct FVector Origin, struct FHitResult& HitInfo, struct AController* InstigatedBy, struct AActor* DamageCauser); // Function Engine.Actor.ReceiveRadialDamage // (BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xd67374
	void ReceivePointDamage(float Damage, struct UDamageType* DamageType, struct FVector HitLocation, struct FVector HitNormal, struct UPrimitiveComponent* HitComponent, struct FName BoneName, struct FVector ShotFromDirection, struct AController* InstigatedBy, struct AActor* DamageCauser, struct FHitResult& HitInfo); // Function Engine.Actor.ReceivePointDamage // (BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xd67374
	void ReceiveHit(struct UPrimitiveComponent* MyComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, bool bSelfMoved, struct FVector HitLocation, struct FVector HitNormal, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Engine.Actor.ReceiveHit // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xd67374
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.Actor.ReceiveEndPlay // (Event|Protected|BlueprintEvent) // @ game+0xd67374
	void ReceiveDestroyed(); // Function Engine.Actor.ReceiveDestroyed // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveBeginPlay(); // Function Engine.Actor.ReceiveBeginPlay // (Event|Protected|BlueprintEvent) // @ game+0xd67374
	void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds); // Function Engine.Actor.ReceiveAsyncPhysicsTick // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveAnyDamage(float Damage, struct UDamageType* DamageType, struct AController* InstigatedBy, struct AActor* DamageCauser); // Function Engine.Actor.ReceiveAnyDamage // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveActorOnReleased(struct FKey ButtonReleased); // Function Engine.Actor.ReceiveActorOnReleased // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveActorOnInputTouchLeave(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchLeave // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveActorOnInputTouchEnter(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnter // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveActorOnInputTouchEnd(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnd // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveActorOnInputTouchBegin(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchBegin // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveActorOnClicked(struct FKey ButtonPressed); // Function Engine.Actor.ReceiveActorOnClicked // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveActorEndOverlap(struct AActor* OtherActor); // Function Engine.Actor.ReceiveActorEndOverlap // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveActorEndCursorOver(); // Function Engine.Actor.ReceiveActorEndCursorOver // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveActorBeginOverlap(struct AActor* OtherActor); // Function Engine.Actor.ReceiveActorBeginOverlap // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveActorBeginCursorOver(); // Function Engine.Actor.ReceiveActorBeginCursorOver // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.Actor.PrestreamTextures // (Native|Public|BlueprintCallable) // @ game+0x927ae84
	void OnRep_ReplicateMovement(); // Function Engine.Actor.OnRep_ReplicateMovement // (Native|Public) // @ game+0x12fee80
	void OnRep_ReplicatedMovement(); // Function Engine.Actor.OnRep_ReplicatedMovement // (Native|Public) // @ game+0x13743d0
	void OnRep_Owner(); // Function Engine.Actor.OnRep_Owner // (Native|Protected) // @ game+0x16ee844
	void OnRep_Instigator(); // Function Engine.Actor.OnRep_Instigator // (Native|Public) // @ game+0x16beb08
	void OnRep_AttachmentReplication(); // Function Engine.Actor.OnRep_AttachmentReplication // (Native|Public) // @ game+0x1e84bf4
	void MakeNoise(float Loudness, struct APawn* NoiseInstigator, struct FVector NoiseLocation, float MaxRange, struct FName tag); // Function Engine.Actor.MakeNoise // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x927acec
	bool K2_TeleportTo(struct FVector DestLocation, struct FRotator DestRotation); // Function Engine.Actor.K2_TeleportTo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11e8f04
	bool K2_SetActorTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11ba078
	bool K2_SetActorRotation(struct FRotator NewRotation, bool bTeleportPhysics); // Function Engine.Actor.K2_SetActorRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x22a0dc8
	void K2_SetActorRelativeTransform(struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x927aaec
	void K2_SetActorRelativeRotation(struct FRotator NewRelativeRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x255fb04
	void K2_SetActorRelativeLocation(struct FVector NewRelativeLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x927a948
	bool K2_SetActorLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x927a740
	bool K2_SetActorLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xd2ba94
	void K2_OnReset(); // Function Engine.Actor.K2_OnReset // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void K2_OnEndViewTarget(struct APlayerController* PC); // Function Engine.Actor.K2_OnEndViewTarget // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void K2_OnBecomeViewTarget(struct APlayerController* PC); // Function Engine.Actor.K2_OnBecomeViewTarget // (Event|Public|BlueprintEvent) // @ game+0xd67374
	struct USceneComponent* K2_GetRootComponent(); // Function Engine.Actor.K2_GetRootComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22a1b98
	struct TArray<struct UActorComponent*> K2_GetComponentsByClass(struct UActorComponent* ComponentClass); // Function Engine.Actor.K2_GetComponentsByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x19be7fc
	struct FRotator K2_GetActorRotation(); // Function Engine.Actor.K2_GetActorRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2263b38
	struct FVector K2_GetActorLocation(); // Function Engine.Actor.K2_GetActorLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1b56fa4
	void K2_DetachFromActor(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule); // Function Engine.Actor.K2_DetachFromActor // (Final|Native|Public|BlueprintCallable) // @ game+0x271a4e4
	void K2_DestroyActor(); // Function Engine.Actor.K2_DestroyActor // (Native|Public|BlueprintCallable) // @ game+0x282ca74
	void K2_AttachToComponent(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x282fd60
	void K2_AttachToActor(struct AActor* ParentActor, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToActor // (Final|Native|Public|BlueprintCallable) // @ game+0x25da83c
	void K2_AttachRootComponentToActor(struct AActor* InParentActor, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentToActor // (Final|Native|Public|BlueprintCallable) // @ game+0x927a5d4
	void K2_AttachRootComponentTo(struct USceneComponent* InParent, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentTo // (Final|Native|Public|BlueprintCallable) // @ game+0x927a488
	void K2_AddActorWorldTransformKeepScale(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldTransformKeepScale // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x927a288
	void K2_AddActorWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x927a088
	void K2_AddActorWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9279ee4
	void K2_AddActorWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9279d40
	void K2_AddActorLocalTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9279b40
	void K2_AddActorLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x927999c
	void K2_AddActorLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92797f8
	bool IsOverlappingActor(struct AActor* Other); // Function Engine.Actor.IsOverlappingActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9279768
	bool IsChildActor(); // Function Engine.Actor.IsChildActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92796fc
	bool IsActorTickEnabled(); // Function Engine.Actor.IsActorTickEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92796e4
	bool IsActorBeingDestroyed(); // Function Engine.Actor.IsActorBeingDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92796cc
	bool HasAuthority(); // Function Engine.Actor.HasAuthority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2042b84
	float GetVerticalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetVerticalDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9279598
	struct FVector GetVelocity(); // Function Engine.Actor.GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2c01208
	struct FTransform GetTransform(); // Function Engine.Actor.GetTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2236b4c
	bool GetTickableWhenPaused(); // Function Engine.Actor.GetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x9279580
	float GetSquaredHorizontalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetSquaredHorizontalDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9279444
	float GetSquaredDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetSquaredDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92793b4
	enum class ENetRole GetRemoteRole(); // Function Engine.Actor.GetRemoteRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x7618e14
	int32_t GetRayTracingGroupId(); // Function Engine.Actor.GetRayTracingGroupId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9279390
	struct UChildActorComponent* GetParentComponent(); // Function Engine.Actor.GetParentComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9238c90
	struct AActor* GetParentActor(); // Function Engine.Actor.GetParentActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2699228
	struct AActor* GetOwner(); // Function Engine.Actor.GetOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22a2df8
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent*>& OverlappingComponents); // Function Engine.Actor.GetOverlappingComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92792f4
	void GetOverlappingActors(struct TArray<struct AActor*>& OverlappingActors, struct AActor* ClassFilter); // Function Engine.Actor.GetOverlappingActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9279204
	enum class ENetRole GetLocalRole(); // Function Engine.Actor.GetLocalRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2b7794c
	float GetLifeSpan(); // Function Engine.Actor.GetLifeSpan // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92791d8
	struct FTransform GetLevelTransform(); // Function Engine.Actor.GetLevelTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x927917c
	struct ULevel* GetLevel(); // Function Engine.Actor.GetLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9279140
	struct AController* GetInstigatorController(); // Function Engine.Actor.GetInstigatorController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2350124
	struct APawn* GetInstigator(); // Function Engine.Actor.GetInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20f47dc
	struct FVector GetInputVectorAxisValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputVectorAxisValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9278fd4
	float GetInputAxisValue(struct FName InputAxisName); // Function Engine.Actor.GetInputAxisValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9278f44
	float GetInputAxisKeyValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputAxisKeyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9278e54
	float GetHorizontalDotProductTo(struct AActor* OtherActor); // Function Engine.Actor.GetHorizontalDotProductTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9278b04
	float GetHorizontalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetHorizontalDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92789c4
	float GetGameTimeSinceCreation(); // Function Engine.Actor.GetGameTimeSinceCreation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27b57e4
	float GetDotProductTo(struct AActor* OtherActor); // Function Engine.Actor.GetDotProductTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927867c
	float GetDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92785ec
	struct TArray<struct UActorComponent*> GetComponentsByTag(struct UActorComponent* ComponentClass, struct FName tag); // Function Engine.Actor.GetComponentsByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9278510
	struct TArray<struct UActorComponent*> GetComponentsByInterface(struct UInterface* Interface); // Function Engine.Actor.GetComponentsByInterface // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9278468
	struct UActorComponent* GetComponentByClass(struct UActorComponent* ComponentClass); // Function Engine.Actor.GetComponentByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xf10c84
	struct FName GetAttachParentSocketName(); // Function Engine.Actor.GetAttachParentSocketName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9278440
	struct AActor* GetAttachParentActor(); // Function Engine.Actor.GetAttachParentActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2229738
	void GetAttachedActors(struct TArray<struct AActor*>& OutActors, bool bResetArray, bool bRecursivelyIncludeAttachedActors); // Function Engine.Actor.GetAttachedActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2669368
	void GetAllChildActors(struct TArray<struct AActor*>& ChildActors, bool bIncludeDescendants); // Function Engine.Actor.GetAllChildActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x927834c
	struct FVector GetActorUpVector(); // Function Engine.Actor.GetActorUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x27e7e70
	float GetActorTimeDilation(); // Function Engine.Actor.GetActorTimeDilation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9278324
	float GetActorTickInterval(); // Function Engine.Actor.GetActorTickInterval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29ee8bc
	struct FVector GetActorScale3D(); // Function Engine.Actor.GetActorScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ae7908
	struct FVector GetActorRightVector(); // Function Engine.Actor.GetActorRightVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x27e6900
	struct FVector GetActorRelativeScale3D(); // Function Engine.Actor.GetActorRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92782cc
	struct FVector GetActorForwardVector(); // Function Engine.Actor.GetActorForwardVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x24680c0
	void GetActorEyesViewPoint(struct FVector& OutLocation, struct FRotator& OutRotation); // Function Engine.Actor.GetActorEyesViewPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92781e8
	bool GetActorEnableCollision(); // Function Engine.Actor.GetActorEnableCollision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92781cc
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector& Origin, struct FVector& BoxExtent, bool bIncludeFromChildActors); // Function Engine.Actor.GetActorBounds // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9278058
	void ForceNetUpdate(); // Function Engine.Actor.ForceNetUpdate // (Native|Public|BlueprintCallable) // @ game+0x29ac48c
	void FlushNetDormancy(); // Function Engine.Actor.FlushNetDormancy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x179d124
	void FinishAddComponent(struct UActorComponent* Component, bool bManualAttachment, struct FTransform& RelativeTransform); // Function Engine.Actor.FinishAddComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9277da4
	void EnableInput(struct APlayerController* PlayerController); // Function Engine.Actor.EnableInput // (Native|Public|BlueprintCallable) // @ game+0x9277d20
	void DisableInput(struct APlayerController* PlayerController); // Function Engine.Actor.DisableInput // (Native|Public|BlueprintCallable) // @ game+0x5c53ee8
	void DetachRootComponentFromParent(bool bMaintainWorldPosition); // Function Engine.Actor.DetachRootComponentFromParent // (Final|Native|Public|BlueprintCallable) // @ game+0x9277ca0
	void AddTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.Actor.AddTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x9277c1c
	void AddTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.Actor.AddTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x9277b98
	struct UActorComponent* AddComponentByClass(struct UActorComponent* Class, bool bManualAttachment, struct FTransform& RelativeTransform, bool bDeferredFinish); // Function Engine.Actor.AddComponentByClass // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x25d4c40
	struct UActorComponent* AddComponent(struct FName TemplateName, bool bManualAttachment, struct FTransform& RelativeTransform, struct UObject* ComponentTemplateContext, bool bDeferredFinish); // Function Engine.Actor.AddComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d21334
	bool ActorHasTag(struct FName tag); // Function Engine.Actor.ActorHasTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xf20094
};

// Class Engine.HUD
// Size: 0x378 (Inherited: 0x288)
struct AHUD : AActor {
	struct APlayerController* PlayerOwner; // 0x288(0x08)
	char bLostFocusPaused : 1; // 0x290(0x01)
	char bShowHUD : 1; // 0x290(0x01)
	char bShowDebugInfo : 1; // 0x290(0x01)
	char pad_290_3 : 5; // 0x290(0x01)
	char pad_291[0x3]; // 0x291(0x03)
	int32_t CurrentTargetIndex; // 0x294(0x04)
	char bShowHitBoxDebugInfo : 1; // 0x298(0x01)
	char bShowOverlays : 1; // 0x298(0x01)
	char bEnableDebugTextShadow : 1; // 0x298(0x01)
	char pad_298_3 : 5; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct TArray<struct AActor*> PostRenderedActors; // 0x2a0(0x10)
	char pad_2B0[0x8]; // 0x2b0(0x08)
	struct TArray<struct FName> DebugDisplay; // 0x2b8(0x10)
	struct TArray<struct FName> ToggledDebugCategories; // 0x2c8(0x10)
	struct UCanvas* Canvas; // 0x2d8(0x08)
	struct UCanvas* DebugCanvas; // 0x2e0(0x08)
	struct TArray<struct FDebugTextInfo> DebugTextList; // 0x2e8(0x10)
	struct AActor* ShowDebugTargetDesiredClass; // 0x2f8(0x08)
	struct AActor* ShowDebugTargetActor; // 0x300(0x08)
	char pad_308[0x70]; // 0x308(0x70)

	void ShowHUD(); // Function Engine.HUD.ShowHUD // (Exec|Native|Public) // @ game+0x230a2e8
	void ShowDebugToggleSubCategory(struct FName category); // Function Engine.HUD.ShowDebugToggleSubCategory // (Final|Exec|Native|Public) // @ game+0x92c139c
	void ShowDebugForReticleTargetToggle(struct AActor* DesiredClass); // Function Engine.HUD.ShowDebugForReticleTargetToggle // (Final|Exec|Native|Public) // @ game+0x92c1304
	void ShowDebug(struct FName DebugType); // Function Engine.HUD.ShowDebug // (Exec|Native|Public) // @ game+0x92c1280
	void RemoveDebugText(struct AActor* SrcActor, bool bLeaveDurationText); // Function Engine.HUD.RemoveDebugText // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x92c1134
	void RemoveAllDebugStrings(); // Function Engine.HUD.RemoveAllDebugStrings // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x92c10a8
	void ReceiveHitBoxRelease(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxRelease // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveHitBoxEndCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxEndCursorOver // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveHitBoxClick(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxClick // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveHitBoxBeginCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxBeginCursorOver // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY); // Function Engine.HUD.ReceiveDrawHUD // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0xd67374
	struct FVector Project(struct FVector Location, bool bClampToZeroPlane); // Function Engine.HUD.Project // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c0fb4
	void PreviousDebugTarget(); // Function Engine.HUD.PreviousDebugTarget // (Exec|Native|Public) // @ game+0x753a1b0
	void NextDebugTarget(); // Function Engine.HUD.NextDebugTarget // (Exec|Native|Public) // @ game+0x2adb844
	void GetTextSize(struct FString Text, float& OutWidth, float& OutHeight, struct UFont* Font, float Scale); // Function Engine.HUD.GetTextSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c0b90
	struct APlayerController* GetOwningPlayerController(); // Function Engine.HUD.GetOwningPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x675e080
	struct APawn* GetOwningPawn(); // Function Engine.HUD.GetOwningPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c0b70
	void GetActorsInSelectionRectangle(struct AActor* ClassFilter, struct FVector2D& FirstPoint, struct FVector2D& SecondPoint, struct TArray<struct AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // Function Engine.HUD.GetActorsInSelectionRectangle // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92c0950
	void DrawTextureSimple(struct UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition); // Function Engine.HUD.DrawTextureSimple // (Final|Native|Public|BlueprintCallable) // @ game+0x92c0714
	void DrawTexture(struct UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, struct FLinearColor TintColor, enum class EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawTexture // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92c0124
	void DrawText(struct FString Text, struct FLinearColor TextColor, float ScreenX, float ScreenY, struct UFont* Font, float Scale, bool bScalePosition); // Function Engine.HUD.DrawText // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92bfe34
	void DrawRect(struct FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH); // Function Engine.HUD.DrawRect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92bfca8
	void DrawMaterialTriangle(struct UMaterialInterface* Material, struct FVector2D V0_Pos, struct FVector2D V1_Pos, struct FVector2D V2_Pos, struct FVector2D V0_UV, struct FVector2D V1_UV, struct FVector2D V2_UV, struct FLinearColor V0_Color, struct FLinearColor V1_Color, struct FLinearColor V2_Color); // Function Engine.HUD.DrawMaterialTriangle // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92bf908
	void DrawMaterialSimple(struct UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // Function Engine.HUD.DrawMaterialSimple // (Final|Native|Public|BlueprintCallable) // @ game+0x92bf600
	void DrawMaterial(struct UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawMaterial // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92bf0a8
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, struct FLinearColor LineColor, float LineThickness); // Function Engine.HUD.DrawLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92beed4
	void Deproject(float ScreenX, float ScreenY, struct FVector& WorldPosition, struct FVector& WorldDirection); // Function Engine.HUD.Deproject // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bed74
	void AddHitBox(struct FVector2D Position, struct FVector2D Size, struct FName InName, bool bConsumesInput, int32_t Priority); // Function Engine.HUD.AddHitBox // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92bebd4
	void AddDebugText(struct FString DebugText, struct AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, struct UFont* InFont, float FontScale, bool bDrawShadow); // Function Engine.HUD.AddDebugText // (Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x92be4e4
};

// Class Engine.Engine
// Size: 0xee8 (Inherited: 0x28)
struct UEngine : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UFont* TinyFont; // 0x30(0x08)
	struct FSoftObjectPath TinyFontName; // 0x38(0x18)
	struct UFont* SmallFont; // 0x50(0x08)
	struct FSoftObjectPath SmallFontName; // 0x58(0x18)
	struct UFont* MediumFont; // 0x70(0x08)
	struct FSoftObjectPath MediumFontName; // 0x78(0x18)
	struct UFont* LargeFont; // 0x90(0x08)
	struct FSoftObjectPath LargeFontName; // 0x98(0x18)
	struct UFont* SubtitleFont; // 0xb0(0x08)
	struct FSoftObjectPath SubtitleFontName; // 0xb8(0x18)
	struct TArray<struct UFont*> AdditionalFonts; // 0xd0(0x10)
	struct TArray<struct FString> AdditionalFontNames; // 0xe0(0x10)
	struct UConsole* ConsoleClass; // 0xf0(0x08)
	struct FSoftClassPath ConsoleClassName; // 0xf8(0x18)
	struct UGameViewportClient* GameViewportClientClass; // 0x110(0x08)
	struct FSoftClassPath GameViewportClientClassName; // 0x118(0x18)
	struct ULocalPlayer* LocalPlayerClass; // 0x130(0x08)
	struct FSoftClassPath LocalPlayerClassName; // 0x138(0x18)
	struct AWorldSettings* WorldSettingsClass; // 0x150(0x08)
	struct FSoftClassPath WorldSettingsClassName; // 0x158(0x18)
	struct FSoftClassPath NavigationSystemClassName; // 0x170(0x18)
	struct UNavigationSystemBase* NavigationSystemClass; // 0x188(0x08)
	struct FSoftClassPath NavigationSystemConfigClassName; // 0x190(0x18)
	struct UNavigationSystemConfig* NavigationSystemConfigClass; // 0x1a8(0x08)
	struct FSoftClassPath AvoidanceManagerClassName; // 0x1b0(0x18)
	struct UAvoidanceManager* AvoidanceManagerClass; // 0x1c8(0x08)
	struct FSoftClassPath AIControllerClassName; // 0x1d0(0x18)
	struct UPhysicsCollisionHandler* PhysicsCollisionHandlerClass; // 0x1e8(0x08)
	struct FSoftClassPath PhysicsCollisionHandlerClassName; // 0x1f0(0x18)
	struct FSoftClassPath GameUserSettingsClassName; // 0x208(0x18)
	struct UGameUserSettings* GameUserSettingsClass; // 0x220(0x08)
	struct UGameUserSettings* GameUserSettings; // 0x228(0x08)
	struct ALevelScriptActor* LevelScriptActorClass; // 0x230(0x08)
	struct FSoftClassPath LevelScriptActorClassName; // 0x238(0x18)
	struct FSoftClassPath DefaultBlueprintBaseClassName; // 0x250(0x18)
	struct FSoftClassPath GameSingletonClassName; // 0x268(0x18)
	struct UObject* GameSingleton; // 0x280(0x08)
	struct FSoftClassPath AssetManagerClassName; // 0x288(0x18)
	struct UAssetManager* AssetManager; // 0x2a0(0x08)
	struct UTexture2D* DefaultTexture; // 0x2a8(0x08)
	struct FSoftObjectPath DefaultTextureName; // 0x2b0(0x18)
	struct UTexture* DefaultDiffuseTexture; // 0x2c8(0x08)
	struct FSoftObjectPath DefaultDiffuseTextureName; // 0x2d0(0x18)
	struct UTexture2D* DefaultBSPVertexTexture; // 0x2e8(0x08)
	struct FSoftObjectPath DefaultBSPVertexTextureName; // 0x2f0(0x18)
	struct UTexture2D* HighFrequencyNoiseTexture; // 0x308(0x08)
	struct FSoftObjectPath HighFrequencyNoiseTextureName; // 0x310(0x18)
	struct UTexture2D* DefaultBokehTexture; // 0x328(0x08)
	struct FSoftObjectPath DefaultBokehTextureName; // 0x330(0x18)
	struct UTexture2D* DefaultBloomKernelTexture; // 0x348(0x08)
	struct FSoftObjectPath DefaultBloomKernelTextureName; // 0x350(0x18)
	struct UTexture2D* DefaultFilmGrainTexture; // 0x368(0x08)
	struct FSoftObjectPath DefaultFilmGrainTextureName; // 0x370(0x18)
	struct UMaterial* WireframeMaterial; // 0x388(0x08)
	struct FString WireframeMaterialName; // 0x390(0x10)
	struct UMaterial* DebugMeshMaterial; // 0x3a0(0x08)
	struct FSoftObjectPath DebugMeshMaterialName; // 0x3a8(0x18)
	struct UMaterial* EmissiveMeshMaterial; // 0x3c0(0x08)
	struct FSoftObjectPath EmissiveMeshMaterialName; // 0x3c8(0x18)
	struct UMaterial* LevelColorationLitMaterial; // 0x3e0(0x08)
	struct FString LevelColorationLitMaterialName; // 0x3e8(0x10)
	struct UMaterial* LevelColorationUnlitMaterial; // 0x3f8(0x08)
	struct FString LevelColorationUnlitMaterialName; // 0x400(0x10)
	struct UMaterial* LightingTexelDensityMaterial; // 0x410(0x08)
	struct FString LightingTexelDensityName; // 0x418(0x10)
	struct UMaterial* ShadedLevelColorationLitMaterial; // 0x428(0x08)
	struct FString ShadedLevelColorationLitMaterialName; // 0x430(0x10)
	struct UMaterial* ShadedLevelColorationUnlitMaterial; // 0x440(0x08)
	struct FString ShadedLevelColorationUnlitMaterialName; // 0x448(0x10)
	struct UMaterial* RemoveSurfaceMaterial; // 0x458(0x08)
	struct FSoftObjectPath RemoveSurfaceMaterialName; // 0x460(0x18)
	struct UMaterial* VertexColorMaterial; // 0x478(0x08)
	struct FString VertexColorMaterialName; // 0x480(0x10)
	struct UMaterial* VertexColorViewModeMaterial_ColorOnly; // 0x490(0x08)
	struct FString VertexColorViewModeMaterialName_ColorOnly; // 0x498(0x10)
	struct UMaterial* VertexColorViewModeMaterial_AlphaAsColor; // 0x4a8(0x08)
	struct FString VertexColorViewModeMaterialName_AlphaAsColor; // 0x4b0(0x10)
	struct UMaterial* VertexColorViewModeMaterial_RedOnly; // 0x4c0(0x08)
	struct FString VertexColorViewModeMaterialName_RedOnly; // 0x4c8(0x10)
	struct UMaterial* VertexColorViewModeMaterial_GreenOnly; // 0x4d8(0x08)
	struct FString VertexColorViewModeMaterialName_GreenOnly; // 0x4e0(0x10)
	struct UMaterial* VertexColorViewModeMaterial_BlueOnly; // 0x4f0(0x08)
	struct FString VertexColorViewModeMaterialName_BlueOnly; // 0x4f8(0x10)
	struct FSoftObjectPath DebugEditorMaterialName; // 0x508(0x18)
	struct UMaterial* ConstraintLimitMaterial; // 0x520(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialX; // 0x528(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialXAxis; // 0x530(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialY; // 0x538(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialYAxis; // 0x540(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialZ; // 0x548(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialZAxis; // 0x550(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialPrismatic; // 0x558(0x08)
	struct UMaterial* InvalidLightmapSettingsMaterial; // 0x560(0x08)
	struct FSoftObjectPath InvalidLightmapSettingsMaterialName; // 0x568(0x18)
	struct UMaterial* PreviewShadowsIndicatorMaterial; // 0x580(0x08)
	struct FSoftObjectPath PreviewShadowsIndicatorMaterialName; // 0x588(0x18)
	struct UMaterial* ArrowMaterial; // 0x5a0(0x08)
	struct UMaterialInstanceDynamic* ArrowMaterialYellow; // 0x5a8(0x08)
	struct FSoftObjectPath ArrowMaterialName; // 0x5b0(0x18)
	struct FLinearColor LightingOnlyBrightness; // 0x5c8(0x10)
	struct TArray<struct FLinearColor> ShaderComplexityColors; // 0x5d8(0x10)
	struct TArray<struct FLinearColor> QuadComplexityColors; // 0x5e8(0x10)
	struct TArray<struct FLinearColor> LightComplexityColors; // 0x5f8(0x10)
	struct TArray<struct FLinearColor> StationaryLightOverlapColors; // 0x608(0x10)
	struct TArray<struct FLinearColor> LODColorationColors; // 0x618(0x10)
	struct TArray<struct FLinearColor> HLODColorationColors; // 0x628(0x10)
	struct TArray<struct FLinearColor> StreamingAccuracyColors; // 0x638(0x10)
	struct FLinearColor GPUSkinCacheVisualizationExcludedColor; // 0x648(0x10)
	struct FLinearColor GPUSkinCacheVisualizationIncludedColor; // 0x658(0x10)
	struct FLinearColor GPUSkinCacheVisualizationRecomputeTangentsColor; // 0x668(0x10)
	float GPUSkinCacheVisualizationLowMemoryThresholdInMB; // 0x678(0x04)
	float GPUSkinCacheVisualizationHighMemoryThresholdInMB; // 0x67c(0x04)
	struct FLinearColor GPUSkinCacheVisualizationLowMemoryColor; // 0x680(0x10)
	struct FLinearColor GPUSkinCacheVisualizationMidMemoryColor; // 0x690(0x10)
	struct FLinearColor GPUSkinCacheVisualizationHighMemoryColor; // 0x6a0(0x10)
	struct TArray<struct FLinearColor> GPUSkinCacheVisualizationRayTracingLODOffsetColors; // 0x6b0(0x10)
	float MaxPixelShaderAdditiveComplexityCount; // 0x6c0(0x04)
	float MaxES3PixelShaderAdditiveComplexityCount; // 0x6c4(0x04)
	float MinLightMapDensity; // 0x6c8(0x04)
	float IdealLightMapDensity; // 0x6cc(0x04)
	float MaxLightMapDensity; // 0x6d0(0x04)
	char bRenderLightMapDensityGrayscale : 1; // 0x6d4(0x01)
	char pad_6D4_1 : 7; // 0x6d4(0x01)
	char pad_6D5[0x3]; // 0x6d5(0x03)
	float RenderLightMapDensityGrayscaleScale; // 0x6d8(0x04)
	float RenderLightMapDensityColorScale; // 0x6dc(0x04)
	struct FLinearColor LightMapDensityVertexMappedColor; // 0x6e0(0x10)
	struct FLinearColor LightMapDensitySelectedColor; // 0x6f0(0x10)
	struct TArray<struct FStatColorMapping> StatColorMappings; // 0x700(0x10)
	struct UPhysicalMaterial* DefaultPhysMaterial; // 0x710(0x08)
	struct FSoftObjectPath DefaultPhysMaterialName; // 0x718(0x18)
	struct UPhysicalMaterial* DefaultDestructiblePhysMaterial; // 0x730(0x08)
	struct FSoftObjectPath DefaultDestructiblePhysMaterialName; // 0x738(0x18)
	struct TArray<struct FGameNameRedirect> ActiveGameNameRedirects; // 0x750(0x10)
	struct TArray<struct FClassRedirect> ActiveClassRedirects; // 0x760(0x10)
	struct TArray<struct FPluginRedirect> ActivePluginRedirects; // 0x770(0x10)
	struct TArray<struct FStructRedirect> ActiveStructRedirects; // 0x780(0x10)
	struct UTexture2D* PreIntegratedSkinBRDFTexture; // 0x790(0x08)
	struct FSoftObjectPath PreIntegratedSkinBRDFTextureName; // 0x798(0x18)
	struct UTexture2D* BlueNoiseScalarTexture; // 0x7b0(0x08)
	struct UTexture2D* BlueNoiseVec2Texture; // 0x7b8(0x08)
	struct FSoftObjectPath BlueNoiseScalarTextureName; // 0x7c0(0x18)
	struct FSoftObjectPath BlueNoiseVec2TextureName; // 0x7d8(0x18)
	struct UTexture2D* MiniFontTexture; // 0x7f0(0x08)
	struct FSoftObjectPath MiniFontTextureName; // 0x7f8(0x18)
	struct UTexture* WeightMapPlaceholderTexture; // 0x810(0x08)
	struct FSoftObjectPath WeightMapPlaceholderTextureName; // 0x818(0x18)
	struct UTexture2D* LightMapDensityTexture; // 0x830(0x08)
	struct FSoftObjectPath LightMapDensityTextureName; // 0x838(0x18)
	char pad_850[0x8]; // 0x850(0x08)
	struct UGameViewportClient* GameViewport; // 0x858(0x08)
	struct TArray<struct FString> DeferredCommands; // 0x860(0x10)
	float NearClipPlane; // 0x870(0x04)
	char bSubtitlesEnabled : 1; // 0x874(0x01)
	char bSubtitlesForcedOff : 1; // 0x874(0x01)
	char pad_874_2 : 6; // 0x874(0x01)
	char pad_875[0x3]; // 0x875(0x03)
	int32_t MaximumLoopIterationCount; // 0x878(0x04)
	char bCanBlueprintsTickByDefault : 1; // 0x87c(0x01)
	char bOptimizeAnimBlueprintMemberVariableAccess : 1; // 0x87c(0x01)
	char bAllowMultiThreadedAnimationUpdate : 1; // 0x87c(0x01)
	char bEnableEditorPSysRealtimeLOD : 1; // 0x87c(0x01)
	char pad_87C_4 : 1; // 0x87c(0x01)
	char bSmoothFrameRate : 1; // 0x87c(0x01)
	char bUseFixedFrameRate : 1; // 0x87c(0x01)
	char pad_87C_7 : 1; // 0x87c(0x01)
	char pad_87D[0x3]; // 0x87d(0x03)
	float FixedFrameRate; // 0x880(0x04)
	struct FFloatRange SmoothedFrameRateRange; // 0x884(0x10)
	char pad_894[0x4]; // 0x894(0x04)
	struct UEngineCustomTimeStep* CustomTimeStep; // 0x898(0x08)
	char pad_8A0[0x20]; // 0x8a0(0x20)
	struct FSoftClassPath CustomTimeStepClassName; // 0x8c0(0x18)
	struct UTimecodeProvider* TimecodeProvider; // 0x8d8(0x08)
	char pad_8E0[0x20]; // 0x8e0(0x20)
	struct FSoftClassPath TimecodeProviderClassName; // 0x900(0x18)
	bool bGenerateDefaultTimecode; // 0x918(0x01)
	char pad_919[0x3]; // 0x919(0x03)
	struct FFrameRate GenerateDefaultTimecodeFrameRate; // 0x91c(0x08)
	float GenerateDefaultTimecodeFrameDelay; // 0x924(0x04)
	char bCheckForMultiplePawnsSpawnedInAFrame : 1; // 0x928(0x01)
	char pad_928_1 : 7; // 0x928(0x01)
	char pad_929[0x3]; // 0x929(0x03)
	int32_t NumPawnsAllowedToBeSpawnedInAFrame; // 0x92c(0x04)
	char bShouldGenerateLowQualityLightmaps : 1; // 0x930(0x01)
	char pad_930_1 : 7; // 0x930(0x01)
	char pad_931[0x3]; // 0x931(0x03)
	struct FColor C_WorldBox; // 0x934(0x04)
	struct FColor C_BrushWire; // 0x938(0x04)
	struct FColor C_AddWire; // 0x93c(0x04)
	struct FColor C_SubtractWire; // 0x940(0x04)
	struct FColor C_SemiSolidWire; // 0x944(0x04)
	struct FColor C_NonSolidWire; // 0x948(0x04)
	struct FColor C_WireBackground; // 0x94c(0x04)
	struct FColor C_ScaleBoxHi; // 0x950(0x04)
	struct FColor C_VolumeCollision; // 0x954(0x04)
	struct FColor C_BSPCollision; // 0x958(0x04)
	struct FColor C_OrthoBackground; // 0x95c(0x04)
	struct FColor C_Volume; // 0x960(0x04)
	struct FColor C_BrushShape; // 0x964(0x04)
	float StreamingDistanceFactor; // 0x968(0x04)
	char pad_96C[0x4]; // 0x96c(0x04)
	struct FDirectoryPath GameScreenshotSaveDirectory; // 0x970(0x10)
	bool UseStaticMeshMinLODPerQualityLevels; // 0x980(0x01)
	bool UseSkeletalMeshMinLODPerQualityLevels; // 0x981(0x01)
	enum class ETransitionType TransitionType; // 0x982(0x01)
	char pad_983[0x5]; // 0x983(0x05)
	struct FString TransitionDescription; // 0x988(0x10)
	struct FString TransitionGameMode; // 0x998(0x10)
	char bAllowMatureLanguage : 1; // 0x9a8(0x01)
	char pad_9A8_1 : 7; // 0x9a8(0x01)
	char pad_9A9[0x3]; // 0x9a9(0x03)
	float CameraRotationThreshold; // 0x9ac(0x04)
	float CameraTranslationThreshold; // 0x9b0(0x04)
	float PrimitiveProbablyVisibleTime; // 0x9b4(0x04)
	float MaxOcclusionPixelsFraction; // 0x9b8(0x04)
	char bPauseOnLossOfFocus : 1; // 0x9bc(0x01)
	char pad_9BC_1 : 7; // 0x9bc(0x01)
	char pad_9BD[0x3]; // 0x9bd(0x03)
	int32_t MaxParticleResize; // 0x9c0(0x04)
	int32_t MaxParticleResizeWarn; // 0x9c4(0x04)
	struct TArray<struct FDropNoteInfo> PendingDroppedNotes; // 0x9c8(0x10)
	float NetClientTicksPerSecond; // 0x9d8(0x04)
	float DisplayGamma; // 0x9dc(0x04)
	float MinDesiredFrameRate; // 0x9e0(0x04)
	struct FLinearColor DefaultSelectedMaterialColor; // 0x9e4(0x10)
	struct FLinearColor SelectedMaterialColor; // 0x9f4(0x10)
	struct FLinearColor SelectionOutlineColor; // 0xa04(0x10)
	struct FLinearColor SubduedSelectionOutlineColor; // 0xa14(0x10)
	struct FLinearColor SelectedMaterialColorOverride; // 0xa24(0x10)
	bool bIsOverridingSelectedColor; // 0xa34(0x01)
	char pad_A35[0x3]; // 0xa35(0x03)
	char bEnableOnScreenDebugMessages : 1; // 0xa38(0x01)
	char bEnableOnScreenDebugMessagesDisplay : 1; // 0xa38(0x01)
	char bSuppressMapWarnings : 1; // 0xa38(0x01)
	char bDisableAILogging : 1; // 0xa38(0x01)
	char pad_A38_4 : 4; // 0xa38(0x01)
	char pad_A39[0x3]; // 0xa39(0x03)
	uint32_t bEnableVisualLogRecordingOnStart; // 0xa3c(0x04)
	int32_t ScreenSaverInhibitorSemaphore; // 0xa40(0x04)
	char bLockReadOnlyLevels : 1; // 0xa44(0x01)
	char pad_A44_1 : 7; // 0xa44(0x01)
	char pad_A45[0x3]; // 0xa45(0x03)
	struct FString ParticleEventManagerClassPath; // 0xa48(0x10)
	float SelectionHighlightIntensity; // 0xa58(0x04)
	float BSPSelectionHighlightIntensity; // 0xa5c(0x04)
	float SelectionHighlightIntensityBillboards; // 0xa60(0x04)
	char pad_A64[0x294]; // 0xa64(0x294)
	uint32_t GlobalNetTravelCount; // 0xcf8(0x04)
	char pad_CFC[0x4]; // 0xcfc(0x04)
	struct TArray<struct FNetDriverDefinition> NetDriverDefinitions; // 0xd00(0x10)
	struct TArray<struct FString> ServerActors; // 0xd10(0x10)
	struct TArray<struct FString> RuntimeServerActors; // 0xd20(0x10)
	float NetErrorLogInterval; // 0xd30(0x04)
	char bStartedLoadMapMovie : 1; // 0xd34(0x01)
	char pad_D34_1 : 7; // 0xd34(0x01)
	char pad_D35[0x1b]; // 0xd35(0x1b)
	int32_t NextWorldContextHandle; // 0xd50(0x04)
	char pad_D54[0x194]; // 0xd54(0x194)
};

// Class Engine.ScriptViewportClient
// Size: 0x38 (Inherited: 0x28)
struct UScriptViewportClient : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Engine.GameViewportClient
// Size: 0x390 (Inherited: 0x38)
struct UGameViewportClient : UScriptViewportClient {
	char pad_38[0x8]; // 0x38(0x08)
	struct UConsole* ViewportConsole; // 0x40(0x08)
	struct TArray<struct FDebugDisplayProperty> DebugProperties; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
	int32_t MaxSplitscreenPlayers; // 0x68(0x04)
	char pad_6C[0xc]; // 0x6c(0x0c)
	struct UWorld* World; // 0x78(0x08)
	struct UGameInstance* GameInstance; // 0x80(0x08)
	char pad_88[0x308]; // 0x88(0x308)

	void SSSwapControllers(); // Function Engine.GameViewportClient.SSSwapControllers // (Exec|Native|Public) // @ game+0x12fee80
	void ShowTitleSafeArea(); // Function Engine.GameViewportClient.ShowTitleSafeArea // (Exec|Native|Public) // @ game+0x67ce468
	void SetConsoleTarget(int32_t PlayerIndex); // Function Engine.GameViewportClient.SetConsoleTarget // (Exec|Native|Public) // @ game+0x92c11fc
};

// Class Engine.DataTable
// Size: 0xb0 (Inherited: 0x28)
struct UDataTable : UObject {
	struct UScriptStruct* RowStruct; // 0x28(0x08)
	char pad_30[0x50]; // 0x30(0x50)
	char bStripFromClientBuilds : 1; // 0x80(0x01)
	char bIgnoreExtraFields : 1; // 0x80(0x01)
	char bIgnoreMissingFields : 1; // 0x80(0x01)
	char pad_80_3 : 5; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct FString ImportKeyField; // 0x88(0x10)
	char pad_98[0x18]; // 0x98(0x18)
};

// Class Engine.DataAsset
// Size: 0x30 (Inherited: 0x28)
struct UDataAsset : UObject {
	struct UDataAsset* NativeClass; // 0x28(0x08)
};

// Class Engine.Player
// Size: 0x48 (Inherited: 0x28)
struct UPlayer : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct APlayerController* PlayerController; // 0x30(0x08)
	int32_t CurrentNetSpeed; // 0x38(0x04)
	int32_t ConfiguredInternetSpeed; // 0x3c(0x04)
	int32_t ConfiguredLanSpeed; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.LocalPlayer
// Size: 0x298 (Inherited: 0x48)
struct ULocalPlayer : UPlayer {
	char pad_48[0x30]; // 0x48(0x30)
	struct UGameViewportClient* ViewportClient; // 0x78(0x08)
	char pad_80[0x38]; // 0x80(0x38)
	enum class EAspectRatioAxisConstraint AspectRatioAxisConstraint; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct APlayerController* PendingLevelPlayerControllerClass; // 0xc0(0x08)
	char bSentSplitJoin : 1; // 0xc8(0x01)
	char pad_C8_1 : 7; // 0xc8(0x01)
	char pad_C9[0x17]; // 0xc9(0x17)
	int32_t ControllerId; // 0xe0(0x04)
	char pad_E4[0x1b4]; // 0xe4(0x1b4)
};

// Class Engine.Subsystem
// Size: 0x30 (Inherited: 0x28)
struct USubsystem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.LocalPlayerSubsystem
// Size: 0x30 (Inherited: 0x30)
struct ULocalPlayerSubsystem : USubsystem {
};

// Class Engine.BlueprintFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintFunctionLibrary : UObject {
};

// Class Engine.GameInstance
// Size: 0x1c0 (Inherited: 0x28)
struct UGameInstance : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TArray<struct ULocalPlayer*> LocalPlayers; // 0x38(0x10)
	struct UOnlineSession* OnlineSession; // 0x48(0x08)
	struct TArray<struct UObject*> ReferencedObjects; // 0x50(0x10)
	char pad_60[0x18]; // 0x60(0x18)
	struct FMulticastInlineDelegate OnPawnControllerChangedDelegates; // 0x78(0x10)
	char pad_88[0x18]; // 0x88(0x18)
	struct FMulticastInlineDelegate OnInputDeviceConnectionChange; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnUserInputDevicePairingChange; // 0xb0(0x10)
	char pad_C0[0x100]; // 0xc0(0x100)

	void ReceiveShutdown(); // Function Engine.GameInstance.ReceiveShutdown // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveInit(); // Function Engine.GameInstance.ReceiveInit // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void HandleTravelError(enum class ETravelFailure FailureType); // Function Engine.GameInstance.HandleTravelError // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void HandleNetworkError(enum class ENetworkFailure FailureType, bool bIsServer); // Function Engine.GameInstance.HandleNetworkError // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void DebugRemovePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugRemovePlayer // (Exec|Native|Public) // @ game+0x92b3f28
	void DebugCreatePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugCreatePlayer // (Exec|Native|Public) // @ game+0x92b3ea4
};

// Class Engine.GameInstanceSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UGameInstanceSubsystem : USubsystem {
};

// Class Engine.ActorComponent
// Size: 0xa0 (Inherited: 0x28)
struct UActorComponent : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FActorComponentTickFunction PrimaryComponentTick; // 0x30(0x30)
	struct TArray<struct FName> ComponentTags; // 0x60(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x70(0x10)
	char pad_80[0x4]; // 0x80(0x04)
	int32_t UCSSerializationIndex; // 0x84(0x04)
	char pad_88_0 : 3; // 0x88(0x01)
	char bNetAddressable : 1; // 0x88(0x01)
	char bReplicateUsingRegisteredSubObjectList : 1; // 0x88(0x01)
	char bReplicates : 1; // 0x88(0x01)
	char pad_88_6 : 2; // 0x88(0x01)
	char pad_89[0x1]; // 0x89(0x01)
	char pad_8A_0 : 1; // 0x8a(0x01)
	char bAutoActivate : 1; // 0x8a(0x01)
	char bIsActive : 1; // 0x8a(0x01)
	char bEditableWhenInherited : 1; // 0x8a(0x01)
	char pad_8A_4 : 1; // 0x8a(0x01)
	char bCanEverAffectNavigation : 1; // 0x8a(0x01)
	char pad_8A_6 : 1; // 0x8a(0x01)
	char bIsEditorOnly : 1; // 0x8a(0x01)
	char pad_8B[0x2]; // 0x8b(0x02)
	enum class EComponentCreationMethod CreationMethod; // 0x8d(0x01)
	struct FMulticastSparseDelegate OnComponentActivated; // 0x8e(0x01)
	struct FMulticastSparseDelegate OnComponentDeactivated; // 0x8f(0x01)
	char pad_90[0x10]; // 0x90(0x10)

	void ToggleActive(); // Function Engine.ActorComponent.ToggleActive // (Native|Public|BlueprintCallable) // @ game+0x16ee844
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.ActorComponent.SetTickGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x73674b0
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.ActorComponent.SetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x927c9a8
	void SetIsReplicated(bool ShouldReplicate); // Function Engine.ActorComponent.SetIsReplicated // (Final|Native|Public|BlueprintCallable) // @ game+0x927c928
	void SetComponentTickIntervalAndCooldown(float TickInterval); // Function Engine.ActorComponent.SetComponentTickIntervalAndCooldown // (Final|Native|Public|BlueprintCallable) // @ game+0x927c8a0
	void SetComponentTickInterval(float TickInterval); // Function Engine.ActorComponent.SetComponentTickInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x70bf1cc
	void SetComponentTickEnabled(bool bEnabled); // Function Engine.ActorComponent.SetComponentTickEnabled // (Native|Public|BlueprintCallable) // @ game+0x218811c
	void SetAutoActivate(bool bNewAutoActivate); // Function Engine.ActorComponent.SetAutoActivate // (Native|Public|BlueprintCallable) // @ game+0x11adf54
	void SetActive(bool bNewActive, bool bReset); // Function Engine.ActorComponent.SetActive // (Native|Public|BlueprintCallable) // @ game+0x1817180
	void RemoveTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.ActorComponent.RemoveTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x927c81c
	void RemoveTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.ActorComponent.RemoveTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x927c798
	void ReceiveTick(float DeltaSeconds); // Function Engine.ActorComponent.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.ActorComponent.ReceiveEndPlay // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveBeginPlay(); // Function Engine.ActorComponent.ReceiveBeginPlay // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds); // Function Engine.ActorComponent.ReceiveAsyncPhysicsTick // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void OnRep_IsActive(); // Function Engine.ActorComponent.OnRep_IsActive // (Native|Public) // @ game+0x12fee80
	void K2_DestroyComponent(struct UObject* Object); // Function Engine.ActorComponent.K2_DestroyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2289ecc
	bool IsComponentTickEnabled(); // Function Engine.ActorComponent.IsComponentTickEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927c6ec
	bool IsBeingDestroyed(); // Function Engine.ActorComponent.IsBeingDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927c6d0
	bool IsActive(); // Function Engine.ActorComponent.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x24ace78
	struct AActor* GetOwner(); // Function Engine.ActorComponent.GetOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c7ea00
	float GetComponentTickInterval(); // Function Engine.ActorComponent.GetComponentTickInterval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x267a9e8
	void Deactivate(); // Function Engine.ActorComponent.Deactivate // (Native|Public|BlueprintCallable) // @ game+0x18168e4
	bool ComponentHasTag(struct FName tag); // Function Engine.ActorComponent.ComponentHasTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1459458
	void AddTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.ActorComponent.AddTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x927c3dc
	void AddTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.ActorComponent.AddTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x927c358
	void Activate(bool bReset); // Function Engine.ActorComponent.Activate // (Native|Public|BlueprintCallable) // @ game+0x129d7b8
};

// Class Engine.WorldSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UWorldSubsystem : USubsystem {
};

// Class Engine.BlueprintAsyncActionBase
// Size: 0x30 (Inherited: 0x28)
struct UBlueprintAsyncActionBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	void Activate(); // Function Engine.BlueprintAsyncActionBase.Activate // (Native|Public|BlueprintCallable) // @ game+0x12fee80
};

// Class Engine.CancellableAsyncAction
// Size: 0x30 (Inherited: 0x30)
struct UCancellableAsyncAction : UBlueprintAsyncActionBase {

	bool IsActive(); // Function Engine.CancellableAsyncAction.IsActive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x74b2ee4
	void Cancel(); // Function Engine.CancellableAsyncAction.Cancel // (Native|Public|BlueprintCallable) // @ game+0x16ee844
};

// Class Engine.Pawn
// Size: 0x310 (Inherited: 0x288)
struct APawn : AActor {
	char pad_288[0x8]; // 0x288(0x08)
	char bUseControllerRotationPitch : 1; // 0x290(0x01)
	char bUseControllerRotationYaw : 1; // 0x290(0x01)
	char bUseControllerRotationRoll : 1; // 0x290(0x01)
	char bCanAffectNavigationGeneration : 1; // 0x290(0x01)
	char pad_290_4 : 2; // 0x290(0x01)
	char bIsLocalViewTarget : 1; // 0x290(0x01)
	char pad_290_7 : 1; // 0x290(0x01)
	char pad_291[0x3]; // 0x291(0x03)
	float BaseEyeHeight; // 0x294(0x04)
	enum class EAutoReceiveInput AutoPossessPlayer; // 0x298(0x01)
	enum class EAutoPossessAI AutoPossessAI; // 0x299(0x01)
	char RemoteViewPitch; // 0x29a(0x01)
	char pad_29B[0x5]; // 0x29b(0x05)
	struct AController* AIControllerClass; // 0x2a0(0x08)
	struct APlayerState* PlayerState; // 0x2a8(0x08)
	char pad_2B0[0x8]; // 0x2b0(0x08)
	struct AController* LastHitBy; // 0x2b8(0x08)
	struct AController* Controller; // 0x2c0(0x08)
	struct AController* PreviousController; // 0x2c8(0x08)
	char pad_2D0[0x4]; // 0x2d0(0x04)
	struct FMulticastSparseDelegate ReceiveControllerChangedDelegate; // 0x2d4(0x01)
	struct FMulticastSparseDelegate ReceiveRestartedDelegate; // 0x2d5(0x01)
	char pad_2D6[0x2]; // 0x2d6(0x02)
	struct FVector ControlInputVector; // 0x2d8(0x18)
	struct FVector LastControlInputVector; // 0x2f0(0x18)
	struct UInputComponent* OverrideInputComponentClass; // 0x308(0x08)

	void SpawnDefaultController(); // Function Engine.Pawn.SpawnDefaultController // (Native|Public|BlueprintCallable) // @ game+0x211840c
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate); // Function Engine.Pawn.SetCanAffectNavigationGeneration // (Final|Native|Public|BlueprintCallable) // @ game+0x9320904
	void ReceiveUnpossessed(struct AController* OldController); // Function Engine.Pawn.ReceiveUnpossessed // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveRestarted(); // Function Engine.Pawn.ReceiveRestarted // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceivePossessed(struct AController* NewController); // Function Engine.Pawn.ReceivePossessed // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveControllerChanged(struct AController* OldController, struct AController* NewController); // Function Engine.Pawn.ReceiveControllerChanged // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void PawnMakeNoise(float Loudness, struct FVector NoiseLocation, bool bUseNoiseMakerLocation, struct AActor* NoiseMaker); // Function Engine.Pawn.PawnMakeNoise // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93207a0
	void OnRep_PlayerState(); // Function Engine.Pawn.OnRep_PlayerState // (Native|Public) // @ game+0x13e2790
	void OnRep_Controller(); // Function Engine.Pawn.OnRep_Controller // (Native|Public) // @ game+0x60e0420
	bool IsPlayerControlled(); // Function Engine.Pawn.IsPlayerControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fe2c00
	bool IsPawnControlled(); // Function Engine.Pawn.IsPawnControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9320660
	bool IsMoveInputIgnored(); // Function Engine.Pawn.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9320610
	bool IsLocallyViewed(); // Function Engine.Pawn.IsLocallyViewed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22977ac
	bool IsLocallyControlled(); // Function Engine.Pawn.IsLocallyControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21def40
	bool IsControlled(); // Function Engine.Pawn.IsControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93205b8
	bool IsBotControlled(); // Function Engine.Pawn.IsBotControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9320590
	struct FVector GetPendingMovementInputVector(); // Function Engine.Pawn.GetPendingMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9320568
	struct UInputComponent* GetOverrideInputComponentClass(); // Function Engine.Pawn.GetOverrideInputComponentClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9320504
	struct FVector GetNavAgentLocation(); // Function Engine.Pawn.GetNavAgentLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93204c4
	struct UPawnMovementComponent* GetMovementComponent(); // Function Engine.Pawn.GetMovementComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ab814
	struct AActor* GetMovementBaseActor(struct APawn* Pawn); // Function Engine.Pawn.GetMovementBaseActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9320444
	struct APlayerController* GetLocalViewingPlayerController(); // Function Engine.Pawn.GetLocalViewingPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f4bcc
	struct FVector GetLastMovementInputVector(); // Function Engine.Pawn.GetLastMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x932041c
	struct FRotator GetControlRotation(); // Function Engine.Pawn.GetControlRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93203b0
	struct AController* GetController(); // Function Engine.Pawn.GetController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2355268
	struct FRotator GetBaseAimRotation(); // Function Engine.Pawn.GetBaseAimRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9320298
	void DetachFromControllerPendingDestroy(); // Function Engine.Pawn.DetachFromControllerPendingDestroy // (Native|Public|BlueprintCallable) // @ game+0x22633a4
	struct FVector ConsumeMovementInputVector(); // Function Engine.Pawn.ConsumeMovementInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x932025c
	void AddMovementInput(struct FVector WorldDirection, float ScaleValue, bool bForce); // Function Engine.Pawn.AddMovementInput // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x931fdb8
	void AddControllerYawInput(float Val); // Function Engine.Pawn.AddControllerYawInput // (Native|Public|BlueprintCallable) // @ game+0x931fc54
	void AddControllerRollInput(float Val); // Function Engine.Pawn.AddControllerRollInput // (Native|Public|BlueprintCallable) // @ game+0x931fbcc
	void AddControllerPitchInput(float Val); // Function Engine.Pawn.AddControllerPitchInput // (Native|Public|BlueprintCallable) // @ game+0x931fb44
};

// Class Engine.DefaultPawn
// Size: 0x338 (Inherited: 0x310)
struct ADefaultPawn : APawn {
	float BaseTurnRate; // 0x310(0x04)
	float BaseLookUpRate; // 0x314(0x04)
	struct UPawnMovementComponent* MovementComponent; // 0x318(0x08)
	struct USphereComponent* CollisionComponent; // 0x320(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x328(0x08)
	char bAddDefaultMovementBindings : 1; // 0x330(0x01)
	char pad_330_1 : 7; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)

	void TurnAtRate(float Rate); // Function Engine.DefaultPawn.TurnAtRate // (Native|Public|BlueprintCallable) // @ game+0x92ad148
	void MoveUp_World(float Val); // Function Engine.DefaultPawn.MoveUp_World // (Native|Public|BlueprintCallable) // @ game+0x92ac714
	void MoveRight(float Val); // Function Engine.DefaultPawn.MoveRight // (Native|Public|BlueprintCallable) // @ game+0x92ac68c
	void MoveForward(float Val); // Function Engine.DefaultPawn.MoveForward // (Native|Public|BlueprintCallable) // @ game+0x92ac604
	void LookUpAtRate(float Rate); // Function Engine.DefaultPawn.LookUpAtRate // (Native|Public|BlueprintCallable) // @ game+0x92ac57c
};

// Class Engine.AnimNotify
// Size: 0x38 (Inherited: 0x28)
struct UAnimNotify : UObject {
	char pad_28[0x10]; // 0x28(0x10)

	bool Received_Notify(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, struct FAnimNotifyEventReference& EventReference); // Function Engine.AnimNotify.Received_Notify // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0xd67374
	struct FString GetNotifyName(); // Function Engine.AnimNotify.GetNotifyName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x9286890
	float GetDefaultTriggerWeightThreshold(); // Function Engine.AnimNotify.GetDefaultTriggerWeightThreshold // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x928673c
};

// Class Engine.AnimNotifyState
// Size: 0x30 (Inherited: 0x28)
struct UAnimNotifyState : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	bool Received_NotifyTick(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, float FrameDeltaTime, struct FAnimNotifyEventReference& EventReference); // Function Engine.AnimNotifyState.Received_NotifyTick // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0xd67374
	bool Received_NotifyEnd(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, struct FAnimNotifyEventReference& EventReference); // Function Engine.AnimNotifyState.Received_NotifyEnd // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0xd67374
	bool Received_NotifyBegin(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, float TotalDuration, struct FAnimNotifyEventReference& EventReference); // Function Engine.AnimNotifyState.Received_NotifyBegin // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0xd67374
	struct FString GetNotifyName(); // Function Engine.AnimNotifyState.GetNotifyName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x9286890
	float GetDefaultTriggerWeightThreshold(); // Function Engine.AnimNotifyState.GetDefaultTriggerWeightThreshold // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x928673c
};

// Class Engine.BlueprintCore
// Size: 0x50 (Inherited: 0x28)
struct UBlueprintCore : UObject {
	struct UObject* SkeletonGeneratedClass; // 0x28(0x08)
	struct UObject* GeneratedClass; // 0x30(0x08)
	bool bLegacyNeedToPurgeSkelRefs; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FGuid BlueprintGuid; // 0x3c(0x10)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.Blueprint
// Size: 0xa8 (Inherited: 0x50)
struct UBlueprint : UBlueprintCore {
	char pad_50[0x8]; // 0x50(0x08)
	struct UObject* ParentClass; // 0x58(0x08)
	enum class EBlueprintType BlueprintType; // 0x60(0x01)
	char bRecompileOnLoad : 1; // 0x61(0x01)
	char bHasBeenRegenerated : 1; // 0x61(0x01)
	char bIsRegeneratingOnLoad : 1; // 0x61(0x01)
	char pad_61_3 : 5; // 0x61(0x01)
	char pad_62[0x2]; // 0x62(0x02)
	int32_t BlueprintSystemVersion; // 0x64(0x04)
	struct USimpleConstructionScript* SimpleConstructionScript; // 0x68(0x08)
	struct TArray<struct UActorComponent*> ComponentTemplates; // 0x70(0x10)
	struct TArray<struct UTimelineTemplate*> Timelines; // 0x80(0x10)
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides; // 0x90(0x10)
	struct UInheritableComponentHandler* InheritableComponentHandler; // 0xa0(0x08)
};

// Class Engine.SceneComponent
// Size: 0x2a0 (Inherited: 0xa0)
struct USceneComponent : UActorComponent {
	char pad_A0[0x8]; // 0xa0(0x08)
	struct TWeakObjectPtr<struct APhysicsVolume> PhysicsVolume; // 0xa8(0x08)
	struct USceneComponent* AttachParent; // 0xb0(0x08)
	struct FName AttachSocketName; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct TArray<struct USceneComponent*> AttachChildren; // 0xc0(0x10)
	struct TArray<struct USceneComponent*> ClientAttachedChildren; // 0xd0(0x10)
	char pad_E0[0x48]; // 0xe0(0x48)
	struct FVector RelativeLocation; // 0x128(0x18)
	struct FRotator RelativeRotation; // 0x140(0x18)
	struct FVector RelativeScale3D; // 0x158(0x18)
	struct FVector ComponentVelocity; // 0x170(0x18)
	char bComponentToWorldUpdated : 1; // 0x188(0x01)
	char pad_188_1 : 1; // 0x188(0x01)
	char bAbsoluteLocation : 1; // 0x188(0x01)
	char bAbsoluteRotation : 1; // 0x188(0x01)
	char bAbsoluteScale : 1; // 0x188(0x01)
	char bVisible : 1; // 0x188(0x01)
	char bShouldBeAttached : 1; // 0x188(0x01)
	char bShouldSnapLocationWhenAttached : 1; // 0x188(0x01)
	char bShouldSnapRotationWhenAttached : 1; // 0x189(0x01)
	char bShouldSnapScaleWhenAttached : 1; // 0x189(0x01)
	char bShouldUpdatePhysicsVolume : 1; // 0x189(0x01)
	char bHiddenInGame : 1; // 0x189(0x01)
	char bBoundsChangeTriggersStreamingDataRebuild : 1; // 0x189(0x01)
	char bUseAttachParentBound : 1; // 0x189(0x01)
	char bComputeFastLocalBounds : 1; // 0x189(0x01)
	char bComputeBoundsOnceForGame : 1; // 0x189(0x01)
	char bComputedBoundsOnceForGame : 1; // 0x18a(0x01)
	char pad_18A_1 : 7; // 0x18a(0x01)
	enum class EComponentMobility Mobility; // 0x18b(0x01)
	enum class EDetailMode DetailMode; // 0x18c(0x01)
	struct FMulticastSparseDelegate PhysicsVolumeChangedDelegate; // 0x18d(0x01)
	char pad_18E[0x112]; // 0x18e(0x112)

	void ToggleVisibility(bool bPropagateToChildren); // Function Engine.SceneComponent.ToggleVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x933c4bc
	void SetWorldScale3D(struct FVector NewScale); // Function Engine.SceneComponent.SetWorldScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1519d08
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren); // Function Engine.SceneComponent.SetVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x151ab78
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume); // Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x933c104
	void SetRelativeScale3D(struct FVector NewScale3D); // Function Engine.SceneComponent.SetRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x25a62d0
	void SetMobility(enum class EComponentMobility NewMobility); // Function Engine.SceneComponent.SetMobility // (Native|Public|BlueprintCallable) // @ game+0x2adee50
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren); // Function Engine.SceneComponent.SetHiddenInGame // (Final|Native|Public|BlueprintCallable) // @ game+0x1518810
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale); // Function Engine.SceneComponent.SetAbsolute // (Final|Native|Public|BlueprintCallable) // @ game+0x2593b84
	void ResetRelativeTransform(); // Function Engine.SceneComponent.ResetRelativeTransform // (Final|Native|Public|BlueprintCallable) // @ game+0x933c074
	void OnRep_Visibility(bool OldValue); // Function Engine.SceneComponent.OnRep_Visibility // (Final|Native|Private) // @ game+0x2ac1c7c
	void OnRep_Transform(); // Function Engine.SceneComponent.OnRep_Transform // (Final|Native|Private) // @ game+0x24c1598
	void OnRep_AttachSocketName(); // Function Engine.SceneComponent.OnRep_AttachSocketName // (Final|Native|Private) // @ game+0x241ac88
	void OnRep_AttachParent(); // Function Engine.SceneComponent.OnRep_AttachParent // (Final|Native|Private) // @ game+0x263b690
	void OnRep_AttachChildren(); // Function Engine.SceneComponent.OnRep_AttachChildren // (Final|Native|Private) // @ game+0x1fd80cc
	void K2_SetWorldTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11b8cb4
	void K2_SetWorldRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11b9e80
	void K2_SetWorldLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2ac5900
	void K2_SetWorldLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11ba278
	void K2_SetRelativeTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2735834
	void K2_SetRelativeRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11ba438
	void K2_SetRelativeLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2421eb8
	void K2_SetRelativeLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11b9ad0
	struct FTransform K2_GetComponentToWorld(); // Function Engine.SceneComponent.K2_GetComponentToWorld // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x21acbbc
	struct FVector K2_GetComponentScale(); // Function Engine.SceneComponent.K2_GetComponentScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x933bcb0
	struct FRotator K2_GetComponentRotation(); // Function Engine.SceneComponent.K2_GetComponentRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x20cd808
	struct FVector K2_GetComponentLocation(); // Function Engine.SceneComponent.K2_GetComponentLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x232a07c
	void K2_DetachFromComponent(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule, bool bCallModify); // Function Engine.SceneComponent.K2_DetachFromComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x129c2e4
	bool K2_AttachToComponent(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachToComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x129c070
	bool K2_AttachTo(struct USceneComponent* InParent, struct FName InSocketName, enum class EAttachLocation AttachType, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachTo // (Final|Native|Public|BlueprintCallable) // @ game+0x933bb70
	void K2_AddWorldTransformKeepScale(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldTransformKeepScale // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x933b970
	void K2_AddWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x933b770
	void K2_AddWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x933b5cc
	void K2_AddWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x933b428
	void K2_AddRelativeRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x933b254
	void K2_AddRelativeLocation(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x933b0b8
	void K2_AddLocalTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x933aeb8
	void K2_AddLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11babe8
	void K2_AddLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x243a064
	bool IsVisible(); // Function Engine.SceneComponent.IsVisible // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2a60c30
	bool IsSimulatingPhysics(struct FName BoneName); // Function Engine.SceneComponent.IsSimulatingPhysics // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933ae24
	bool IsAnySimulatingPhysics(); // Function Engine.SceneComponent.IsAnySimulatingPhysics // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x74b12ac
	struct FVector GetUpVector(); // Function Engine.SceneComponent.GetUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x933a9ec
	struct FTransform GetSocketTransform(struct FName InSocketName, enum class ERelativeTransformSpace TransformSpace); // Function Engine.SceneComponent.GetSocketTransform // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2221228
	struct FRotator GetSocketRotation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ac03ec
	struct FQuat GetSocketQuaternion(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketQuaternion // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x933a948
	struct FVector GetSocketLocation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2302a7c
	bool GetShouldUpdatePhysicsVolume(); // Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933a92c
	struct FVector GetRightVector(); // Function Engine.SceneComponent.GetRightVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x22a2ab4
	struct FTransform GetRelativeTransform(); // Function Engine.SceneComponent.GetRelativeTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x933a8b0
	struct APhysicsVolume* GetPhysicsVolume(); // Function Engine.SceneComponent.GetPhysicsVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933a88c
	void GetParentComponents(struct TArray<struct USceneComponent*>& Parents); // Function Engine.SceneComponent.GetParentComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1b96d28
	int32_t GetNumChildrenComponents(); // Function Engine.SceneComponent.GetNumChildrenComponents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x68b8030
	struct FVector GetForwardVector(); // Function Engine.SceneComponent.GetForwardVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x24071c8
	struct FVector GetComponentVelocity(); // Function Engine.SceneComponent.GetComponentVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x23b4d9c
	void GetChildrenComponents(bool bIncludeAllDescendants, struct TArray<struct USceneComponent*>& Children); // Function Engine.SceneComponent.GetChildrenComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c23eac
	struct USceneComponent* GetChildComponent(int32_t ChildIndex); // Function Engine.SceneComponent.GetChildComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933a800
	struct FName GetAttachSocketName(); // Function Engine.SceneComponent.GetAttachSocketName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29ee8a4
	struct USceneComponent* GetAttachParent(); // Function Engine.SceneComponent.GetAttachParent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29af5f8
	struct TArray<struct FName> GetAllSocketNames(); // Function Engine.SceneComponent.GetAllSocketNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20f4894
	bool DoesSocketExist(struct FName InSocketName); // Function Engine.SceneComponent.DoesSocketExist // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933a76c
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify); // Function Engine.SceneComponent.DetachFromParent // (Native|Public|BlueprintCallable) // @ game+0x933a6a0
};

// Class Engine.PrimitiveComponent
// Size: 0x530 (Inherited: 0x2a0)
struct UPrimitiveComponent : USceneComponent {
	char pad_2A0[0x10]; // 0x2a0(0x10)
	float MinDrawDistance; // 0x2b0(0x04)
	float LDMaxDrawDistance; // 0x2b4(0x04)
	float CachedMaxDrawDistance; // 0x2b8(0x04)
	enum class ESceneDepthPriorityGroup DepthPriorityGroup; // 0x2bc(0x01)
	enum class ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x2bd(0x01)
	enum class EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x2be(0x01)
	enum class ELightmapType LightmapType; // 0x2bf(0x01)
	char bIsValidTextureStreamingBuiltData : 1; // 0x2c0(0x01)
	char bNeverDistanceCull : 1; // 0x2c0(0x01)
	char pad_2C0_2 : 5; // 0x2c0(0x01)
	char bAlwaysCreatePhysicsState : 1; // 0x2c0(0x01)
	char bGenerateOverlapEvents : 1; // 0x2c1(0x01)
	char bMultiBodyOverlap : 1; // 0x2c1(0x01)
	char bTraceComplexOnMove : 1; // 0x2c1(0x01)
	char bReturnMaterialOnMove : 1; // 0x2c1(0x01)
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x2c1(0x01)
	char bAllowCullDistanceVolume : 1; // 0x2c1(0x01)
	char bHasMotionBlurVelocityMeshes : 1; // 0x2c1(0x01)
	char bVisibleInReflectionCaptures : 1; // 0x2c1(0x01)
	char bVisibleInRealTimeSkyCaptures : 1; // 0x2c2(0x01)
	char bVisibleInRayTracing : 1; // 0x2c2(0x01)
	char bRenderInMainPass : 1; // 0x2c2(0x01)
	char bRenderInDepthPass : 1; // 0x2c2(0x01)
	char bReceivesDecals : 1; // 0x2c2(0x01)
	char bOwnerNoSee : 1; // 0x2c2(0x01)
	char bOnlyOwnerSee : 1; // 0x2c2(0x01)
	char bTreatAsBackgroundForOcclusion : 1; // 0x2c2(0x01)
	char bUseAsOccluder : 1; // 0x2c3(0x01)
	char bSelectable : 1; // 0x2c3(0x01)
	char bForceMipStreaming : 1; // 0x2c3(0x01)
	char bHasPerInstanceHitProxies : 1; // 0x2c3(0x01)
	char CastShadow : 1; // 0x2c3(0x01)
	char bEmissiveLightSource : 1; // 0x2c3(0x01)
	char bAffectDynamicIndirectLighting : 1; // 0x2c3(0x01)
	char bAffectDistanceFieldLighting : 1; // 0x2c3(0x01)
	char bCastDynamicShadow : 1; // 0x2c4(0x01)
	char bCastStaticShadow : 1; // 0x2c4(0x01)
	char bCastVolumetricTranslucentShadow : 1; // 0x2c4(0x01)
	char bCastContactShadow : 1; // 0x2c4(0x01)
	char bSelfShadowOnly : 1; // 0x2c4(0x01)
	char bCastFarShadow : 1; // 0x2c4(0x01)
	char bCastInsetShadow : 1; // 0x2c4(0x01)
	char bCastCinematicShadow : 1; // 0x2c4(0x01)
	char bCastHiddenShadow : 1; // 0x2c5(0x01)
	char bCastShadowAsTwoSided : 1; // 0x2c5(0x01)
	char bLightAsIfStatic : 1; // 0x2c5(0x01)
	char bLightAttachmentsAsGroup : 1; // 0x2c5(0x01)
	char bExcludeFromLightAttachmentGroup : 1; // 0x2c5(0x01)
	char bReceiveMobileCSMShadows : 1; // 0x2c5(0x01)
	char bSingleSampleShadowFromStationaryLights : 1; // 0x2c5(0x01)
	char bIgnoreRadialImpulse : 1; // 0x2c5(0x01)
	char bIgnoreRadialForce : 1; // 0x2c6(0x01)
	char bApplyImpulseOnDamage : 1; // 0x2c6(0x01)
	char bReplicatePhysicsToAutonomousProxy : 1; // 0x2c6(0x01)
	char bFillCollisionUnderneathForNavmesh : 1; // 0x2c6(0x01)
	char AlwaysLoadOnClient : 1; // 0x2c6(0x01)
	char AlwaysLoadOnServer : 1; // 0x2c6(0x01)
	char bUseEditorCompositing : 1; // 0x2c6(0x01)
	char bIsBeingMovedByEditor : 1; // 0x2c6(0x01)
	char bRenderCustomDepth : 1; // 0x2c7(0x01)
	char bVisibleInSceneCaptureOnly : 1; // 0x2c7(0x01)
	char bHiddenInSceneCapture : 1; // 0x2c7(0x01)
	char bRayTracingFarField : 1; // 0x2c7(0x01)
	char pad_2C7_4 : 1; // 0x2c7(0x01)
	char bHasNoStreamableTextures : 1; // 0x2c7(0x01)
	char pad_2C7_6 : 2; // 0x2c7(0x01)
	enum class EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x2c8(0x01)
	char pad_2C9[0x1]; // 0x2c9(0x01)
	enum class ECanBeCharacterBase CanCharacterStepUpOn; // 0x2ca(0x01)
	struct FLightingChannels LightingChannels; // 0x2cb(0x01)
	int32_t RayTracingGroupId; // 0x2cc(0x04)
	int32_t VisibilityId; // 0x2d0(0x04)
	int32_t CustomDepthStencilValue; // 0x2d4(0x04)
	struct FCustomPrimitiveData CustomPrimitiveData; // 0x2d8(0x10)
	struct FCustomPrimitiveData CustomPrimitiveDataInternal; // 0x2e8(0x10)
	char pad_2F8[0x8]; // 0x2f8(0x08)
	int32_t TranslucencySortPriority; // 0x300(0x04)
	float TranslucencySortDistanceOffset; // 0x304(0x04)
	struct TArray<struct URuntimeVirtualTexture*> RuntimeVirtualTextures; // 0x308(0x10)
	int8_t VirtualTextureLodBias; // 0x318(0x01)
	int8_t VirtualTextureCullMips; // 0x319(0x01)
	int8_t VirtualTextureMinCoverage; // 0x31a(0x01)
	enum class ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType; // 0x31b(0x01)
	char pad_31C[0x10]; // 0x31c(0x10)
	float BoundsScale; // 0x32c(0x04)
	char pad_330[0x10]; // 0x330(0x10)
	struct TArray<struct AActor*> MoveIgnoreActors; // 0x340(0x10)
	struct TArray<struct UPrimitiveComponent*> MoveIgnoreComponents; // 0x350(0x10)
	char pad_360[0x10]; // 0x360(0x10)
	struct FBodyInstance BodyInstance; // 0x370(0x188)
	struct FMulticastSparseDelegate OnComponentHit; // 0x4f8(0x01)
	struct FMulticastSparseDelegate OnComponentBeginOverlap; // 0x4f9(0x01)
	struct FMulticastSparseDelegate OnComponentEndOverlap; // 0x4fa(0x01)
	struct FMulticastSparseDelegate OnComponentWake; // 0x4fb(0x01)
	struct FMulticastSparseDelegate OnComponentSleep; // 0x4fc(0x01)
	char pad_4FD[0x1]; // 0x4fd(0x01)
	struct FMulticastSparseDelegate OnComponentPhysicsStateChanged; // 0x4fe(0x01)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x4ff(0x01)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x500(0x01)
	struct FMulticastSparseDelegate OnClicked; // 0x501(0x01)
	struct FMulticastSparseDelegate OnReleased; // 0x502(0x01)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x503(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x504(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x505(0x01)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x506(0x01)
	enum class ERayTracingGroupCullingPriority RayTracingGroupCullingPriority; // 0x507(0x01)
	enum class ERendererStencilMask CustomDepthStencilWriteMask; // 0x508(0x01)
	char pad_509[0x1f]; // 0x509(0x1f)
	struct UPrimitiveComponent* LODParentPrimitive; // 0x528(0x08)

	bool WasRecentlyRendered(float Tolerance); // Function Engine.PrimitiveComponent.WasRecentlyRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9336d2c
	void WakeRigidBody(struct FName BoneName); // Function Engine.PrimitiveComponent.WakeRigidBody // (Native|Public|BlueprintCallable) // @ game+0x9336ca8
	void WakeAllRigidBodies(); // Function Engine.PrimitiveComponent.WakeAllRigidBodies // (Native|Public|BlueprintCallable) // @ game+0x1043328
	void SetWalkableSlopeOverride(struct FWalkableSlopeOverride& NewOverride); // Function Engine.PrimitiveComponent.SetWalkableSlopeOverride // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9336c04
	void SetVisibleInSceneCaptureOnly(bool bValue); // Function Engine.PrimitiveComponent.SetVisibleInSceneCaptureOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x9336b64
	void SetVisibleInRayTracing(bool bNewVisibleInRayTracing); // Function Engine.PrimitiveComponent.SetVisibleInRayTracing // (Final|Native|Public|BlueprintCallable) // @ game+0x9336ae4
	void SetVectorParameterForDefaultCustomPrimitiveData(struct FName ParameterName, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetVectorParameterForDefaultCustomPrimitiveData // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93369fc
	void SetVectorParameterForCustomPrimitiveData(struct FName ParameterName, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetVectorParameterForCustomPrimitiveData // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9336914
	void SetUseCCD(bool InUseCCD, struct FName BoneName); // Function Engine.PrimitiveComponent.SetUseCCD // (Native|Public|BlueprintCallable) // @ game+0x933684c
	void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority); // Function Engine.PrimitiveComponent.SetTranslucentSortPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x2895f64
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset); // Function Engine.PrimitiveComponent.SetTranslucencySortDistanceOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x93367a4
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights); // Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights // (Final|Native|Public|BlueprintCallable) // @ game+0x9336704
	void SetSimulatePhysics(bool bSimulate); // Function Engine.PrimitiveComponent.SetSimulatePhysics // (Native|Public|BlueprintCallable) // @ game+0x9336680
	void SetScalarParameterForDefaultCustomPrimitiveData(struct FName ParameterName, float Value); // Function Engine.PrimitiveComponent.SetScalarParameterForDefaultCustomPrimitiveData // (Final|Native|Public|BlueprintCallable) // @ game+0x93365b8
	void SetScalarParameterForCustomPrimitiveData(struct FName ParameterName, float Value); // Function Engine.PrimitiveComponent.SetScalarParameterForCustomPrimitiveData // (Final|Native|Public|BlueprintCallable) // @ game+0x93364f0
	void SetRenderInMainPass(bool bValue); // Function Engine.PrimitiveComponent.SetRenderInMainPass // (Final|Native|Public|BlueprintCallable) // @ game+0x9336470
	void SetRenderInDepthPass(bool bValue); // Function Engine.PrimitiveComponent.SetRenderInDepthPass // (Final|Native|Public|BlueprintCallable) // @ game+0x93363d0
	void SetRenderCustomDepth(bool bValue); // Function Engine.PrimitiveComponent.SetRenderCustomDepth // (Final|Native|Public|BlueprintCallable) // @ game+0x17a5c44
	void SetReceivesDecals(bool bNewReceivesDecals); // Function Engine.PrimitiveComponent.SetReceivesDecals // (Final|Native|Public|BlueprintCallable) // @ game+0x1f530e8
	void SetPhysMaterialOverride(struct UPhysicalMaterial* NewPhysMaterial); // Function Engine.PrimitiveComponent.SetPhysMaterialOverride // (Native|Public|BlueprintCallable) // @ game+0x9335dd4
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians // (Final|Native|Public|BlueprintCallable) // @ game+0x93362c0
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees // (Final|Native|Public|BlueprintCallable) // @ game+0x93361a8
	void SetPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x933608c
	void SetPhysicsAngularVelocityInRadians(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9335f70
	void SetPhysicsAngularVelocityInDegrees(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9335e58
	void SetOwnerNoSee(bool bNewOwnerNoSee); // Function Engine.PrimitiveComponent.SetOwnerNoSee // (Final|Native|Public|BlueprintCallable) // @ game+0x9335d54
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee); // Function Engine.PrimitiveComponent.SetOnlyOwnerSee // (Final|Native|Public|BlueprintCallable) // @ game+0x9335cd4
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision); // Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision // (Native|Public|BlueprintCallable) // @ game+0x9335c50
	void SetMaterialByName(struct FName MaterialSlotName, struct UMaterialInterface* Material); // Function Engine.PrimitiveComponent.SetMaterialByName // (Native|Public|BlueprintCallable) // @ game+0x9335b88
	void SetMaterial(int32_t ElementIndex, struct UMaterialInterface* Material); // Function Engine.PrimitiveComponent.SetMaterial // (Native|Public|BlueprintCallable) // @ game+0x217ce60
	void SetMassScale(struct FName BoneName, float InMassScale); // Function Engine.PrimitiveComponent.SetMassScale // (Native|Public|BlueprintCallable) // @ game+0x9335abc
	void SetMassOverrideInKg(struct FName BoneName, float MassInKg, bool bOverrideMass); // Function Engine.PrimitiveComponent.SetMassOverrideInKg // (Native|Public|BlueprintCallable) // @ game+0x93359b8
	void SetLinearDamping(float InDamping); // Function Engine.PrimitiveComponent.SetLinearDamping // (Native|Public|BlueprintCallable) // @ game+0x9335930
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Function Engine.PrimitiveComponent.SetLightingChannels // (Final|Native|Public|BlueprintCallable) // @ game+0x9335824
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup); // Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x93357a4
	void SetHiddenInSceneCapture(bool bValue); // Function Engine.PrimitiveComponent.SetHiddenInSceneCapture // (Final|Native|Public|BlueprintCallable) // @ game+0x9335704
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents); // Function Engine.PrimitiveComponent.SetGenerateOverlapEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x2209548
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup); // Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x9335664
	void SetEnableGravity(bool bGravityEnabled); // Function Engine.PrimitiveComponent.SetEnableGravity // (Native|Public|BlueprintCallable) // @ game+0x93355e0
	void SetEmissiveLightSource(bool NewEmissiveLightSource); // Function Engine.PrimitiveComponent.SetEmissiveLightSource // (Final|Native|Public|BlueprintCallable) // @ game+0x9335540
	void SetDefaultCustomPrimitiveDataVector4(int32_t DataIndex, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector4 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9335458
	void SetDefaultCustomPrimitiveDataVector3(int32_t DataIndex, struct FVector Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector3 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9335384
	void SetDefaultCustomPrimitiveDataVector2(int32_t DataIndex, struct FVector2D Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector2 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9335280
	void SetDefaultCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataFloat // (Final|Native|Public|BlueprintCallable) // @ game+0x93351b8
	void SetCustomPrimitiveDataVector4(int32_t DataIndex, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x105af30
	void SetCustomPrimitiveDataVector3(int32_t DataIndex, struct FVector Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93350e4
	void SetCustomPrimitiveDataVector2(int32_t DataIndex, struct FVector2D Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9334fe0
	void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat // (Final|Native|Public|BlueprintCallable) // @ game+0x1fcdaa0
	void SetCustomDepthStencilWriteMask(enum class ERendererStencilMask WriteMaskBit); // Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask // (Final|Native|Public|BlueprintCallable) // @ game+0x9334f54
	void SetCustomDepthStencilValue(int32_t Value); // Function Engine.PrimitiveComponent.SetCustomDepthStencilValue // (Final|Native|Public|BlueprintCallable) // @ game+0x17a5bc4
	void SetCullDistance(float NewCullDistance); // Function Engine.PrimitiveComponent.SetCullDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x2587bc4
	void SetConstraintMode(enum class EDOFMode ConstraintMode); // Function Engine.PrimitiveComponent.SetConstraintMode // (Native|Public|BlueprintCallable) // @ game+0x9334ed0
	void SetCollisionResponseToChannel(enum class ECollisionChannel Channel, enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToChannel // (Native|Public|BlueprintCallable) // @ game+0x2515c18
	void SetCollisionResponseToAllChannels(enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels // (Native|Public|BlueprintCallable) // @ game+0x9334e4c
	void SetCollisionProfileName(struct FName InCollisionProfileName, bool bUpdateOverlaps); // Function Engine.PrimitiveComponent.SetCollisionProfileName // (Native|Public|BlueprintCallable) // @ game+0x22a7e7c
	void SetCollisionObjectType(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.SetCollisionObjectType // (Native|Public|BlueprintCallable) // @ game+0x9334dc8
	void SetCollisionEnabled(enum class ECollisionEnabled NewType); // Function Engine.PrimitiveComponent.SetCollisionEnabled // (Native|Public|BlueprintCallable) // @ game+0x2154968
	void SetCenterOfMass(struct FVector CenterOfMassOffset, struct FName BoneName); // Function Engine.PrimitiveComponent.SetCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9334cd0
	void SetCastShadow(bool NewCastShadow); // Function Engine.PrimitiveComponent.SetCastShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x151aac4
	void SetCastInsetShadow(bool bInCastInsetShadow); // Function Engine.PrimitiveComponent.SetCastInsetShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9334c50
	void SetCastHiddenShadow(bool NewCastHiddenShadow); // Function Engine.PrimitiveComponent.SetCastHiddenShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x11ab3e8
	void SetCastContactShadow(bool bInCastContactShadow); // Function Engine.PrimitiveComponent.SetCastContactShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x28207f4
	void SetBoundsScale(float NewBoundsScale); // Function Engine.PrimitiveComponent.SetBoundsScale // (Final|Native|Public|BlueprintCallable) // @ game+0x2865b44
	void SetAngularDamping(float InDamping); // Function Engine.PrimitiveComponent.SetAngularDamping // (Native|Public|BlueprintCallable) // @ game+0x9334bc8
	void SetAllUseCCD(bool InUseCCD); // Function Engine.PrimitiveComponent.SetAllUseCCD // (Native|Public|BlueprintCallable) // @ game+0x9334b44
	void SetAllPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9334a68
	void SetAllPhysicsAngularVelocityInRadians(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9334988
	void SetAllPhysicsAngularVelocityInDegrees(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9334884
	void SetAllMassScale(float InMassScale); // Function Engine.PrimitiveComponent.SetAllMassScale // (Native|Public|BlueprintCallable) // @ game+0x93347fc
	struct FVector ScaleByMomentOfInertia(struct FVector InputVector, struct FName BoneName); // Function Engine.PrimitiveComponent.ScaleByMomentOfInertia // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9334708
	void PutRigidBodyToSleep(struct FName BoneName); // Function Engine.PrimitiveComponent.PutRigidBodyToSleep // (Final|Native|Public|BlueprintCallable) // @ game+0x9334688
	bool K2_SphereTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereTraceComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9334318
	bool K2_SphereOverlapComponent(struct FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereOverlapComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9334014
	bool K2_LineTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_LineTraceComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9333cec
	bool K2_IsQueryCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9333ca8
	bool K2_IsPhysicsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9333c78
	bool K2_IsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9333c4c
	bool K2_BoxOverlapComponent(struct FVector InBoxCentre, struct FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_BoxOverlapComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9333970
	bool IsOverlappingComponent(struct UPrimitiveComponent* OtherComp); // Function Engine.PrimitiveComponent.IsOverlappingComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93338e0
	bool IsOverlappingActor(struct AActor* Other); // Function Engine.PrimitiveComponent.IsOverlappingActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93337bc
	bool IsGravityEnabled(); // Function Engine.PrimitiveComponent.IsGravityEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9333794
	bool IsAnyRigidBodyAwake(); // Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x933376c
	void IgnoreComponentWhenMoving(struct UPrimitiveComponent* Component, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving // (Final|Native|Public|BlueprintCallable) // @ game+0x933365c
	void IgnoreActorWhenMoving(struct AActor* Actor, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreActorWhenMoving // (Final|Native|Public|BlueprintCallable) // @ game+0x9333594
	struct FWalkableSlopeOverride GetWalkableSlopeOverride(); // Function Engine.PrimitiveComponent.GetWalkableSlopeOverride // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9333564
	struct FVector GetPhysicsLinearVelocityAtPoint(struct FVector Point, struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9333474
	struct FVector GetPhysicsLinearVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93333d4
	struct FVector GetPhysicsAngularVelocityInRadians(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9333334
	struct FVector GetPhysicsAngularVelocityInDegrees(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9333294
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent*>& OutOverlappingComponents); // Function Engine.PrimitiveComponent.GetOverlappingComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x93331f8
	void GetOverlappingActors(struct TArray<struct AActor*>& OverlappingActors, struct AActor* ClassFilter); // Function Engine.PrimitiveComponent.GetOverlappingActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9333108
	int32_t GetNumMaterials(); // Function Engine.PrimitiveComponent.GetNumMaterials // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x227bec8
	struct UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex); // Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9333034
	struct UMaterialInterface* GetMaterial(int32_t ElementIndex); // Function Engine.PrimitiveComponent.GetMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e84604
	float GetMassScale(struct FName BoneName); // Function Engine.PrimitiveComponent.GetMassScale // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9332fa0
	float GetMass(); // Function Engine.PrimitiveComponent.GetMass // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9332f74
	float GetLinearDamping(); // Function Engine.PrimitiveComponent.GetLinearDamping // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9332f48
	struct FVector GetInertiaTensor(struct FName BoneName); // Function Engine.PrimitiveComponent.GetInertiaTensor // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9332ea0
	bool GetGenerateOverlapEvents(); // Function Engine.PrimitiveComponent.GetGenerateOverlapEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9332e84
	int32_t GetCustomPrimitiveDataIndexForVectorParameter(struct FName ParameterName); // Function Engine.PrimitiveComponent.GetCustomPrimitiveDataIndexForVectorParameter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9332df8
	int32_t GetCustomPrimitiveDataIndexForScalarParameter(struct FName ParameterName); // Function Engine.PrimitiveComponent.GetCustomPrimitiveDataIndexForScalarParameter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9332d6c
	enum class ECollisionResponse GetCollisionResponseToChannel(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.GetCollisionResponseToChannel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x249df70
	struct FName GetCollisionProfileName(); // Function Engine.PrimitiveComponent.GetCollisionProfileName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9332d38
	enum class ECollisionChannel GetCollisionObjectType(); // Function Engine.PrimitiveComponent.GetCollisionObjectType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x74b31a8
	enum class ECollisionEnabled GetCollisionEnabled(); // Function Engine.PrimitiveComponent.GetCollisionEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9332d10
	float GetClosestPointOnCollision(struct FVector& Point, struct FVector& OutPointOnBody, struct FName BoneName); // Function Engine.PrimitiveComponent.GetClosestPointOnCollision // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9332bdc
	struct FVector GetCenterOfMass(struct FName BoneName); // Function Engine.PrimitiveComponent.GetCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9332b3c
	struct FBodyInstanceAsyncPhysicsTickHandle GetBodyInstanceAsyncPhysicsTickHandle(struct FName BoneName, bool bGetWelded, int32_t Index); // Function Engine.PrimitiveComponent.GetBodyInstanceAsyncPhysicsTickHandle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9332a28
	float GetAngularDamping(); // Function Engine.PrimitiveComponent.GetAngularDamping // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93329fc
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32_t ElementIndex, struct UMaterialInterface* SourceMaterial, struct FName OptionalName); // Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x129b694
	struct UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, struct UMaterialInterface* Parent); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial // (Native|Public|BlueprintCallable) // @ game+0x9332934
	struct UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic // (Native|Public|BlueprintCallable) // @ game+0x93328a0
	struct TArray<struct UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x933282c
	struct TArray<struct AActor*> CopyArrayOfMoveIgnoreActors(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors // (Final|Native|Public|BlueprintCallable) // @ game+0x93327b8
	void ClearMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x9332788
	void ClearMoveIgnoreActors(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreActors // (Final|Native|Public|BlueprintCallable) // @ game+0x9332754
	bool CanCharacterStepUp(struct APawn* Pawn); // Function Engine.PrimitiveComponent.CanCharacterStepUp // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93326c0
	void AddVelocityChangeImpulseAtLocation(struct FVector Impulse, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddVelocityChangeImpulseAtLocation // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9332590
	void AddTorqueInRadians(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9332480
	void AddTorqueInDegrees(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9332374
	void AddRadialImpulse(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bVelChange); // Function Engine.PrimitiveComponent.AddRadialImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93321dc
	void AddRadialForce(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bAccelChange); // Function Engine.PrimitiveComponent.AddRadialForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9332044
	void AddImpulseAtLocation(struct FVector Impulse, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddImpulseAtLocation // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9331d5c
	void AddImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9331c4c
	void AddForceAtLocationLocal(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocationLocal // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9331b1c
	void AddForceAtLocation(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocation // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93319ec
	void AddForce(struct FVector Force, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93318dc
	void AddAngularImpulseInRadians(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93317cc
	void AddAngularImpulseInDegrees(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93316c0
};

// Class Engine.FXSystemComponent
// Size: 0x530 (Inherited: 0x530)
struct UFXSystemComponent : UPrimitiveComponent {

	void SetVectorParameter(struct FName ParameterName, struct FVector Param); // Function Engine.FXSystemComponent.SetVectorParameter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11e57a4
	void SetUseAutoManageAttachment(bool bAutoManage); // Function Engine.FXSystemComponent.SetUseAutoManageAttachment // (Native|Public|BlueprintCallable) // @ game+0x20d78a8
	void SetIntParameter(struct FName ParameterName, int32_t Param); // Function Engine.FXSystemComponent.SetIntParameter // (Native|Public|BlueprintCallable) // @ game+0x11e64d4
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.FXSystemComponent.SetFloatParameter // (Native|Public|BlueprintCallable) // @ game+0x11b95a8
	void SetEmitterEnable(struct FName EmitterName, bool bNewEnableState); // Function Engine.FXSystemComponent.SetEmitterEnable // (Native|Public|BlueprintCallable) // @ game+0x931ec8c
	void SetColorParameter(struct FName ParameterName, struct FLinearColor Param); // Function Engine.FXSystemComponent.SetColorParameter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11e56d0
	void SetBoolParameter(struct FName ParameterName, bool Param); // Function Engine.FXSystemComponent.SetBoolParameter // (Native|Public|BlueprintCallable) // @ game+0x11e623c
	void SetAutoAttachmentParameters(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule); // Function Engine.FXSystemComponent.SetAutoAttachmentParameters // (Native|Public|BlueprintCallable) // @ game+0x129c44c
	void SetActorParameter(struct FName ParameterName, struct AActor* Param); // Function Engine.FXSystemComponent.SetActorParameter // (Native|Public|BlueprintCallable) // @ game+0x931e2e0
	void ReleaseToPool(); // Function Engine.FXSystemComponent.ReleaseToPool // (Native|Public|BlueprintCallable) // @ game+0x931e2c8
	struct UFXSystemAsset* GetFXSystemAsset(); // Function Engine.FXSystemComponent.GetFXSystemAsset // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x297133c
};

// Class Engine.FXSystemAsset
// Size: 0x30 (Inherited: 0x28)
struct UFXSystemAsset : UObject {
	uint32_t MaxPoolSize; // 0x28(0x04)
	uint32_t PoolPrimeSize; // 0x2c(0x04)
};

// Class Engine.DynamicSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UDynamicSubsystem : USubsystem {
};

// Class Engine.EngineSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UEngineSubsystem : UDynamicSubsystem {
};

// Class Engine.MaterialExpression
// Size: 0xb0 (Inherited: 0x28)
struct UMaterialExpression : UObject {
	int32_t MaterialExpressionEditorX; // 0x28(0x04)
	int32_t MaterialExpressionEditorY; // 0x2c(0x04)
	struct UEdGraphNode* GraphNode; // 0x30(0x08)
	struct UMaterialExpression* SubgraphExpression; // 0x38(0x08)
	char pad_40[0x10]; // 0x40(0x10)
	struct FGuid MaterialExpressionGuid; // 0x50(0x10)
	struct UMaterial* Material; // 0x60(0x08)
	struct UMaterialFunction* Function; // 0x68(0x08)
	struct FString Desc; // 0x70(0x10)
	char pad_80[0x4]; // 0x80(0x04)
	char bRealtimePreview : 1; // 0x84(0x01)
	char bNeedToUpdatePreview : 1; // 0x84(0x01)
	char pad_84_2 : 6; // 0x84(0x01)
	char pad_85[0x3]; // 0x85(0x03)
	char bIsParameterExpression : 1; // 0x88(0x01)
	char pad_88_1 : 7; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	char bCommentBubbleVisible : 1; // 0x8c(0x01)
	char bShowOutputNameOnPin : 1; // 0x8c(0x01)
	char bShowMaskColorsOnPin : 1; // 0x8c(0x01)
	char bHidePreviewWindow : 1; // 0x8c(0x01)
	char bCollapsed : 1; // 0x8c(0x01)
	char bShaderInputData : 1; // 0x8c(0x01)
	char bShowInputs : 1; // 0x8c(0x01)
	char bShowOutputs : 1; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)
	struct TArray<struct FText> MenuCategories; // 0x90(0x10)
	struct TArray<struct FExpressionOutput> Outputs; // 0xa0(0x10)
};

// Class Engine.MaterialExpressionTextureBase
// Size: 0xc0 (Inherited: 0xb0)
struct UMaterialExpressionTextureBase : UMaterialExpression {
	struct UTexture* Texture; // 0xb0(0x08)
	enum class EMaterialSamplerType SamplerType; // 0xb8(0x01)
	char IsDefaultMeshpaintTexture : 1; // 0xb9(0x01)
	char pad_B9_1 : 7; // 0xb9(0x01)
	char pad_BA[0x6]; // 0xba(0x06)
};

// Class Engine.MaterialExpressionTextureSample
// Size: 0x1b8 (Inherited: 0xc0)
struct UMaterialExpressionTextureSample : UMaterialExpressionTextureBase {
	struct FExpressionInput Coordinates; // 0xc0(0x28)
	struct FExpressionInput TextureObject; // 0xe8(0x28)
	struct FExpressionInput MipValue; // 0x110(0x28)
	struct FExpressionInput CoordinatesDX; // 0x138(0x28)
	struct FExpressionInput CoordinatesDY; // 0x160(0x28)
	struct FExpressionInput AutomaticViewMipBiasValue; // 0x188(0x28)
	enum class ETextureMipValueMode MipValueMode; // 0x1b0(0x01)
	enum class ESamplerSourceMode SamplerSource; // 0x1b1(0x01)
	char AutomaticViewMipBias : 1; // 0x1b2(0x01)
	char pad_1B2_1 : 7; // 0x1b2(0x01)
	char ConstCoordinate; // 0x1b3(0x01)
	int32_t ConstMipValue; // 0x1b4(0x04)
};

// Class Engine.MaterialExpressionTextureSampleParameter
// Size: 0x238 (Inherited: 0x1b8)
struct UMaterialExpressionTextureSampleParameter : UMaterialExpressionTextureSample {
	struct FName ParameterName; // 0x1b8(0x04)
	struct FGuid ExpressionGUID; // 0x1bc(0x10)
	struct FName Group; // 0x1cc(0x04)
	int32_t SortPriority; // 0x1d0(0x04)
	char pad_1D4[0x4]; // 0x1d4(0x04)
	struct FParameterChannelNames ChannelNames; // 0x1d8(0x60)
};

// Class Engine.MaterialExpressionTextureSampleParameter2D
// Size: 0x238 (Inherited: 0x238)
struct UMaterialExpressionTextureSampleParameter2D : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.Character
// Size: 0x610 (Inherited: 0x310)
struct ACharacter : APawn {
	struct USkeletalMeshComponent* Mesh; // 0x310(0x08)
	struct UCharacterMovementComponent* CharacterMovement; // 0x318(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x320(0x08)
	struct FBasedMovementInfo BasedMovement; // 0x328(0x48)
	struct FBasedMovementInfo ReplicatedBasedMovement; // 0x370(0x48)
	float AnimRootMotionTranslationScale; // 0x3b8(0x04)
	char pad_3BC[0x4]; // 0x3bc(0x04)
	struct FVector BaseTranslationOffset; // 0x3c0(0x18)
	char pad_3D8[0x8]; // 0x3d8(0x08)
	struct FQuat BaseRotationOffset; // 0x3e0(0x20)
	float ReplicatedServerLastTransformUpdateTimeStamp; // 0x400(0x04)
	float ReplayLastTransformUpdateTimeStamp; // 0x404(0x04)
	char ReplicatedMovementMode; // 0x408(0x01)
	bool bInBaseReplication; // 0x409(0x01)
	char pad_40A[0x2]; // 0x40a(0x02)
	float CrouchedEyeHeight; // 0x40c(0x04)
	char bIsCrouched : 1; // 0x410(0x01)
	char bProxyIsJumpForceApplied : 1; // 0x410(0x01)
	char bPressedJump : 1; // 0x410(0x01)
	char bClientUpdating : 1; // 0x410(0x01)
	char bClientWasFalling : 1; // 0x410(0x01)
	char bClientResimulateRootMotion : 1; // 0x410(0x01)
	char bClientResimulateRootMotionSources : 1; // 0x410(0x01)
	char bSimGravityDisabled : 1; // 0x410(0x01)
	char bClientCheckEncroachmentOnNetUpdate : 1; // 0x411(0x01)
	char bServerMoveIgnoreRootMotion : 1; // 0x411(0x01)
	char bWasJumping : 1; // 0x411(0x01)
	char pad_411_3 : 5; // 0x411(0x01)
	char pad_412[0x2]; // 0x412(0x02)
	float JumpKeyHoldTime; // 0x414(0x04)
	float JumpForceTimeRemaining; // 0x418(0x04)
	float ProxyJumpForceStartedTime; // 0x41c(0x04)
	float JumpMaxHoldTime; // 0x420(0x04)
	int32_t JumpMaxCount; // 0x424(0x04)
	int32_t JumpCurrentCount; // 0x428(0x04)
	int32_t JumpCurrentCountPreJump; // 0x42c(0x04)
	char pad_430[0x8]; // 0x430(0x08)
	struct FMulticastInlineDelegate OnReachedJumpApex; // 0x438(0x10)
	struct FMulticastInlineDelegate LandedDelegate; // 0x448(0x10)
	struct FMulticastInlineDelegate MovementModeChangedDelegate; // 0x458(0x10)
	struct FMulticastInlineDelegate OnCharacterMovementUpdated; // 0x468(0x10)
	struct FRootMotionSourceGroup SavedRootMotion; // 0x478(0x48)
	struct FRootMotionMovementParams ClientRootMotionParams; // 0x4c0(0x70)
	struct TArray<struct FSimulatedRootMotionReplicatedMove> RootMotionRepMoves; // 0x530(0x10)
	struct FRepRootMotionMontage RepRootMotion; // 0x540(0xd0)

	void UnCrouch(bool bClientSimulation); // Function Engine.Character.UnCrouch // (Native|Public|BlueprintCallable) // @ game+0x929f480
	void StopJumping(); // Function Engine.Character.StopJumping // (Native|Public|BlueprintCallable) // @ game+0x929f468
	void StopAnimMontage(struct UAnimMontage* AnimMontage); // Function Engine.Character.StopAnimMontage // (Native|Public|BlueprintCallable) // @ game+0x1531d50
	void ServerMovePacked(struct FCharacterServerMovePackedBits PackedBits); // Function Engine.Character.ServerMovePacked // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x929f0f8
	void ServerMoveOld(float OldTimeStamp, struct FVector_NetQuantize10 OldAccel, char OldMoveFlags); // Function Engine.Character.ServerMoveOld // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x929ef98
	void ServerMoveNoBase(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.Character.ServerMoveNoBase // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x929ecfc
	void ServerMoveDualNoBase(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.Character.ServerMoveDualNoBase // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x929e8e8
	void ServerMoveDualHybridRootMotion(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMoveDualHybridRootMotion // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x929e448
	void ServerMoveDual(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMoveDual // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x929dfa8
	void ServerMove(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMove // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x929dc74
	void RootMotionDebugClientPrintOnScreen(struct FString InString); // Function Engine.Character.RootMotionDebugClientPrintOnScreen // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x929db1c
	float PlayAnimMontage(struct UAnimMontage* AnimMontage, float InPlayRate, struct FName StartSectionName); // Function Engine.Character.PlayAnimMontage // (Native|Public|BlueprintCallable) // @ game+0x2799690
	void OnWalkingOffLedge(struct FVector& PreviousFloorImpactNormal, struct FVector& PreviousFloorContactNormal, struct FVector& PreviousLocation, float TimeDelta); // Function Engine.Character.OnWalkingOffLedge // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x24ecc64
	void OnRep_RootMotion(); // Function Engine.Character.OnRep_RootMotion // (Final|Native|Public) // @ game+0x1c4d124
	void OnRep_ReplicatedBasedMovement(); // Function Engine.Character.OnRep_ReplicatedBasedMovement // (Native|Public) // @ game+0x1043328
	void OnRep_ReplayLastTransformUpdateTimeStamp(); // Function Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp // (Final|Native|Public) // @ game+0x1cf5834
	void OnRep_IsCrouched(); // Function Engine.Character.OnRep_IsCrouched // (Native|Public) // @ game+0x16b7f94
	void OnLaunched(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Character.OnLaunched // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0xd67374
	void OnLanded(struct FHitResult& Hit); // Function Engine.Character.OnLanded // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xd67374
	void OnJumped(); // Function Engine.Character.OnJumped // (Native|Event|Public|BlueprintEvent) // @ game+0x929db04
	void LaunchCharacter(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Character.LaunchCharacter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x929d9e4
	void K2_UpdateCustomMovement(float DeltaTime); // Function Engine.Character.K2_UpdateCustomMovement // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnStartCrouch // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void K2_OnMovementModeChanged(enum class EMovementMode PrevMovementMode, enum class EMovementMode NewMovementMode, char PrevCustomMode, char NewCustomMode); // Function Engine.Character.K2_OnMovementModeChanged // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnEndCrouch // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void Jump(); // Function Engine.Character.Jump // (Native|Public|BlueprintCallable) // @ game+0x755162c
	bool IsPlayingRootMotion(); // Function Engine.Character.IsPlayingRootMotion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d9c0
	bool IsPlayingNetworkedRootMotionMontage(); // Function Engine.Character.IsPlayingNetworkedRootMotionMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d99c
	bool IsJumpProvidingForce(); // Function Engine.Character.IsJumpProvidingForce // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d974
	bool HasAnyRootMotion(); // Function Engine.Character.HasAnyRootMotion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d93c
	struct UAnimMontage* GetCurrentMontage(); // Function Engine.Character.GetCurrentMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d3a0
	struct FVector GetBaseTranslationOffset(); // Function Engine.Character.GetBaseTranslationOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d378
	struct FRotator GetBaseRotationOffsetRotator(); // Function Engine.Character.GetBaseRotationOffsetRotator // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d340
	float GetAnimRootMotionTranslationScale(); // Function Engine.Character.GetAnimRootMotionTranslationScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2a737c4
	void Crouch(bool bClientSimulation); // Function Engine.Character.Crouch // (Native|Public|BlueprintCallable) // @ game+0x929d2bc
	void ClientVeryShortAdjustPosition(float Timestamp, struct FVector NewLoc, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientVeryShortAdjustPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x929ceb4
	void ClientMoveResponsePacked(struct FCharacterMoveResponsePackedBits PackedBits); // Function Engine.Character.ClientMoveResponsePacked // (Net|Native|Event|Public|NetClient|NetValidate) // @ game+0x929cde8
	void ClientCheatWalk(); // Function Engine.Character.ClientCheatWalk // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x7642b94
	void ClientCheatGhost(); // Function Engine.Character.ClientCheatGhost // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x929cdd0
	void ClientCheatFly(); // Function Engine.Character.ClientCheatFly // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x73c6ef8
	void ClientAdjustRootMotionSourcePosition(float Timestamp, struct FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustRootMotionSourcePosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x929c974
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustRootMotionPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x929c668
	void ClientAdjustPosition(float Timestamp, struct FVector NewLoc, struct FVector NewVel, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x929c3e4
	void ClientAckGoodMove(float Timestamp); // Function Engine.Character.ClientAckGoodMove // (Net|Native|Event|Public|NetClient) // @ game+0x929c358
	bool CanJumpInternal(); // Function Engine.Character.CanJumpInternal // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x2b52078
	bool CanJump(); // Function Engine.Character.CanJump // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929c2f4
	bool CanCrouch(); // Function Engine.Character.CanCrouch // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f46990
	void CacheInitialMeshOffset(struct FVector MeshRelativeLocation, struct FRotator MeshRelativeRotation); // Function Engine.Character.CacheInitialMeshOffset // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x929c204
};

// Class Engine.MeshComponent
// Size: 0x580 (Inherited: 0x530)
struct UMeshComponent : UPrimitiveComponent {
	struct TArray<struct UMaterialInterface*> OverrideMaterials; // 0x530(0x10)
	struct TArray<struct UMaterialInterface*> NaniteOverrideMaterials; // 0x540(0x10)
	struct UMaterialInterface* OverlayMaterial; // 0x550(0x08)
	float OverlayMaterialMaxDrawDistance; // 0x558(0x04)
	char pad_55C[0x14]; // 0x55c(0x14)
	char bEnableMaterialParameterCaching : 1; // 0x570(0x01)
	char pad_570_1 : 7; // 0x570(0x01)
	char pad_571[0xf]; // 0x571(0x0f)

	void SetVectorParameterValueOnMaterials(struct FName ParameterName, struct FVector ParameterValue); // Function Engine.MeshComponent.SetVectorParameterValueOnMaterials // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0xfe7c38
	void SetScalarParameterValueOnMaterials(struct FName ParameterName, float ParameterValue); // Function Engine.MeshComponent.SetScalarParameterValueOnMaterials // (Final|Native|Public|BlueprintCallable) // @ game+0x1e41f54
	void SetOverlayMaterialMaxDrawDistance(float InMaxDrawDistance); // Function Engine.MeshComponent.SetOverlayMaterialMaxDrawDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x931aa24
	void SetOverlayMaterial(struct UMaterialInterface* NewOverlayMaterial); // Function Engine.MeshComponent.SetOverlayMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x931a9a4
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups); // Function Engine.MeshComponent.PrestreamTextures // (Native|Public|BlueprintCallable) // @ game+0x931a8a0
	bool IsMaterialSlotNameValid(struct FName MaterialSlotName); // Function Engine.MeshComponent.IsMaterialSlotNameValid // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x931a80c
	struct UMaterialInterface* GetOverlayMaterial(); // Function Engine.MeshComponent.GetOverlayMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x931a510
	struct TArray<struct FName> GetMaterialSlotNames(); // Function Engine.MeshComponent.GetMaterialSlotNames // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x931a498
	struct TArray<struct UMaterialInterface*> GetMaterials(); // Function Engine.MeshComponent.GetMaterials // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x23f6a30
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.MeshComponent.GetMaterialIndex // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2234720
};

// Class Engine.SplineComponent
// Size: 0x630 (Inherited: 0x530)
struct USplineComponent : UPrimitiveComponent {
	struct FSplineCurves SplineCurves; // 0x530(0x70)
	struct FInterpCurveVector SplineInfo; // 0x5a0(0x18)
	struct FInterpCurveQuat SplineRotInfo; // 0x5b8(0x18)
	struct FInterpCurveVector SplineScaleInfo; // 0x5d0(0x18)
	struct FInterpCurveFloat SplineReparamTable; // 0x5e8(0x18)
	bool bAllowSplineEditingPerInstance; // 0x600(0x01)
	char pad_601[0x3]; // 0x601(0x03)
	int32_t ReparamStepsPerSegment; // 0x604(0x04)
	float Duration; // 0x608(0x04)
	bool bStationaryEndpoints; // 0x60c(0x01)
	bool bSplineHasBeenEdited; // 0x60d(0x01)
	bool bModifiedByConstructionScript; // 0x60e(0x01)
	bool bInputSplinePointsToConstructionScript; // 0x60f(0x01)
	bool bDrawDebug; // 0x610(0x01)
	bool bClosedLoop; // 0x611(0x01)
	bool bLoopPositionOverride; // 0x612(0x01)
	char pad_613[0x1]; // 0x613(0x01)
	float LoopPosition; // 0x614(0x04)
	struct FVector DefaultUpVector; // 0x618(0x18)

	void UpdateSpline(); // Function Engine.SplineComponent.UpdateSpline // (Native|Public|BlueprintCallable) // @ game+0x9351580
	void SetWorldLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation); // Function Engine.SplineComponent.SetWorldLocationAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93514ac
	void SetUpVectorAtSplinePoint(int32_t PointIndex, struct FVector& InUpVector, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetUpVectorAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9351354
	void SetUnselectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetUnselectedSplineSegmentColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x758dcd4
	void SetTangentsAtSplinePoint(int32_t PointIndex, struct FVector& InArriveTangent, struct FVector& InLeaveTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentsAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93511b4
	void SetTangentColor(struct FLinearColor& TangentColor); // Function Engine.SplineComponent.SetTangentColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x758dcd4
	void SetTangentAtSplinePoint(int32_t PointIndex, struct FVector& InTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x935105c
	void SetSplineWorldPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineWorldPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9350fb4
	void SetSplinePointType(int32_t PointIndex, enum class ESplinePointType Type, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePointType // (Final|Native|Public|BlueprintCallable) // @ game+0x9350d88
	void SetSplinePoints(struct TArray<struct FVector>& Points, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9350e84
	void SetSplineLocalPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineLocalPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9350ce4
	void SetSelectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetSelectedSplineSegmentColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x758dcd4
	void SetScaleAtSplinePoint(int32_t PointIndex, struct FVector& InScaleVector, bool bUpdateSpline); // Function Engine.SplineComponent.SetScaleAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9350b0c
	void SetRotationAtSplinePoint(int32_t PointIndex, struct FRotator& InRotation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetRotationAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93509b4
	void SetLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetLocationAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x935085c
	void SetDrawDebug(bool bShow); // Function Engine.SplineComponent.SetDrawDebug // (Final|Native|Public|BlueprintCallable) // @ game+0x93507d4
	void SetDefaultUpVector(struct FVector& UpVector, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.SetDefaultUpVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9350500
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoopAtPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x93503dc
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoop // (Final|Native|Public|BlueprintCallable) // @ game+0x93502f8
	void RemoveSplinePoint(int32_t Index, bool bUpdateSpline); // Function Engine.SplineComponent.RemoveSplinePoint // (Final|Native|Public|BlueprintCallable) // @ game+0x9350234
	bool IsClosedLoop(); // Function Engine.SplineComponent.IsClosedLoop // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x935021c
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x935016c
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldRotationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9350078
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934ffc8
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldLocationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934fed4
	struct FVector GetWorldLocationAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetWorldLocationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934fe2c
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934fd7c
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldDirectionAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934fc88
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934fbd8
	struct FVector GetVectorPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934faac
	struct FVector GetVectorPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934f9d0
	struct FVector GetUpVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetUpVectorAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934f8b8
	struct FVector GetUpVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934f7d8
	struct FVector GetUpVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934f6fc
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934f620
	struct FTransform GetTransformAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934f474
	struct FTransform GetTransformAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934f320
	struct FTransform GetTransformAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934f1c8
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934f070
	struct FVector GetTangentAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetTangentAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934ef58
	struct FVector GetTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934ed2c
	struct FVector GetTangentAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934ec50
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934eb74
	enum class ESplinePointType GetSplinePointType(int32_t PointIndex); // Function Engine.SplineComponent.GetSplinePointType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934ea98
	float GetSplineLength(); // Function Engine.SplineComponent.GetSplineLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2769634
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetScaleAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934e924
	struct FVector GetScaleAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetScaleAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934e854
	struct FVector GetScaleAtSplineInputKey(float InKey); // Function Engine.SplineComponent.GetScaleAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934e7ac
	struct FVector GetScaleAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934e704
	struct FRotator GetRotationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRotationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934e5ec
	struct FRotator GetRotationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934e514
	struct FRotator GetRotationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934e424
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934e348
	float GetRollAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRollAtTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934e244
	float GetRollAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934e180
	float GetRollAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplineInputKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934e080
	float GetRollAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtDistanceAlongSpline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934dfb4
	struct FVector GetRightVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRightVectorAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934de9c
	struct FVector GetRightVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934ddbc
	struct FVector GetRightVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934dce0
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934dc04
	int32_t GetNumberOfSplineSegments(); // Function Engine.SplineComponent.GetNumberOfSplineSegments // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934dbe0
	int32_t GetNumberOfSplinePoints(); // Function Engine.SplineComponent.GetNumberOfSplinePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2440b68
	struct FVector GetLocationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetLocationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934dac8
	struct FVector GetLocationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c2cfbc
	struct FVector GetLocationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934d9ec
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934d910
	void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& Location, struct FVector& Tangent, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c2b220
	void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& LocalLocation, struct FVector& LocalTangent); // Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934d7e8
	struct FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934d710
	float GetInputKeyAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934d67c
	float GetFloatPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934d5a8
	float GetFloatPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934d4e0
	float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934d450
	float GetDistanceAlongSplineAtSplineInputKey(float InKey); // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplineInputKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934d3bc
	struct FVector GetDirectionAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetDirectionAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934d2a4
	struct FVector GetDirectionAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934d1cc
	struct FVector GetDirectionAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934d0f0
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934d014
	struct FVector GetDefaultUpVector(enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDefaultUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934ce40
	struct FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetArriveTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934cd68
	struct FVector FindUpVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934cc68
	struct FTransform FindTransformClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.FindTransformClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934caec
	struct FVector FindTangentClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindTangentClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934c9fc
	struct FVector FindScaleClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindScaleClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934c944
	struct FRotator FindRotationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRotationClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934c82c
	float FindRollClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRollClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934c750
	struct FVector FindRightVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934c650
	struct FVector FindLocationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindLocationClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934c560
	float FindInputKeyClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934c4c8
	struct FVector FindDirectionClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindDirectionClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934c3c8
	bool DivideSplineIntoPolylineRecursiveWithDistances(float StartDistanceAlongSpline, float EndDistanceAlongSpline, enum class ESplineCoordinateSpace CoordinateSpace, float MaxSquareDistanceFromSpline, struct TArray<struct FVector>& OutPoints, struct TArray<double>& OutDistancesAlongSpline); // Function Engine.SplineComponent.DivideSplineIntoPolylineRecursiveWithDistances // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x934c1a8
	bool DivideSplineIntoPolylineRecursive(float StartDistanceAlongSpline, float EndDistanceAlongSpline, enum class ESplineCoordinateSpace CoordinateSpace, float MaxSquareDistanceFromSpline, struct TArray<struct FVector>& OutPoints); // Function Engine.SplineComponent.DivideSplineIntoPolylineRecursive // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x934bffc
	bool ConvertSplineToPolyLine(enum class ESplineCoordinateSpace CoordinateSpace, float MaxSquareDistanceFromSpline, struct TArray<struct FVector>& OutPoints); // Function Engine.SplineComponent.ConvertSplineToPolyLine // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x934bed0
	bool ConvertSplineSegmentToPolyLine(int32_t SplinePointStartIndex, enum class ESplineCoordinateSpace CoordinateSpace, float MaxSquareDistanceFromSpline, struct TArray<struct FVector>& OutPoints); // Function Engine.SplineComponent.ConvertSplineSegmentToPolyLine // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x934bd68
	void ClearSplinePoints(bool bUpdateSpline); // Function Engine.SplineComponent.ClearSplinePoints // (Final|Native|Public|BlueprintCallable) // @ game+0x934bce8
	void AddSplineWorldPoint(struct FVector& Position); // Function Engine.SplineComponent.AddSplineWorldPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x934bc58
	void AddSplinePointAtIndex(struct FVector& Position, int32_t Index, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePointAtIndex // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x934bb00
	void AddSplinePoint(struct FVector& Position, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x934b9f0
	void AddSplineLocalPoint(struct FVector& Position); // Function Engine.SplineComponent.AddSplineLocalPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x934b964
	void AddPoints(struct TArray<struct FSplinePoint>& Points, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x934b7b4
	void AddPoint(struct FSplinePoint& Point, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x934b698
};

// Class Engine.PrimaryDataAsset
// Size: 0x30 (Inherited: 0x30)
struct UPrimaryDataAsset : UDataAsset {
};

// Class Engine.Info
// Size: 0x288 (Inherited: 0x288)
struct AInfo : AActor {
};

// Class Engine.OnlineBlueprintCallProxyBase
// Size: 0x30 (Inherited: 0x30)
struct UOnlineBlueprintCallProxyBase : UBlueprintAsyncActionBase {
};

// Class Engine.NetConnection
// Size: 0x32c0 (Inherited: 0x48)
struct UNetConnection : UPlayer {
	struct TArray<struct UChildConnection*> Children; // 0x48(0x10)
	struct UNetDriver* Driver; // 0x58(0x08)
	struct UPackageMap* PackageMapClass; // 0x60(0x08)
	struct UPackageMap* PackageMap; // 0x68(0x08)
	struct TArray<struct UChannel*> OpenChannels; // 0x70(0x10)
	struct TArray<struct AActor*> SentTemporaries; // 0x80(0x10)
	struct AActor* ViewTarget; // 0x90(0x08)
	struct AActor* OwningActor; // 0x98(0x08)
	int32_t MaxPacket; // 0xa0(0x04)
	char InternalAck : 1; // 0xa4(0x01)
	char pad_A4_1 : 7; // 0xa4(0x01)
	char pad_A5[0xbb]; // 0xa5(0xbb)
	struct FUniqueNetIdRepl PlayerId; // 0x160(0x30)
	char pad_190[0x48]; // 0x190(0x48)
	double LastReceiveTime; // 0x1d8(0x08)
	char pad_1E0[0x11e0]; // 0x1e0(0x11e0)
	int32_t DefaultMaxChannelSize; // 0x13c0(0x04)
	char pad_13C4[0x234]; // 0x13c4(0x234)
	struct TArray<struct UChannel*> ChannelsToTick; // 0x15f8(0x10)
	char pad_1608[0x1cb8]; // 0x1608(0x1cb8)
};

// Class Engine.NetDriver
// Size: 0x770 (Inherited: 0x28)
struct UNetDriver : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FString NetConnectionClassName; // 0x30(0x10)
	struct FString ReplicationDriverClassName; // 0x40(0x10)
	int32_t MaxDownloadSize; // 0x50(0x04)
	char bClampListenServerTickRate : 1; // 0x54(0x01)
	char pad_54_1 : 7; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	int32_t NetServerMaxTickRate; // 0x58(0x04)
	int32_t MaxNetTickRate; // 0x5c(0x04)
	int32_t MaxInternetClientRate; // 0x60(0x04)
	int32_t MaxClientRate; // 0x64(0x04)
	float ServerTravelPause; // 0x68(0x04)
	float SpawnPrioritySeconds; // 0x6c(0x04)
	float RelevantTimeout; // 0x70(0x04)
	float KeepAliveTime; // 0x74(0x04)
	float InitialConnectTimeout; // 0x78(0x04)
	float ConnectionTimeout; // 0x7c(0x04)
	float TimeoutMultiplierForUnoptimizedBuilds; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct UNetConnection* ServerConnection; // 0x88(0x08)
	struct TArray<struct UNetConnection*> ClientConnections; // 0x90(0x10)
	char pad_A0[0x60]; // 0xa0(0x60)
	int32_t RecentlyDisconnectedTrackingTime; // 0x100(0x04)
	char pad_104[0x3c]; // 0x104(0x3c)
	struct UWorld* World; // 0x140(0x08)
	struct UPackage* WorldPackage; // 0x148(0x08)
	char pad_150[0x20]; // 0x150(0x20)
	ClassPtrProperty NetConnectionClass; // 0x170(0x08)
	ClassPtrProperty ReplicationDriverClass; // 0x178(0x08)
	char pad_180[0x10]; // 0x180(0x10)
	struct FName NetDriverName; // 0x190(0x04)
	char pad_194[0x4]; // 0x194(0x04)
	struct TArray<struct FChannelDefinition> ChannelDefinitions; // 0x198(0x10)
	struct TMap<struct FName, struct FChannelDefinition> ChannelDefinitionMap; // 0x1a8(0x50)
	struct TArray<struct UChannel*> ActorChannelPool; // 0x1f8(0x10)
	char pad_208[0x19]; // 0x208(0x19)
	char pad_221_0 : 6; // 0x221(0x01)
	char bNoTimeouts : 1; // 0x221(0x01)
	char bNeverApplyNetworkEmulationSettings : 1; // 0x221(0x01)
	char pad_222[0x4de]; // 0x222(0x4de)
	struct UReplicationDriver* ReplicationDriver; // 0x700(0x08)
	char pad_708[0x68]; // 0x708(0x68)
};

// Class Engine.OnlineEngineInterface
// Size: 0x28 (Inherited: 0x28)
struct UOnlineEngineInterface : UObject {
};

// Class Engine.OnlineSession
// Size: 0x28 (Inherited: 0x28)
struct UOnlineSession : UObject {
};

// Class Engine.Controller
// Size: 0x320 (Inherited: 0x288)
struct AController : AActor {
	char pad_288[0x8]; // 0x288(0x08)
	struct APlayerState* PlayerState; // 0x290(0x08)
	char pad_298[0x8]; // 0x298(0x08)
	struct FMulticastInlineDelegate OnInstigatedAnyDamage; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnPossessedPawnChanged; // 0x2b0(0x10)
	struct FName StateName; // 0x2c0(0x04)
	char pad_2C4[0x4]; // 0x2c4(0x04)
	struct APawn* Pawn; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct ACharacter* Character; // 0x2d8(0x08)
	struct USceneComponent* TransformComponent; // 0x2e0(0x08)
	char pad_2E8[0x18]; // 0x2e8(0x18)
	struct FRotator ControlRotation; // 0x300(0x18)
	char bAttachToPawn : 1; // 0x318(0x01)
	char pad_318_1 : 7; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)

	void UnPossess(); // Function Engine.Controller.UnPossess // (Final|Native|Public|BlueprintCallable) // @ game+0x92a82bc
	void StopMovement(); // Function Engine.Controller.StopMovement // (Native|Public|BlueprintCallable) // @ game+0x211840c
	void SetInitialLocationAndRotation(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.Controller.SetInitialLocationAndRotation // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92a81d8
	void SetIgnoreMoveInput(bool bNewMoveInput); // Function Engine.Controller.SetIgnoreMoveInput // (Native|Public|BlueprintCallable) // @ game+0x92a8154
	void SetIgnoreLookInput(bool bNewLookInput); // Function Engine.Controller.SetIgnoreLookInput // (Native|Public|BlueprintCallable) // @ game+0x92a80d0
	void SetControlRotation(struct FRotator& NewRotation); // Function Engine.Controller.SetControlRotation // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92a8044
	void ResetIgnoreMoveInput(); // Function Engine.Controller.ResetIgnoreMoveInput // (Native|Public|BlueprintCallable) // @ game+0x103a914
	void ResetIgnoreLookInput(); // Function Engine.Controller.ResetIgnoreLookInput // (Native|Public|BlueprintCallable) // @ game+0x5c8a51c
	void ResetIgnoreInputFlags(); // Function Engine.Controller.ResetIgnoreInputFlags // (Native|Public|BlueprintCallable) // @ game+0x92a802c
	void ReceiveUnPossess(struct APawn* UnpossessedPawn); // Function Engine.Controller.ReceiveUnPossess // (Event|Protected|BlueprintEvent) // @ game+0xd67374
	void ReceivePossess(struct APawn* PossessedPawn); // Function Engine.Controller.ReceivePossess // (Event|Protected|BlueprintEvent) // @ game+0xd67374
	void ReceiveInstigatedAnyDamage(float Damage, struct UDamageType* DamageType, struct AActor* DamagedActor, struct AActor* DamageCauser); // Function Engine.Controller.ReceiveInstigatedAnyDamage // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0xd67374
	void Possess(struct APawn* InPawn); // Function Engine.Controller.Possess // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x92a7fac
	void OnRep_PlayerState(); // Function Engine.Controller.OnRep_PlayerState // (Native|Public) // @ game+0x26fd570
	void OnRep_Pawn(); // Function Engine.Controller.OnRep_Pawn // (Native|Public) // @ game+0x2c00e0c
	bool LineOfSightTo(struct AActor* Other, struct FVector ViewPoint, bool bAlternateChecks); // Function Engine.Controller.LineOfSightTo // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a7e8c
	struct APawn* K2_GetPawn(); // Function Engine.Controller.K2_GetPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a7e74
	bool IsPlayerController(); // Function Engine.Controller.IsPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a7da8
	bool IsMoveInputIgnored(); // Function Engine.Controller.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a7d80
	bool IsLookInputIgnored(); // Function Engine.Controller.IsLookInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a7d58
	bool IsLocalPlayerController(); // Function Engine.Controller.IsLocalPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2b9a210
	bool IsLocalController(); // Function Engine.Controller.IsLocalController // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a7d30
	struct AActor* GetViewTarget(); // Function Engine.Controller.GetViewTarget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20bb0d0
	void GetPlayerViewPoint(struct FVector& Location, struct FRotator& Rotation); // Function Engine.Controller.GetPlayerViewPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a79fc
	struct FRotator GetDesiredRotation(); // Function Engine.Controller.GetDesiredRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a7924
	struct FRotator GetControlRotation(); // Function Engine.Controller.GetControlRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a78e8
	void ClientSetRotation(struct FRotator NewRotation, bool bResetCamera); // Function Engine.Controller.ClientSetRotation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate) // @ game+0x92a77cc
	void ClientSetLocation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.Controller.ClientSetLocation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate) // @ game+0x92a7694
};

// Class Engine.StaticMeshComponent
// Size: 0x5f0 (Inherited: 0x580)
struct UStaticMeshComponent : UMeshComponent {
	int32_t ForcedLodModel; // 0x578(0x04)
	int32_t PreviousLODLevel; // 0x57c(0x04)
	int32_t MinLOD; // 0x580(0x04)
	int32_t SubDivisionStepSize; // 0x584(0x04)
	struct UStaticMesh* StaticMesh; // 0x588(0x08)
	struct FColor WireframeColorOverride; // 0x590(0x04)
	char bDisallowNanite : 1; // 0x594(0x01)
	char bEvaluateWorldPositionOffset : 1; // 0x594(0x01)
	char bEvaluateWorldPositionOffsetInRayTracing : 1; // 0x594(0x01)
	char pad_59C_3 : 1; // 0x59c(0x01)
	char bOverrideWireframeColor : 1; // 0x594(0x01)
	char bOverrideMinLOD : 1; // 0x594(0x01)
	char bOverrideNavigationExport : 1; // 0x594(0x01)
	char bForceNavigationObstacle : 1; // 0x594(0x01)
	char bDisallowMeshPaintPerInstance : 1; // 0x595(0x01)
	char bIgnoreInstanceForTextureStreaming : 1; // 0x595(0x01)
	char bOverrideLightMapRes : 1; // 0x595(0x01)
	char bCastDistanceFieldIndirectShadow : 1; // 0x595(0x01)
	char bOverrideDistanceFieldSelfShadowBias : 1; // 0x595(0x01)
	char bUseSubDivisions : 1; // 0x595(0x01)
	char bUseDefaultCollision : 1; // 0x595(0x01)
	char bSortTriangles : 1; // 0x595(0x01)
	char bReverseCulling : 1; // 0x596(0x01)
	int32_t OverriddenLightMapRes; // 0x598(0x04)
	float DistanceFieldIndirectShadowMinVisibility; // 0x59c(0x04)
	float DistanceFieldSelfShadowBias; // 0x5a0(0x04)
	float StreamingDistanceMultiplier; // 0x5a4(0x04)
	struct TArray<struct FStaticMeshComponentLODInfo> LodData; // 0x5a8(0x10)
	struct TArray<struct FStreamingTextureBuildInfo> StreamingTextureData; // 0x5b8(0x10)
	struct FLightmassPrimitiveSettings LightmassSettings; // 0x5c8(0x18)
	char pad_5E6_1 : 7; // 0x5e6(0x01)
	char pad_5E7[0x9]; // 0x5e7(0x09)

	bool SetStaticMesh(struct UStaticMesh* NewMesh); // Function Engine.StaticMeshComponent.SetStaticMesh // (Native|Public|BlueprintCallable) // @ game+0x236ced4
	void SetReverseCulling(bool ReverseCulling); // Function Engine.StaticMeshComponent.SetReverseCulling // (Final|Native|Public|BlueprintCallable) // @ game+0x9354814
	void SetForcedLodModel(int32_t NewForcedLodModel); // Function Engine.StaticMeshComponent.SetForcedLodModel // (Final|Native|Public|BlueprintCallable) // @ game+0x93543b0
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue); // Function Engine.StaticMeshComponent.SetEvaluateWorldPositionOffsetInRayTracing // (Final|Native|Public|BlueprintCallable) // @ game+0x9354330
	void SetEvaluateWorldPositionOffset(bool NewValue); // Function Engine.StaticMeshComponent.SetEvaluateWorldPositionOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x93542b0
	void SetDistanceFieldSelfShadowBias(float NewValue); // Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias // (Final|Native|Public|BlueprintCallable) // @ game+0x935405c
	void OnRep_StaticMesh(struct UStaticMesh* OldStaticMesh); // Function Engine.StaticMeshComponent.OnRep_StaticMesh // (Final|Native|Public) // @ game+0x235fe40
	void GetLocalBounds(struct FVector& min, struct FVector& max); // Function Engine.StaticMeshComponent.GetLocalBounds // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9353efc
	bool GetInitialEvaluateWorldPositionOffset(); // Function Engine.StaticMeshComponent.GetInitialEvaluateWorldPositionOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x9353ec8
};

// Class Engine.SkinnedMeshComponent
// Size: 0x840 (Inherited: 0x580)
struct USkinnedMeshComponent : UMeshComponent {
	struct USkeletalMesh* SkeletalMesh; // 0x580(0x08)
	struct TWeakObjectPtr<struct USkinnedMeshComponent> MasterPoseComponent; // 0x588(0x08)
	struct TArray<enum class ESkinCacheUsage> SkinCacheUsage; // 0x590(0x10)
	struct UMeshDeformer* MeshDeformer; // 0x5a0(0x08)
	struct UMeshDeformerInstance* MeshDeformerInstance; // 0x5a8(0x08)
	char pad_5B0[0x118]; // 0x5b0(0x118)
	struct UPhysicsAsset* PhysicsAssetOverride; // 0x6c8(0x08)
	int32_t ForcedLodModel; // 0x6d0(0x04)
	int32_t MinLodModel; // 0x6d4(0x04)
	char pad_6D8[0x8]; // 0x6d8(0x08)
	float StreamingDistanceMultiplier; // 0x6e0(0x04)
	char pad_6E4[0xc]; // 0x6e4(0x0c)
	struct TArray<struct FSkelMeshComponentLODInfo> LODInfo; // 0x6f0(0x10)
	char pad_700[0x24]; // 0x700(0x24)
	enum class EVisibilityBasedAnimTickOption VisibilityBasedAnimTickOption; // 0x724(0x01)
	char pad_725[0x1]; // 0x725(0x01)
	char pad_726_0 : 3; // 0x726(0x01)
	char bOverrideMinLOD : 1; // 0x726(0x01)
	char bUseBoundsFromMasterPoseComponent : 1; // 0x726(0x01)
	char bForceWireframe : 1; // 0x726(0x01)
	char bDisplayBones : 1; // 0x726(0x01)
	char bDisableMorphTarget : 1; // 0x726(0x01)
	char bHideSkin : 1; // 0x727(0x01)
	char bPerBoneMotionBlur : 1; // 0x727(0x01)
	char bComponentUseFixedSkelBounds : 1; // 0x727(0x01)
	char bConsiderAllBodiesForBounds : 1; // 0x727(0x01)
	char bSyncAttachParentLOD : 1; // 0x727(0x01)
	char bCanHighlightSelectedSections : 1; // 0x727(0x01)
	char bRecentlyRendered : 1; // 0x727(0x01)
	char bCastCapsuleDirectShadow : 1; // 0x727(0x01)
	char bCastCapsuleIndirectShadow : 1; // 0x728(0x01)
	char bCPUSkinning : 1; // 0x728(0x01)
	char bEnableUpdateRateOptimizations : 1; // 0x728(0x01)
	char bDisplayDebugUpdateRateOptimizations : 1; // 0x728(0x01)
	char bRenderStatic : 1; // 0x728(0x01)
	char bIgnoreMasterPoseComponentLOD : 1; // 0x728(0x01)
	char pad_728_6 : 2; // 0x728(0x01)
	char bCachedLocalBoundsUpToDate : 1; // 0x729(0x01)
	char bCachedWorldSpaceBoundsUpToDate : 1; // 0x729(0x01)
	char pad_729_2 : 2; // 0x729(0x01)
	char bForceMeshObjectUpdate : 1; // 0x729(0x01)
	char pad_729_5 : 3; // 0x729(0x01)
	char pad_72A[0x2]; // 0x72a(0x02)
	float CapsuleIndirectShadowMinVisibility; // 0x72c(0x04)
	char pad_730[0x38]; // 0x730(0x38)
	struct FBoxSphereBounds CachedWorldOrLocalSpaceBounds; // 0x768(0x38)
	struct FMatrix CachedWorldToLocalTransform; // 0x7a0(0x80)
	char pad_820[0x20]; // 0x820(0x20)

	void UnloadSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x9347030
	void UnHideBoneByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.UnHideBoneByName // (Final|Native|Public|BlueprintCallable) // @ game+0x9346fb0
	void TransformToBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformToBoneSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9346dec
	void TransformFromBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformFromBoneSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9346c28
	void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowMaterialSection // (Final|Native|Public|BlueprintCallable) // @ game+0x9346ae0
	void ShowAllMaterialSections(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowAllMaterialSections // (Final|Native|Public|BlueprintCallable) // @ game+0x9346a60
	void SetVertexOffsetUsage(int32_t LODIndex, int32_t Usage); // Function Engine.SkinnedMeshComponent.SetVertexOffsetUsage // (Final|Native|Public|BlueprintCallable) // @ game+0x680d56c
	void SetVertexColorOverride_LinearColor(int32_t LODIndex, struct TArray<struct FLinearColor>& VertexColors); // Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x934697c
	bool SetSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.SetSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x93468f0
	void SetSkinWeightOverride(int32_t LODIndex, struct TArray<struct FSkelMeshSkinWeightInfo>& SkinWeights); // Function Engine.SkinnedMeshComponent.SetSkinWeightOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9346750
	void SetSkeletalMesh(struct USkeletalMesh* NewMesh, bool bReinitPose); // Function Engine.SkinnedMeshComponent.SetSkeletalMesh // (Native|Public|BlueprintCallable) // @ game+0x242ea90
	void SetRenderStatic(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetRenderStatic // (Final|Native|Public|BlueprintCallable) // @ game+0x27576e8
	void SetPreSkinningOffsets(int32_t LODIndex, struct TArray<struct FVector> Offsets); // Function Engine.SkinnedMeshComponent.SetPreSkinningOffsets // (Final|Native|Public|BlueprintCallable) // @ game+0x9346678
	void SetPostSkinningOffsets(int32_t LODIndex, struct TArray<struct FVector> Offsets); // Function Engine.SkinnedMeshComponent.SetPostSkinningOffsets // (Final|Native|Public|BlueprintCallable) // @ game+0x9346678
	void SetPhysicsAsset(struct UPhysicsAsset* NewPhysicsAsset, bool bForceReInit); // Function Engine.SkinnedMeshComponent.SetPhysicsAsset // (Native|Public|BlueprintCallable) // @ game+0x93465ac
	void SetMinLOD(int32_t InNewMinLOD); // Function Engine.SkinnedMeshComponent.SetMinLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x934652c
	void SetMeshDeformer(struct UMeshDeformer* InMeshDeformer); // Function Engine.SkinnedMeshComponent.SetMeshDeformer // (Final|Native|Public|BlueprintCallable) // @ game+0x9346488
	void SetMasterPoseComponent(struct USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate); // Function Engine.SkinnedMeshComponent.SetMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x93463c0
	void SetForcedLOD(int32_t InNewForcedLOD); // Function Engine.SkinnedMeshComponent.SetForcedLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x9346340
	void SetCastCapsuleIndirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x93462a4
	void SetCastCapsuleDirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9346204
	void SetCapsuleIndirectShadowMinVisibility(float NewValue); // Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x23ab02c
	bool IsUsingSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93461e8
	bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.IsMaterialSectionShown // (Final|Native|Public|BlueprintCallable) // @ game+0x93460f4
	bool IsBoneHiddenByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.IsBoneHiddenByName // (Final|Native|Public|BlueprintCallable) // @ game+0x9346068
	void HideBoneByName(struct FName BoneName, enum class EPhysBodyOp PhysBodyOption); // Function Engine.SkinnedMeshComponent.HideBoneByName // (Final|Native|Public|BlueprintCallable) // @ game+0x9345d9c
	int32_t GetVertexOffsetUsage(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.GetVertexOffsetUsage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9345d30
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(struct FName BoneName, float& OutTwistAngle, float& OutSwingAngle); // Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9345c10
	struct FName GetSocketBoneName(struct FName InSocketName); // Function Engine.SkinnedMeshComponent.GetSocketBoneName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9345aec
	struct FTransform GetRefPoseTransform(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetRefPoseTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9345a1c
	struct FVector GetRefPosePosition(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetRefPosePosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934597c
	struct FName GetParentBone(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetParentBone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93458f8
	int32_t GetNumLODs(); // Function Engine.SkinnedMeshComponent.GetNumLODs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93458d8
	int32_t GetNumBones(); // Function Engine.SkinnedMeshComponent.GetNumBones // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93458b8
	int32_t GetForcedLOD(); // Function Engine.SkinnedMeshComponent.GetForcedLOD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93458a0
	struct FTransform GetDeltaTransformFromRefPose(struct FName BoneName, struct FName BaseName); // Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0xd61cb8
	struct FName GetCurrentSkinWeightProfileName(); // Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9345888
	struct FName GetBoneName(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetBoneName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9345804
	int32_t GetBoneIndex(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetBoneIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9345778
	struct FName FindClosestBone_K2(struct FVector TestLocation, struct FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset); // Function Engine.SkinnedMeshComponent.FindClosestBone_K2 // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x934551c
	void ClearVertexColorOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearVertexColorOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x9345480
	void ClearSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x934546c
	void ClearSkinWeightOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x93453d0
	bool BoneIsChildOf(struct FName BoneName, struct FName ParentBoneName); // Function Engine.SkinnedMeshComponent.BoneIsChildOf // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9345310
};

// Class Engine.SkeletalMeshComponent
// Size: 0xf20 (Inherited: 0x840)
struct USkeletalMeshComponent : USkinnedMeshComponent {
	ClassPtrProperty AnimBlueprintGeneratedClass; // 0x840(0x08)
	struct UAnimInstance* AnimClass; // 0x848(0x08)
	struct UAnimInstance* AnimScriptInstance; // 0x850(0x08)
	struct UAnimInstance* PostProcessAnimInstance; // 0x858(0x08)
	struct FSingleAnimationPlayData AnimationData; // 0x860(0x18)
	char pad_878[0x10]; // 0x878(0x10)
	struct FVector RootBoneTranslation; // 0x888(0x18)
	struct FVector LineCheckBoundsScale; // 0x8a0(0x18)
	char pad_8B8[0x30]; // 0x8b8(0x30)
	struct TArray<struct UAnimInstance*> LinkedInstances; // 0x8e8(0x10)
	struct TArray<struct FTransform> CachedBoneSpaceTransforms; // 0x8f8(0x10)
	struct TArray<struct FTransform> CachedComponentSpaceTransforms; // 0x908(0x10)
	char pad_918[0xb0]; // 0x918(0xb0)
	float GlobalAnimRateScale; // 0x9c8(0x04)
	enum class EKinematicBonesUpdateToPhysics KinematicBonesUpdateType; // 0x9cc(0x01)
	enum class EPhysicsTransformUpdateMode PhysicsTransformUpdateMode; // 0x9cd(0x01)
	char pad_9CE[0x1]; // 0x9ce(0x01)
	enum class EAnimationMode AnimationMode; // 0x9cf(0x01)
	char pad_9D0[0x1]; // 0x9d0(0x01)
	char bDisablePostProcessBlueprint : 1; // 0x9d1(0x01)
	char pad_9D1_1 : 1; // 0x9d1(0x01)
	char bUpdateOverlapsOnAnimationFinalize : 1; // 0x9d1(0x01)
	char pad_9D1_3 : 1; // 0x9d1(0x01)
	char bHasValidBodies : 1; // 0x9d1(0x01)
	char bBlendPhysics : 1; // 0x9d1(0x01)
	char bEnablePhysicsOnDedicatedServer : 1; // 0x9d1(0x01)
	char bUpdateJointsFromAnimation : 1; // 0x9d1(0x01)
	char bAllowClothActors : 1; // 0x9d2(0x01)
	char bDisableClothSimulation : 1; // 0x9d2(0x01)
	char pad_9D2_2 : 6; // 0x9d2(0x01)
	char pad_9D3[0x5]; // 0x9d3(0x05)
	char bDisableRigidBodyAnimNode : 1; // 0x9d8(0x01)
	char bAllowAnimCurveEvaluation : 1; // 0x9d8(0x01)
	char bDisableAnimCurves : 1; // 0x9d8(0x01)
	char pad_9D8_3 : 3; // 0x9d8(0x01)
	char bCollideWithEnvironment : 1; // 0x9d8(0x01)
	char bCollideWithAttachedChildren : 1; // 0x9d8(0x01)
	char bForceCollisionUpdate : 1; // 0x9d9(0x01)
	char bLocalSpaceSimulation : 1; // 0x9d9(0x01)
	char bResetAfterTeleport : 1; // 0x9d9(0x01)
	char pad_9D9_3 : 1; // 0x9d9(0x01)
	char bDeferKinematicBoneUpdate : 1; // 0x9d9(0x01)
	char bNoSkeletonUpdate : 1; // 0x9d9(0x01)
	char bPauseAnims : 1; // 0x9d9(0x01)
	char bUseRefPoseOnInitAnim : 1; // 0x9d9(0x01)
	char bEnablePerPolyCollision : 1; // 0x9da(0x01)
	char bForceRefpose : 1; // 0x9da(0x01)
	char bOnlyAllowAutonomousTickPose : 1; // 0x9da(0x01)
	char bIsAutonomousTickPose : 1; // 0x9da(0x01)
	char bOldForceRefPose : 1; // 0x9da(0x01)
	char bShowPrePhysBones : 1; // 0x9da(0x01)
	char bRequiredBonesUpToDate : 1; // 0x9da(0x01)
	char bAnimTreeInitialised : 1; // 0x9da(0x01)
	char bIncludeComponentLocationIntoBounds : 1; // 0x9db(0x01)
	char bEnableLineCheckWithBounds : 1; // 0x9db(0x01)
	char bPropagateCurvesToSlaves : 1; // 0x9db(0x01)
	char bSkipKinematicUpdateWhenInterpolating : 1; // 0x9db(0x01)
	char bSkipBoundsUpdateWhenInterpolating : 1; // 0x9db(0x01)
	char pad_9DB_5 : 2; // 0x9db(0x01)
	char bNeedsQueuedAnimEventsDispatched : 1; // 0x9db(0x01)
	char pad_9DC[0x2]; // 0x9dc(0x02)
	uint16_t CachedAnimCurveUidVersion; // 0x9de(0x02)
	float ClothBlendWeight; // 0x9e0(0x04)
	bool bWaitForParallelClothTask; // 0x9e4(0x01)
	char pad_9E5[0x3]; // 0x9e5(0x03)
	struct TArray<struct FName> DisallowedAnimCurves; // 0x9e8(0x10)
	struct UBodySetup* BodySetup; // 0x9f8(0x08)
	char pad_A00[0x4]; // 0xa00(0x04)
	float ClothMaxDistanceScale; // 0xa04(0x04)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0xa08(0x10)
	struct FMulticastInlineDelegate OnPlasticDeformation; // 0xa18(0x10)
	struct UClothingSimulationFactory* ClothingSimulationFactory; // 0xa28(0x08)
	char pad_A30[0xf8]; // 0xa30(0xf8)
	float TeleportDistanceThreshold; // 0xb28(0x04)
	float TeleportRotationThreshold; // 0xb2c(0x04)
	char pad_B30[0x8]; // 0xb30(0x08)
	uint32_t LastPoseTickFrame; // 0xb38(0x04)
	char pad_B3C[0x94]; // 0xb3c(0x94)
	struct UClothingSimulationInteractor* ClothingInteractor; // 0xbd0(0x08)
	char pad_BD8[0xc8]; // 0xbd8(0xc8)
	struct FMulticastInlineDelegate OnAnimInitialized; // 0xca0(0x10)
	char pad_CB0[0x270]; // 0xcb0(0x270)

	void UnlinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x124e7ec
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace); // Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x93445a0
	void ToggleDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable) // @ game+0x934458c
	void TermBodiesBelow(struct FName ParentBoneName); // Function Engine.SkeletalMeshComponent.TermBodiesBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x934450c
	void SuspendClothingSimulation(); // Function Engine.SkeletalMeshComponent.SuspendClothingSimulation // (Final|Native|Public|BlueprintCallable) // @ game+0x93444f4
	void Stop(); // Function Engine.SkeletalMeshComponent.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x14f6c70
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.SkeletalMeshComponent.SnapshotPose // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x934442c
	void SetUpdateClothInEditor(bool NewUpdateState); // Function Engine.SkeletalMeshComponent.SetUpdateClothInEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x64a1f14
	void SetUpdateAnimationInEditor(bool NewUpdateState); // Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x64a1f14
	void SetTeleportRotationThreshold(float Threshold); // Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x9344390
	void SetTeleportDistanceThreshold(float Threshold); // Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x9344300
	void SetPosition(float InPos, bool bFireNotifies); // Function Engine.SkeletalMeshComponent.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x14f4054
	void SetPlayRate(float Rate); // Function Engine.SkeletalMeshComponent.SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x233ff98
	void SetPhysicsBlendWeight(float PhysicsBlendWeight); // Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x934427c
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow // (Native|Public|BlueprintCallable) // @ game+0x934417c
	void SetMorphTarget(struct FName MorphTargetName, float Value, bool bRemoveZeroWeight); // Function Engine.SkeletalMeshComponent.SetMorphTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x934407c
	void SetEnablePhysicsBlending(bool bNewBlendPhysics); // Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending // (Final|Native|Public|BlueprintCallable) // @ game+0x9343ff0
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x9343ec4
	void SetEnableBodyGravity(bool bEnableGravity, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetEnableBodyGravity // (Final|Native|Public|BlueprintCallable) // @ game+0x9343de0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess); // Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable) // @ game+0x9343d60
	void SetDisableAnimCurves(bool bInDisableAnimCurves); // Function Engine.SkeletalMeshComponent.SetDisableAnimCurves // (Final|Native|Public|BlueprintCallable) // @ game+0x9343ce0
	void SetConstraintProfileForAll(struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll // (Final|Native|Public|BlueprintCallable) // @ game+0x9343bd0
	void SetConstraintProfile(struct FName JointName, struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x9343ad8
	void SetClothMaxDistanceScale(float Scale); // Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9343a54
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision // (Native|Public|BlueprintCallable) // @ game+0x934398c
	void SetAnimClass(struct UObject* NewClass); // Function Engine.SkeletalMeshComponent.SetAnimClass // (Native|Public|BlueprintCallable) // @ game+0x9343888
	void SetAnimationMode(enum class EAnimationMode InAnimationMode); // Function Engine.SkeletalMeshComponent.SetAnimationMode // (Final|Native|Public|BlueprintCallable) // @ game+0x934390c
	void SetAnimation(struct UAnimationAsset* NewAnimToPlay); // Function Engine.SkeletalMeshComponent.SetAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x26efc8c
	void SetAngularLimits(struct FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle); // Function Engine.SkeletalMeshComponent.SetAngularLimits // (Final|Native|Public|BlueprintCallable) // @ game+0x934374c
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim); // Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode // (Final|Native|Public|BlueprintCallable) // @ game+0x9343594
	void SetAllowedAnimCurvesEvaluation(struct TArray<struct FName>& List, bool bAllow); // Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9343658
	void SetAllowClothActors(bool bInAllow); // Function Engine.SkeletalMeshComponent.SetAllowClothActors // (Final|Native|Public|BlueprintCallable) // @ game+0x9343510
	void SetAllowAnimCurveEvaluation(bool bInAllow); // Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x9343490
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x9343384
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x9343278
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x9343138
	void SetAllBodiesSimulatePhysics(bool bNewSimulate); // Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics // (Final|Native|Public|BlueprintCallable) // @ game+0x93430b8
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x9342fec
	void SetAllBodiesBelowSimulatePhysics(struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9342e78
	void SetAllBodiesBelowPhysicsDisabled(struct FName& InBoneName, bool bDisabled, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsDisabled // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9342d3c
	void SetAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9342bdc
	void SetAllBodiesBelowLinearVelocity(struct FName& InBoneName, struct FVector& LinearVelocity, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowLinearVelocity // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9342ab4
	void ResumeClothingSimulation(); // Function Engine.SkeletalMeshComponent.ResumeClothingSimulation // (Final|Native|Public|BlueprintCallable) // @ game+0x9342a98
	void ResetClothTeleportMode(); // Function Engine.SkeletalMeshComponent.ResetClothTeleportMode // (Final|Native|Public|BlueprintCallable) // @ game+0x9342a80
	void ResetAnimInstanceDynamics(enum class ETeleportType InTeleportType); // Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics // (Final|Native|Public|BlueprintCallable) // @ game+0x9342a00
	void ResetAllowedAnimCurveEvaluation(); // Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x93429b8
	void ResetAllBodiesSimulatePhysics(); // Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics // (Final|Native|Public|BlueprintCallable) // @ game+0x93429a4
	void PlayAnimation(struct UAnimationAsset* NewAnimToPlay, bool bLooping); // Function Engine.SkeletalMeshComponent.PlayAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x242ca64
	void Play(bool bLooping); // Function Engine.SkeletalMeshComponent.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x9342924
	void OverrideAnimationData(struct UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate); // Function Engine.SkeletalMeshComponent.OverrideAnimationData // (Final|Native|Public|BlueprintCallable) // @ game+0x934278c
	void LinkAnimGraphByTag(struct FName InTag, struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x93426c8
	void LinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x124e86c
	bool K2_GetClosestPointOnPhysicsAsset(struct FVector& WorldPosition, struct FVector& ClosestWorldPosition, struct FVector& Normal, struct FName& BoneName, float& Distance); // Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93424e4
	bool IsPlaying(); // Function Engine.SkeletalMeshComponent.IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93424c0
	bool IsClothingSimulationSuspended(); // Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93424a4
	bool IsBodyGravityEnabled(struct FName BoneName); // Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x9342404
	bool HasValidAnimationInstance(); // Function Engine.SkeletalMeshComponent.HasValidAnimationInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93423e4
	bool GetTransformAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, struct FTransform& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetTransformAttribute_Ref // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93421b8
	bool GetTransformAttribute(struct FName& BoneName, struct FName& AttributeName, struct FTransform DefaultValue, struct FTransform& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetTransformAttribute // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9341f08
	float GetTeleportRotationThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9341ef0
	float GetTeleportDistanceThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9341ef0
	bool GetStringAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, struct FString& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetStringAttribute_Ref // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9341c78
	bool GetStringAttribute(struct FName& BoneName, struct FName& AttributeName, struct FString DefaultValue, struct FString& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetStringAttribute // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x93418f0
	struct FVector GetSkeletalCenterOfMass(); // Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93418b8
	struct UAnimInstance* GetPostProcessInstance(); // Function Engine.SkeletalMeshComponent.GetPostProcessInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x267a9fc
	float GetPosition(); // Function Engine.SkeletalMeshComponent.GetPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9341890
	float GetPlayRate(); // Function Engine.SkeletalMeshComponent.GetPlayRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9341868
	float GetMorphTarget(struct FName MorphTargetName); // Function Engine.SkeletalMeshComponent.GetMorphTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2776c10
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93417cc
	struct UAnimInstance* GetLinkedAnimLayerInstanceByClass(struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934173c
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9341590
	struct UAnimInstance* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93414f4
	bool GetIntegerAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, int32_t& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetIntegerAttribute_Ref // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9341370
	bool GetIntegerAttribute(struct FName& BoneName, struct FName& AttributeName, int32_t DefaultValue, int32_t& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetIntegerAttribute // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x93411b0
	bool GetFloatAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, float& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetFloatAttribute_Ref // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9341024
	bool GetFloatAttribute(struct FName& BoneName, struct FName& AttributeName, float DefaultValue, float& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetFloatAttribute // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9340e60
	bool GetDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9340e44
	bool GetDisableAnimCurves(); // Function Engine.SkeletalMeshComponent.GetDisableAnimCurves // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9340e24
	void GetCurrentJointAngles(struct FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle); // Function Engine.SkeletalMeshComponent.GetCurrentJointAngles // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9340cb8
	void GetConstraintsFromBody(struct FName BodyName, bool bParentConstraints, bool bChildConstraints, bool bIncludesTerminated, struct TArray<struct FConstraintInstanceAccessor>& OutConstraints); // Function Engine.SkeletalMeshComponent.GetConstraintsFromBody // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9340a30
	void GetConstraints(bool bIncludesTerminated, struct TArray<struct FConstraintInstanceAccessor>& OutConstraints); // Function Engine.SkeletalMeshComponent.GetConstraints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9340880
	struct FConstraintInstanceAccessor GetConstraintByName(struct FName ConstraintName, bool bIncludesTerminated); // Function Engine.SkeletalMeshComponent.GetConstraintByName // (Final|Native|Public|BlueprintCallable) // @ game+0x93407ac
	float GetClothMaxDistanceScale(); // Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934077c
	struct UClothingSimulationInteractor* GetClothingSimulationInteractor(); // Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9340794
	float GetBoneMass(struct FName BoneName, bool bScaleMass); // Function Engine.SkeletalMeshComponent.GetBoneMass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93406b8
	struct FVector GetBoneLinearVelocity(struct FName& InBoneName); // Function Engine.SkeletalMeshComponent.GetBoneLinearVelocity // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93405d0
	struct UAnimInstance* GetAnimInstance(); // Function Engine.SkeletalMeshComponent.GetAnimInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e73504
	struct UObject* GetAnimClass(); // Function Engine.SkeletalMeshComponent.GetAnimClass // (Final|Native|Public) // @ game+0x9340550
	enum class EAnimationMode GetAnimationMode(); // Function Engine.SkeletalMeshComponent.GetAnimationMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93405b8
	bool GetAllowRigidBodyAnimNode(); // Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9340518
	bool GetAllowedAnimCurveEvaluate(); // Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9340534
	bool GetAllowClothActors(); // Function Engine.SkeletalMeshComponent.GetAllowClothActors // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93404fc
	void ForceClothNextUpdateTeleportAndReset(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset // (Final|Native|Public|BlueprintCallable) // @ game+0x93404e4
	void ForceClothNextUpdateTeleport(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport // (Final|Native|Public|BlueprintCallable) // @ game+0x93404cc
	struct FName FindConstraintBoneName(int32_t ConstraintIndex); // Function Engine.SkeletalMeshComponent.FindConstraintBoneName // (Final|Native|Public|BlueprintCallable) // @ game+0x9340424
	void ClearMorphTargets(); // Function Engine.SkeletalMeshComponent.ClearMorphTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x93403f0
	void BreakConstraint(struct FVector Impulse, struct FVector HitLocation, struct FName InBoneName); // Function Engine.SkeletalMeshComponent.BreakConstraint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93402c4
	void BindClothToMasterPoseComponent(); // Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x93402b0
	void AllowAnimCurveEvaluation(struct FName NameOfCurve, bool bAllow); // Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x93401ec
	void AddImpulseToAllBodiesBelow(struct FVector Impulse, struct FName BoneName, bool bVelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x934009c
	void AddForceToAllBodiesBelow(struct FVector Force, struct FName BoneName, bool bAccelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x933ff4c
	void AccumulateAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x933fe30
};

// Class Engine.AnimInstance
// Size: 0x350 (Inherited: 0x28)
struct UAnimInstance : UObject {
	struct USkeleton* CurrentSkeleton; // 0x28(0x08)
	enum class ERootMotionMode RootMotionMode; // 0x30(0x01)
	char bUseMultiThreadedAnimationUpdate : 1; // 0x31(0x01)
	char bUsingCopyPoseFromMesh : 1; // 0x31(0x01)
	char pad_31_2 : 2; // 0x31(0x01)
	char bReceiveNotifiesFromLinkedInstances : 1; // 0x31(0x01)
	char bPropagateNotifiesToLinkedInstances : 1; // 0x31(0x01)
	char bUseMainInstanceMontageEvaluationData : 1; // 0x31(0x01)
	char bQueueMontageEvents : 1; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)
	struct FMulticastInlineDelegate OnMontageBlendingOut; // 0x38(0x10)
	struct FMulticastInlineDelegate OnMontageStarted; // 0x48(0x10)
	struct FMulticastInlineDelegate OnMontageEnded; // 0x58(0x10)
	struct FMulticastInlineDelegate OnAllMontageInstancesEnded; // 0x68(0x10)
	char pad_78[0xd8]; // 0x78(0xd8)
	struct FAnimNotifyQueue NotifyQueue; // 0x150(0x70)
	struct TArray<struct FAnimNotifyEvent> ActiveAnimNotifyState; // 0x1c0(0x10)
	struct TArray<struct FAnimNotifyEventReference> ActiveAnimNotifyEventReference; // 0x1d0(0x10)
	char pad_1E0[0x170]; // 0x1e0(0x170)

	bool WasAnimNotifyTriggeredInStateMachine(int32_t MachineIndex, struct UAnimNotify* AnimNotifyType); // Function Engine.AnimInstance.WasAnimNotifyTriggeredInStateMachine // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x92847ac
	bool WasAnimNotifyTriggeredInSourceState(int32_t MachineIndex, int32_t StateIndex, struct UAnimNotify* AnimNotifyType); // Function Engine.AnimInstance.WasAnimNotifyTriggeredInSourceState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x928467c
	bool WasAnimNotifyTriggeredInAnyState(struct UAnimNotify* AnimNotifyType); // Function Engine.AnimInstance.WasAnimNotifyTriggeredInAnyState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x92845d4
	bool WasAnimNotifyStateActiveInStateMachine(int32_t MachineIndex, struct UAnimNotifyState* AnimNotifyStateType); // Function Engine.AnimInstance.WasAnimNotifyStateActiveInStateMachine // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x92844ec
	bool WasAnimNotifyStateActiveInSourceState(int32_t MachineIndex, int32_t StateIndex, struct UAnimNotifyState* AnimNotifyStateType); // Function Engine.AnimInstance.WasAnimNotifyStateActiveInSourceState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x92843bc
	bool WasAnimNotifyStateActiveInAnyState(struct UAnimNotifyState* AnimNotifyStateType); // Function Engine.AnimInstance.WasAnimNotifyStateActiveInAnyState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9284314
	bool WasAnimNotifyNameTriggeredInStateMachine(int32_t MachineIndex, struct FName NotifyName); // Function Engine.AnimInstance.WasAnimNotifyNameTriggeredInStateMachine // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9284230
	bool WasAnimNotifyNameTriggeredInSourceState(int32_t MachineIndex, int32_t StateIndex, struct FName NotifyName); // Function Engine.AnimInstance.WasAnimNotifyNameTriggeredInSourceState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9284104
	bool WasAnimNotifyNameTriggeredInAnyState(struct FName NotifyName); // Function Engine.AnimInstance.WasAnimNotifyNameTriggeredInAnyState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x928405c
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic); // Function Engine.AnimInstance.UnlockAIResources // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x9283fa4
	void UnlinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.AnimInstance.UnlinkAnimClassLayers // (Native|Public|BlueprintCallable) // @ game+0x5c3e9f0
	struct APawn* TryGetPawnOwner(); // Function Engine.AnimInstance.TryGetPawnOwner // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x248843c
	void StopSlotAnimation(float InBlendOutTime, struct FName SlotNodeName); // Function Engine.AnimInstance.StopSlotAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x9283edc
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.AnimInstance.SnapshotPose // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9283e10
	void SetUseMainInstanceMontageEvaluationData(bool bSet); // Function Engine.AnimInstance.SetUseMainInstanceMontageEvaluationData // (Final|Native|Public|BlueprintCallable) // @ game+0x9283d8c
	void SetRootMotionMode(enum class ERootMotionMode Value); // Function Engine.AnimInstance.SetRootMotionMode // (Final|Native|Public|BlueprintCallable) // @ game+0x927b470
	void SetReceiveNotifiesFromLinkedInstances(bool bSet); // Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances // (Final|Native|Public|BlueprintCallable) // @ game+0x9283d08
	void SetPropagateNotifiesToLinkedInstances(bool bSet); // Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances // (Final|Native|Public|BlueprintCallable) // @ game+0x9283c84
	void SetMorphTarget(struct FName MorphTargetName, float Value); // Function Engine.AnimInstance.SetMorphTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x9283bbc
	void SavePoseSnapshot(struct FName SnapshotName); // Function Engine.AnimInstance.SavePoseSnapshot // (Native|Public|BlueprintCallable) // @ game+0x9283b38
	void ResetDynamics(enum class ETeleportType InTeleportType); // Function Engine.AnimInstance.ResetDynamics // (Final|Native|Public|BlueprintCallable) // @ game+0x9283aac
	bool RequestTransitionEvent(struct FName EventName, double RequestTimeout, enum class ETransitionRequestQueueMode QueueMode, enum class ETransitionRequestOverwriteMode OverwriteMode); // Function Engine.AnimInstance.RequestTransitionEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x928396c
	void RequestSlotGroupInertialization(struct FName InSlotGroupName, float Duration, struct UBlendProfile* BlendProfile); // Function Engine.AnimInstance.RequestSlotGroupInertialization // (Final|Native|Public|BlueprintCallable) // @ game+0x9283870
	void RemovePoseSnapshot(struct FName SnapshotName); // Function Engine.AnimInstance.RemovePoseSnapshot // (Final|Native|Public|BlueprintCallable) // @ game+0x92837f0
	bool QueryTransitionEvent(int32_t MachineIndex, int32_t TransitionIndex, struct FName EventName); // Function Engine.AnimInstance.QueryTransitionEvent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x92836f8
	bool QueryAndMarkTransitionEvent(int32_t MachineIndex, int32_t TransitionIndex, struct FName EventName); // Function Engine.AnimInstance.QueryAndMarkTransitionEvent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9283600
	struct UAnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendSettings(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, struct FMontageBlendSettings& BlendInSettings, struct FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage_WithBlendSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x928330c
	struct UAnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendArgs(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, struct FAlphaBlendArgs& BlendIn, struct FAlphaBlendArgs& BlendOut, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage_WithBlendArgs // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9283078
	struct UAnimMontage* PlaySlotAnimationAsDynamicMontage(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x9282e24
	void MontageSync_StopFollowing(struct UAnimMontage* MontageFollower); // Function Engine.AnimInstance.MontageSync_StopFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x9280ffc
	void MontageSync_Follow(struct UAnimMontage* MontageFollower, struct UAnimInstance* OtherAnimInstance, struct UAnimMontage* MontageLeader); // Function Engine.AnimInstance.MontageSync_Follow // (Final|Native|Public|BlueprintCallable) // @ game+0x9280d70
	void Montage_StopWithBlendSettings(struct FMontageBlendSettings& BlendOutSettings, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_StopWithBlendSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9282d30
	void Montage_StopWithBlendOut(struct FAlphaBlendArgs& BlendOut, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_StopWithBlendOut // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9282c2c
	void Montage_StopGroupByName(float InBlendOutTime, struct FName GroupName); // Function Engine.AnimInstance.Montage_StopGroupByName // (Final|Native|Public|BlueprintCallable) // @ game+0x9282b64
	void Montage_Stop(float InBlendOutTime, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x2896000
	void Montage_SetPosition(struct UAnimMontage* Montage, float NewPosition); // Function Engine.AnimInstance.Montage_SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x9282a9c
	void Montage_SetPlayRate(struct UAnimMontage* Montage, float NewPlayRate); // Function Engine.AnimInstance.Montage_SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x92829d4
	void Montage_SetNextSection(struct FName SectionNameToChange, struct FName NextSection, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_SetNextSection // (Final|Native|Public|BlueprintCallable) // @ game+0x92828dc
	void Montage_Resume(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Resume // (Final|Native|Public|BlueprintCallable) // @ game+0x9282760
	float Montage_PlayWithBlendSettings(struct UAnimMontage* MontageToPlay, struct FMontageBlendSettings& BlendInSettings, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Function Engine.AnimInstance.Montage_PlayWithBlendSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x928201c
	float Montage_PlayWithBlendIn(struct UAnimMontage* MontageToPlay, struct FAlphaBlendArgs& BlendIn, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Function Engine.AnimInstance.Montage_PlayWithBlendIn // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92818b8
	float Montage_Play(struct UAnimMontage* MontageToPlay, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Function Engine.AnimInstance.Montage_Play // (Final|Native|Public|BlueprintCallable) // @ game+0x281d870
	void Montage_Pause(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Pause // (Final|Native|Public|BlueprintCallable) // @ game+0x9281754
	void Montage_JumpToSectionsEnd(struct FName SectionName, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_JumpToSectionsEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x928156c
	void Montage_JumpToSection(struct FName SectionName, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_JumpToSection // (Final|Native|Public|BlueprintCallable) // @ game+0x92814a8
	bool Montage_IsPlaying(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x272af40
	bool Montage_IsActive(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1531c58
	float Montage_GetPosition(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9281418
	float Montage_GetPlayRate(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetPlayRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9281388
	bool Montage_GetIsStopped(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetIsStopped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9281244
	struct FName Montage_GetCurrentSection(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetCurrentSection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92811bc
	float Montage_GetBlendTime(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetBlendTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x928112c
	void LockAIResources(bool bLockMovement, bool LockAILogic); // Function Engine.AnimInstance.LockAIResources // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x9280cb8
	void LinkAnimGraphByTag(struct FName InTag, struct UAnimInstance* InClass); // Function Engine.AnimInstance.LinkAnimGraphByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x9280bf4
	void LinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.AnimInstance.LinkAnimClassLayers // (Native|Public|BlueprintCallable) // @ game+0x8dd91d4
	bool IsUsingMainInstanceMontageEvaluationData(); // Function Engine.AnimInstance.IsUsingMainInstanceMontageEvaluationData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9280b48
	bool IsSyncGroupBetweenMarkers(struct FName InSyncGroupName, struct FName PreviousMarker, struct FName NextMarker, bool bRespectMarkerOrder); // Function Engine.AnimInstance.IsSyncGroupBetweenMarkers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9280a0c
	bool IsPlayingSlotAnimation(struct UAnimSequenceBase* Asset, struct FName SlotNodeName); // Function Engine.AnimInstance.IsPlayingSlotAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9280944
	bool IsAnyMontagePlaying(); // Function Engine.AnimInstance.IsAnyMontagePlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9280928
	bool HasMarkerBeenHitThisFrame(struct FName SyncGroup, struct FName MarkerName); // Function Engine.AnimInstance.HasMarkerBeenHitThisFrame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9280868
	bool GetTimeToClosestMarker(struct FName SyncGroup, struct FName MarkerName, float& OutMarkerTime); // Function Engine.AnimInstance.GetTimeToClosestMarker // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9280760
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(struct FName InSyncGroupName); // Function Engine.AnimInstance.GetSyncGroupPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92806c0
	float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x92805fc
	float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9280538
	float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9280474
	float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x92803b0
	float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimLength // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x92802ec
	bool GetReceiveNotifiesFromLinkedInstances(); // Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92802d0
	bool GetPropagateNotifiesToLinkedInstances(); // Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92802b4
	struct USkeletalMeshComponent* GetOwningComponent(); // Function Engine.AnimInstance.GetOwningComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9280288
	struct AActor* GetOwningActor(); // Function Engine.AnimInstance.GetOwningActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2b5f274
	void GetLinkedAnimLayerInstancesByGroup(struct FName InGroup, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.AnimInstance.GetLinkedAnimLayerInstancesByGroup // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92800c0
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(struct FName InGroup, struct UAnimInstance* InClass); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroupAndClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927fffc
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927ff70
	struct UAnimInstance* GetLinkedAnimLayerInstanceByClass(struct UAnimInstance* InClass); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x267e71c
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x927fdd0
	struct UAnimInstance* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927fd44
	float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x927fc80
	float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x927fbbc
	float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x927faf8
	float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetInstanceStateWeight // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x927fa34
	float GetInstanceMachineWeight(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceMachineWeight // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x927f9a4
	float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x927f8b0
	float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x927f820
	float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x927f790
	float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x927f700
	float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x927f670
	float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerLength // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x927f5e0
	float GetDeltaSeconds(); // Function Engine.AnimInstance.GetDeltaSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927f538
	float GetCurveValue(struct FName CurveName); // Function Engine.AnimInstance.GetCurveValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e117c4
	struct FName GetCurrentStateName(int32_t MachineIndex); // Function Engine.AnimInstance.GetCurrentStateName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x927f4b4
	struct UAnimMontage* GetCurrentActiveMontage(); // Function Engine.AnimInstance.GetCurrentActiveMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927f490
	void GetAllCurveNames(struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetAllCurveNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x927ef6c
	void GetActiveCurveNames(enum class EAnimCurveType CurveType, struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetActiveCurveNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x927ee88
	void ClearTransitionEvents(struct FName EventName); // Function Engine.AnimInstance.ClearTransitionEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x927ee08
	void ClearMorphTargets(); // Function Engine.AnimInstance.ClearMorphTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x927edf4
	void ClearAllTransitionEvents(); // Function Engine.AnimInstance.ClearAllTransitionEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x927ed50
	float CalculateDirection(struct FVector& Velocity, struct FRotator& BaseRotation); // Function Engine.AnimInstance.CalculateDirection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x927ec70
	void BlueprintUpdateAnimation(float DeltaTimeX); // Function Engine.AnimInstance.BlueprintUpdateAnimation // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime); // Function Engine.AnimInstance.BlueprintThreadSafeUpdateAnimation // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void BlueprintPostEvaluateAnimation(); // Function Engine.AnimInstance.BlueprintPostEvaluateAnimation // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void BlueprintLinkedAnimationLayersInitialized(); // Function Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void BlueprintInitializeAnimation(); // Function Engine.AnimInstance.BlueprintInitializeAnimation // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void BlueprintBeginPlay(); // Function Engine.AnimInstance.BlueprintBeginPlay // (Event|Public|BlueprintEvent) // @ game+0xd67374
};

// Class Engine.SoundEffectPreset
// Size: 0x68 (Inherited: 0x28)
struct USoundEffectPreset : UObject {
	char pad_28[0x40]; // 0x28(0x40)
};

// Class Engine.SoundEffectSourcePreset
// Size: 0x68 (Inherited: 0x68)
struct USoundEffectSourcePreset : USoundEffectPreset {
};

// Class Engine.SoundEffectSubmixPreset
// Size: 0x68 (Inherited: 0x68)
struct USoundEffectSubmixPreset : USoundEffectPreset {
};

// Class Engine.ShapeComponent
// Size: 0x550 (Inherited: 0x530)
struct UShapeComponent : UPrimitiveComponent {
	struct UBodySetup* ShapeBodySetup; // 0x530(0x08)
	struct FColor ShapeColor; // 0x538(0x04)
	char bDrawOnlyIfSelected : 1; // 0x53c(0x01)
	char bShouldCollideWhenPlacing : 1; // 0x53c(0x01)
	char bDynamicObstacle : 1; // 0x53c(0x01)
	char pad_53C_3 : 5; // 0x53c(0x01)
	char pad_53D[0x3]; // 0x53d(0x03)
	struct UNavAreaBase* AreaClassOverride; // 0x540(0x08)
	char bUseSystemDefaultObstacleAreaClass : 1; // 0x548(0x01)
	char pad_548_1 : 7; // 0x548(0x01)
	char pad_549[0x7]; // 0x549(0x07)
};

// Class Engine.BoxComponent
// Size: 0x570 (Inherited: 0x550)
struct UBoxComponent : UShapeComponent {
	struct FVector BoxExtent; // 0x550(0x18)
	float LineThickness; // 0x568(0x04)
	char pad_56C[0x4]; // 0x56c(0x04)

	void SetLineThickness(float Thickness); // Function Engine.BoxComponent.SetLineThickness // (Final|Native|Public|BlueprintCallable) // @ game+0x9297190
	void SetBoxExtent(struct FVector InBoxExtent, bool bUpdateOverlaps); // Function Engine.BoxComponent.SetBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9297034
	struct FVector GetUnscaledBoxExtent(); // Function Engine.BoxComponent.GetUnscaledBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9296ef4
	struct FVector GetScaledBoxExtent(); // Function Engine.BoxComponent.GetScaledBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9296e94
};

// Class Engine.Brush
// Size: 0x2c0 (Inherited: 0x288)
struct ABrush : AActor {
	enum class EBrushType BrushType; // 0x288(0x01)
	char pad_289[0x3]; // 0x289(0x03)
	struct FColor BrushColor; // 0x28c(0x04)
	int32_t PolyFlags; // 0x290(0x04)
	char bColored : 1; // 0x294(0x01)
	char bSolidWhenSelected : 1; // 0x294(0x01)
	char bPlaceableFromClassBrowser : 1; // 0x294(0x01)
	char bNotForClientOrServer : 1; // 0x294(0x01)
	char pad_294_4 : 4; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	struct UModel* Brush; // 0x298(0x08)
	struct UBrushComponent* BrushComponent; // 0x2a0(0x08)
	char bInManipulation : 1; // 0x2a8(0x01)
	char pad_2A8_1 : 7; // 0x2a8(0x01)
	char pad_2A9[0x7]; // 0x2a9(0x07)
	struct TArray<struct FGeomSelection> SavedSelections; // 0x2b0(0x10)
};

// Class Engine.Volume
// Size: 0x2c0 (Inherited: 0x2c0)
struct AVolume : ABrush {
};

// Class Engine.PhysicsVolume
// Size: 0x2d0 (Inherited: 0x2c0)
struct APhysicsVolume : AVolume {
	float TerminalVelocity; // 0x2c0(0x04)
	int32_t Priority; // 0x2c4(0x04)
	float FluidFriction; // 0x2c8(0x04)
	char bWaterVolume : 1; // 0x2cc(0x01)
	char bPhysicsOnContact : 1; // 0x2cc(0x01)
	char pad_2CC_2 : 6; // 0x2cc(0x01)
	char pad_2CD[0x3]; // 0x2cd(0x03)
};

// Class Engine.HLODBuilder
// Size: 0x28 (Inherited: 0x28)
struct UHLODBuilder : UObject {
};

// Class Engine.SplineMetadata
// Size: 0x28 (Inherited: 0x28)
struct USplineMetadata : UObject {
};

// Class Engine.TickableWorldSubsystem
// Size: 0x40 (Inherited: 0x30)
struct UTickableWorldSubsystem : UWorldSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
};

// Class Engine.CameraModifier
// Size: 0x48 (Inherited: 0x28)
struct UCameraModifier : UObject {
	char bDebug : 1; // 0x28(0x01)
	char bExclusive : 1; // 0x28(0x01)
	char pad_28_2 : 6; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	char Priority; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
	struct APlayerCameraManager* CameraOwner; // 0x30(0x08)
	float AlphaInTime; // 0x38(0x04)
	float AlphaOutTime; // 0x3c(0x04)
	float Alpha; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)

	void OnCameraOwnerDestroyed(struct AActor* InOwner); // Function Engine.CameraModifier.OnCameraOwnerDestroyed // (Final|Native|Protected) // @ game+0x2561740
	bool IsDisabled(); // Function Engine.CameraModifier.IsDisabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x74b2ee4
	struct AActor* GetViewTarget(); // Function Engine.CameraModifier.GetViewTarget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9147de8
	void EnableModifier(); // Function Engine.CameraModifier.EnableModifier // (Native|Public|BlueprintCallable) // @ game+0x5c90d54
	void DisableModifier(bool bImmediate); // Function Engine.CameraModifier.DisableModifier // (Native|Public|BlueprintCallable) // @ game+0x9297a70
	void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, struct FPostProcessSettings& PostProcessSettings); // Function Engine.CameraModifier.BlueprintModifyPostProcess // (BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent) // @ game+0xd67374
	void BlueprintModifyCamera(float DeltaTime, struct FVector ViewLocation, struct FRotator ViewRotation, float FOV, struct FVector& NewViewLocation, struct FRotator& NewViewRotation, float& NewFOV); // Function Engine.CameraModifier.BlueprintModifyCamera // (BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xd67374
};

// Class Engine.CameraShakeBase
// Size: 0xf0 (Inherited: 0x28)
struct UCameraShakeBase : UObject {
	bool bSingleInstance; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float ShakeScale; // 0x2c(0x04)
	struct UCameraShakePattern* RootShakePattern; // 0x30(0x08)
	struct APlayerCameraManager* CameraManager; // 0x38(0x08)
	char pad_40[0xb0]; // 0x40(0xb0)

	void SetRootShakePattern(struct UCameraShakePattern* InPattern); // Function Engine.CameraShakeBase.SetRootShakePattern // (Final|Native|Public|BlueprintCallable) // @ game+0x929a5c0
	struct UCameraShakePattern* GetRootShakePattern(); // Function Engine.CameraShakeBase.GetRootShakePattern // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x765951c
};

// Class Engine.CameraShakePattern
// Size: 0x28 (Inherited: 0x28)
struct UCameraShakePattern : UObject {
};

// Class Engine.PlayerController
// Size: 0x7f8 (Inherited: 0x320)
struct APlayerController : AController {
	struct UPlayer* Player; // 0x320(0x08)
	struct APawn* AcknowledgedPawn; // 0x328(0x08)
	struct AHUD* MyHUD; // 0x330(0x08)
	struct APlayerCameraManager* PlayerCameraManager; // 0x338(0x08)
	struct APlayerCameraManager* PlayerCameraManagerClass; // 0x340(0x08)
	bool bAutoManageActiveCameraTarget; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)
	struct FRotator TargetViewRotation; // 0x350(0x18)
	char pad_368[0x18]; // 0x368(0x18)
	float SmoothTargetViewRotationSpeed; // 0x380(0x04)
	char pad_384[0x4]; // 0x384(0x04)
	struct TArray<struct AActor*> HiddenActors; // 0x388(0x10)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> HiddenPrimitiveComponents; // 0x398(0x10)
	char pad_3A8[0x4]; // 0x3a8(0x04)
	float LastSpectatorStateSynchTime; // 0x3ac(0x04)
	struct FVector LastSpectatorSyncLocation; // 0x3b0(0x18)
	struct FRotator LastSpectatorSyncRotation; // 0x3c8(0x18)
	int32_t ClientCap; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct UCheatManager* CheatManager; // 0x3e8(0x08)
	struct UCheatManager* CheatClass; // 0x3f0(0x08)
	struct UPlayerInput* PlayerInput; // 0x3f8(0x08)
	struct TArray<struct FActiveForceFeedbackEffect> ActiveForceFeedbackEffects; // 0x400(0x10)
	struct UAsyncPhysicsData* AsyncPhysicsDataClass; // 0x410(0x08)
	struct UAsyncPhysicsInputComponent* AsyncPhysicsDataComponent; // 0x418(0x08)
	char pad_420[0x80]; // 0x420(0x80)
	char pad_4A0_0 : 4; // 0x4a0(0x01)
	char bPlayerIsWaiting : 1; // 0x4a0(0x01)
	char pad_4A0_5 : 3; // 0x4a0(0x01)
	char pad_4A1[0x3]; // 0x4a1(0x03)
	char NetPlayerIndex; // 0x4a4(0x01)
	char pad_4A5[0x5b]; // 0x4a5(0x5b)
	struct UNetConnection* PendingSwapConnection; // 0x500(0x08)
	struct UNetConnection* NetConnection; // 0x508(0x08)
	char pad_510[0x18]; // 0x510(0x18)
	float InputYawScale; // 0x528(0x04)
	float InputPitchScale; // 0x52c(0x04)
	float InputRollScale; // 0x530(0x04)
	char bShowMouseCursor : 1; // 0x534(0x01)
	char bEnableClickEvents : 1; // 0x534(0x01)
	char bEnableTouchEvents : 1; // 0x534(0x01)
	char bEnableMouseOverEvents : 1; // 0x534(0x01)
	char bEnableTouchOverEvents : 1; // 0x534(0x01)
	char bForceFeedbackEnabled : 1; // 0x534(0x01)
	char bEnableMotionControls : 1; // 0x534(0x01)
	char bEnableStreamingSource : 1; // 0x534(0x01)
	char bStreamingSourceShouldActivate : 1; // 0x535(0x01)
	char bStreamingSourceShouldBlockOnSlowStreaming : 1; // 0x535(0x01)
	char pad_535_2 : 6; // 0x535(0x01)
	char pad_536[0x2]; // 0x536(0x02)
	enum class EStreamingSourcePriority StreamingSourcePriority; // 0x538(0x01)
	char pad_539[0x3]; // 0x539(0x03)
	float ForceFeedbackScale; // 0x53c(0x04)
	struct TArray<struct FKey> ClickEventKeys; // 0x540(0x10)
	enum class EMouseCursor DefaultMouseCursor; // 0x550(0x01)
	enum class EMouseCursor CurrentMouseCursor; // 0x551(0x01)
	enum class ECollisionChannel DefaultClickTraceChannel; // 0x552(0x01)
	enum class ECollisionChannel CurrentClickTraceChannel; // 0x553(0x01)
	float HitResultTraceDistance; // 0x554(0x04)
	uint16_t SeamlessTravelCount; // 0x558(0x02)
	uint16_t LastCompletedSeamlessTravelCount; // 0x55a(0x02)
	char pad_55C[0x84]; // 0x55c(0x84)
	struct UInputComponent* InactiveStateInputComponent; // 0x5e0(0x08)
	char pad_5E8_0 : 2; // 0x5e8(0x01)
	char bShouldPerformFullTickWhenPaused : 1; // 0x5e8(0x01)
	char pad_5E8_3 : 5; // 0x5e8(0x01)
	char pad_5E9[0x17]; // 0x5e9(0x17)
	struct UTouchInterface* CurrentTouchInterface; // 0x600(0x08)
	struct UPlayerInput* OverridePlayerInputClass; // 0x608(0x08)
	char pad_610[0x78]; // 0x610(0x78)
	struct ASpectatorPawn* SpectatorPawn; // 0x688(0x08)
	char pad_690[0x4]; // 0x690(0x04)
	bool bIsLocalPlayerController; // 0x694(0x01)
	char pad_695[0x3]; // 0x695(0x03)
	struct FVector SpawnLocation; // 0x698(0x18)
	char pad_6B0[0x148]; // 0x6b0(0x148)

	bool WasInputKeyJustReleased(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustReleased // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932e94c
	bool WasInputKeyJustPressed(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustPressed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932e860
	void ToggleSpeaking(bool bInSpeaking); // Function Engine.PlayerController.ToggleSpeaking // (Exec|Native|Public) // @ game+0x932e7dc
	void TestServerLevelVisibilityChange(struct FName PackageName, struct FName Filename); // Function Engine.PlayerController.TestServerLevelVisibilityChange // (Final|Exec|Native|Private) // @ game+0x932e738
	void SwitchLevel(struct FString URL); // Function Engine.PlayerController.SwitchLevel // (Exec|Native|Public) // @ game+0x932e5e0
	bool StreamingSourceShouldBlockOnSlowStreaming(); // Function Engine.PlayerController.StreamingSourceShouldBlockOnSlowStreaming // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x7640b58
	bool StreamingSourceShouldActivate(); // Function Engine.PlayerController.StreamingSourceShouldActivate // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x200f724
	void StopHapticEffect(enum class EControllerHand Hand); // Function Engine.PlayerController.StopHapticEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x932e558
	void StartFire(char FireModeNum); // Function Engine.PlayerController.StartFire // (Exec|Native|Public) // @ game+0x932e4d4
	void SetVirtualJoystickVisibility(bool bVisible); // Function Engine.PlayerController.SetVirtualJoystickVisibility // (Native|Public|BlueprintCallable) // @ game+0x932e450
	void SetViewTargetWithBlend(struct AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function Engine.PlayerController.SetViewTargetWithBlend // (Native|Public|BlueprintCallable) // @ game+0x932e2c8
	void SetName(struct FString S); // Function Engine.PlayerController.SetName // (Exec|Native|Public) // @ game+0x932e170
	void SetMouseLocation(int32_t X, int32_t Y); // Function Engine.PlayerController.SetMouseLocation // (Final|Native|Public|BlueprintCallable) // @ game+0x932e0b0
	void SetMouseCursorWidget(enum class EMouseCursor Cursor, struct UUserWidget* CursorWidget); // Function Engine.PlayerController.SetMouseCursorWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x932df00
	void SetMotionControlsEnabled(bool bEnabled); // Function Engine.PlayerController.SetMotionControlsEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x932de80
	void SetHapticsByValue(float Frequency, float Amplitude, enum class EControllerHand Hand); // Function Engine.PlayerController.SetHapticsByValue // (Final|Native|Public|BlueprintCallable) // @ game+0x932dd84
	void SetDisableHaptics(bool bNewDisabled); // Function Engine.PlayerController.SetDisableHaptics // (Native|Public|BlueprintCallable) // @ game+0x932dd00
	void SetDeprecatedInputYawScale(float NewValue); // Function Engine.PlayerController.SetDeprecatedInputYawScale // (Final|Native|Public|BlueprintCallable) // @ game+0x932dc7c
	void SetDeprecatedInputRollScale(float NewValue); // Function Engine.PlayerController.SetDeprecatedInputRollScale // (Final|Native|Public|BlueprintCallable) // @ game+0x932dbf8
	void SetDeprecatedInputPitchScale(float NewValue); // Function Engine.PlayerController.SetDeprecatedInputPitchScale // (Final|Native|Public|BlueprintCallable) // @ game+0x932db74
	void SetControllerLightColor(struct FColor Color); // Function Engine.PlayerController.SetControllerLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x932daf8
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.PlayerController.SetCinematicMode // (Native|Public|BlueprintCallable) // @ game+0x932d94c
	void SetAudioListenerOverride(struct USceneComponent* AttachToComponent, struct FVector Location, struct FRotator Rotation); // Function Engine.PlayerController.SetAudioListenerOverride // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x932d76c
	void SetAudioListenerAttenuationOverride(struct USceneComponent* AttachToComponent, struct FVector AttenuationLocationOVerride); // Function Engine.PlayerController.SetAudioListenerAttenuationOverride // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x932d5f4
	void ServerViewSelf(struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ServerViewSelf // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x932d524
	void ServerViewPrevPlayer(); // Function Engine.PlayerController.ServerViewPrevPlayer // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x932d4d8
	void ServerViewNextPlayer(); // Function Engine.PlayerController.ServerViewNextPlayer // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x932d48c
	void ServerVerifyViewTarget(); // Function Engine.PlayerController.ServerVerifyViewTarget // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932d440
	void ServerUpdateMultipleLevelsVisibility(struct TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities); // Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932d348
	void ServerUpdateLevelVisibility(struct FUpdateLevelVisibilityLevelInfo LevelVisibility); // Function Engine.PlayerController.ServerUpdateLevelVisibility // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x177a768
	void ServerUpdateCamera(struct FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw); // Function Engine.PlayerController.ServerUpdateCamera // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x932d238
	void ServerUnmutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ServerUnmutePlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932d124
	void ServerUnblockPlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ServerUnblockPlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932d010
	void ServerToggleAILogging(); // Function Engine.PlayerController.ServerToggleAILogging // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932cfc4
	void ServerShortTimeout(); // Function Engine.PlayerController.ServerShortTimeout // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x286bd00
	void ServerSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ServerSetSpectatorWaiting // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932cf14
	void ServerSetSpectatorLocation(struct FVector NewLoc, struct FRotator NewRot); // Function Engine.PlayerController.ServerSetSpectatorLocation // (Net|Native|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x932cddc
	void ServerRestartPlayer(); // Function Engine.PlayerController.ServerRestartPlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932cd90
	void ServerRecvClientInputFrame(int32_t RecvClientInputFrame, struct TArray<char> Data); // Function Engine.PlayerController.ServerRecvClientInputFrame // (Net|Native|Event|Public|NetServer) // @ game+0x932ccb8
	void ServerPause(); // Function Engine.PlayerController.ServerPause // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932cc6c
	void ServerNotifyLoadedWorld(struct FName WorldPackageName); // Function Engine.PlayerController.ServerNotifyLoadedWorld // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932cbc0
	void ServerMutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ServerMutePlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932caac
	void ServerExecRPC(struct FString Msg); // Function Engine.PlayerController.ServerExecRPC // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932c930
	void ServerExec(struct FString Msg); // Function Engine.PlayerController.ServerExec // (Final|Exec|Native|Public) // @ game+0x69ef0b4
	void ServerCheckClientPossessionReliable(); // Function Engine.PlayerController.ServerCheckClientPossessionReliable // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932c8e4
	void ServerCheckClientPossession(); // Function Engine.PlayerController.ServerCheckClientPossession // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x932c898
	void ServerChangeName(struct FString S); // Function Engine.PlayerController.ServerChangeName // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932c71c
	void ServerCamera(struct FName NewMode); // Function Engine.PlayerController.ServerCamera // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932c680
	void ServerBlockPlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ServerBlockPlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932c56c
	void ServerAcknowledgePossession(struct APawn* P); // Function Engine.PlayerController.ServerAcknowledgePossession // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x932c4cc
	void SendToConsole(struct FString Command); // Function Engine.PlayerController.SendToConsole // (Exec|Native|Public) // @ game+0x932c374
	void RestartLevel(); // Function Engine.PlayerController.RestartLevel // (Exec|Native|Public) // @ game+0x7467714
	void ResetControllerLightColor(); // Function Engine.PlayerController.ResetControllerLightColor // (Final|Native|Public|BlueprintCallable) // @ game+0x932c360
	bool ProjectWorldLocationToScreen(struct FVector WorldLocation, struct FVector2D& ScreenLocation, bool bPlayerViewportRelative); // Function Engine.PlayerController.ProjectWorldLocationToScreen // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x932c22c
	void PlayHapticEffect(struct UHapticFeedbackEffect_Base* HapticEffect, enum class EControllerHand Hand, float Scale, bool bLoop); // Function Engine.PlayerController.PlayHapticEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x932be28
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, enum class EDynamicForceFeedbackAction Action, struct FLatentActionInfo LatentInfo); // Function Engine.PlayerController.PlayDynamicForceFeedback // (Final|Native|Private|BlueprintCallable) // @ game+0x932bb94
	void Pause(); // Function Engine.PlayerController.Pause // (Exec|Native|Public) // @ game+0x932bb7c
	void OnServerStartedVisualLogger(bool bIsLogging); // Function Engine.PlayerController.OnServerStartedVisualLogger // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x932baf8
	void OnRep_AsyncPhysicsDataComponent(); // Function Engine.PlayerController.OnRep_AsyncPhysicsDataComponent // (Final|Native|Private) // @ game+0x932bad8
	void LocalTravel(struct FString URL); // Function Engine.PlayerController.LocalTravel // (Exec|Native|Public) // @ game+0x932b980
	void K2_ClientPlayForceFeedback(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FName tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // Function Engine.PlayerController.K2_ClientPlayForceFeedback // (Final|Native|Public|BlueprintCallable) // @ game+0x932b7c4
	bool IsStreamingSourceEnabled(); // Function Engine.PlayerController.IsStreamingSourceEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932b79c
	bool IsInputKeyDown(struct FKey Key); // Function Engine.PlayerController.IsInputKeyDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932b6b0
	void GetViewportSize(int32_t& SizeX, int32_t& SizeY); // Function Engine.PlayerController.GetViewportSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x932b5d8
	enum class EStreamingSourcePriority GetStreamingSourcePriority(); // Function Engine.PlayerController.GetStreamingSourcePriority // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x7640b9c
	struct ASpectatorPawn* GetSpectatorPawn(); // Function Engine.PlayerController.GetSpectatorPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27a9b8c
	struct FPlatformUserId GetPlatformUserId(); // Function Engine.PlayerController.GetPlatformUserId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932b5ac
	struct UPlayerInput* GetOverridePlayerInputClass(); // Function Engine.PlayerController.GetOverridePlayerInputClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x75ce8ac
	bool GetMousePosition(float& LocationX, float& LocationY); // Function Engine.PlayerController.GetMousePosition // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x932b4c4
	struct FVector GetInputVectorKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputVectorKeyState // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x932b3c4
	void GetInputTouchState(enum class ETouchIndex FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.PlayerController.GetInputTouchState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x932b254
	void GetInputMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.PlayerController.GetInputMouseDelta // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x932b17c
	void GetInputMotionState(struct FVector& Tilt, struct FVector& RotationRate, struct FVector& Gravity, struct FVector& Acceleration); // Function Engine.PlayerController.GetInputMotionState // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x932afec
	float GetInputKeyTimeDown(struct FKey Key); // Function Engine.PlayerController.GetInputKeyTimeDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932aefc
	void GetInputAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.PlayerController.GetInputAnalogStickState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x932addc
	float GetInputAnalogKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputAnalogKeyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932acec
	struct AHUD* GetHUD(); // Function Engine.PlayerController.GetHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dcca24
	bool GetHitResultUnderFingerForObjects(enum class ETouchIndex FingerIndex, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerForObjects // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x932ab44
	bool GetHitResultUnderFingerByChannel(enum class ETouchIndex FingerIndex, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerByChannel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x932a9d0
	bool GetHitResultUnderFinger(enum class ETouchIndex FingerIndex, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFinger // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x932a85c
	bool GetHitResultUnderCursorForObjects(struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorForObjects // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x932a6f8
	bool GetHitResultUnderCursorByChannel(enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorByChannel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x932a5cc
	bool GetHitResultUnderCursor(enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursor // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x932a4a0
	struct FVector GetFocalLocation(); // Function Engine.PlayerController.GetFocalLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x932a464
	float GetDeprecatedInputYawScale(); // Function Engine.PlayerController.GetDeprecatedInputYawScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932a43c
	float GetDeprecatedInputRollScale(); // Function Engine.PlayerController.GetDeprecatedInputRollScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932a414
	float GetDeprecatedInputPitchScale(); // Function Engine.PlayerController.GetDeprecatedInputPitchScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932a3ec
	struct UAsyncPhysicsData* GetAsyncPhysicsDataToWrite(); // Function Engine.PlayerController.GetAsyncPhysicsDataToWrite // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932a3c4
	struct UAsyncPhysicsData* GetAsyncPhysicsDataToConsume(); // Function Engine.PlayerController.GetAsyncPhysicsDataToConsume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932a38c
	void FOV(float NewFOV); // Function Engine.PlayerController.FOV // (Exec|Native|Public) // @ game+0x932a304
	void EnableCheats(); // Function Engine.PlayerController.EnableCheats // (Exec|Native|Public) // @ game+0x74684ec
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector& WorldLocation, struct FVector& WorldDirection); // Function Engine.PlayerController.DeprojectScreenPositionToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x932a190
	bool DeprojectMousePositionToWorld(struct FVector& WorldLocation, struct FVector& WorldDirection); // Function Engine.PlayerController.DeprojectMousePositionToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x932a0a0
	void ConsoleKey(struct FKey Key); // Function Engine.PlayerController.ConsoleKey // (Exec|Native|Public) // @ game+0x9329fb8
	void ClientWasKicked(struct FText KickReason); // Function Engine.PlayerController.ClientWasKicked // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9329f00
	void ClientVoiceHandshakeComplete(); // Function Engine.PlayerController.ClientVoiceHandshakeComplete // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2ad8d44
	void ClientUpdateMultipleLevelsStreamingStatus(struct TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses); // Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9329da8
	void ClientUpdateLevelStreamingStatus(struct FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex, struct FNetLevelVisibilityTransactionId TransactionId); // Function Engine.PlayerController.ClientUpdateLevelStreamingStatus // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9329bd0
	void ClientUnmutePlayers(struct TArray<struct FUniqueNetIdRepl> PlayerIds); // Function Engine.PlayerController.ClientUnmutePlayers // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9329b40
	void ClientUnmutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ClientUnmutePlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9329a5c
	void ClientTravelInternal(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravelInternal // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x9329824
	void ClientTravel(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravel // (Final|Native|Public|HasDefaults) // @ game+0x93295f0
	void ClientTeamMessage(struct APlayerState* SenderPlayerState, struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientTeamMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x93293d8
	void ClientStopForceFeedback(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FName tag); // Function Engine.PlayerController.ClientStopForceFeedback // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x2149da0
	void ClientStopCameraShakesFromSource(struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerController.ClientStopCameraShakesFromSource // (Final|Native|Public|BlueprintCallable) // @ game+0x932930c
	void ClientStopCameraShake(struct UCameraShakeBase* Shake, bool bImmediately); // Function Engine.PlayerController.ClientStopCameraShake // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x9329240
	void ClientStartOnlineSession(); // Function Engine.PlayerController.ClientStartOnlineSession // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9329228
	void ClientStartCameraShakeFromSource(struct UCameraShakeBase* Shake, struct UCameraShakeSourceComponent* SourceComponent); // Function Engine.PlayerController.ClientStartCameraShakeFromSource // (Final|Native|Public|BlueprintCallable) // @ game+0x932912c
	void ClientStartCameraShake(struct UCameraShakeBase* Shake, float Scale, enum class ECameraShakePlaySpace Playspace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerController.ClientStartCameraShake // (Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // @ game+0x113ea6c
	void ClientSpawnGenericCameraLensEffect(struct AActor* LensEffectEmitterClass); // Function Engine.PlayerController.ClientSpawnGenericCameraLensEffect // (Net|Native|Event|Public|NetClient|BlueprintCallable) // @ game+0x7556e04
	void ClientSpawnCameraLensEffect(struct AEmitterCameraLensEffectBase* LensEffectEmitterClass); // Function Engine.PlayerController.ClientSpawnCameraLensEffect // (Net|Native|Event|Public|NetClient) // @ game+0x93290a8
	void ClientSetViewTarget(struct AActor* A, struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ClientSetViewTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9328fb8
	void ClientSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ClientSetSpectatorWaiting // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9328f34
	void ClientSetHUD(struct AHUD* NewHUDClass); // Function Engine.PlayerController.ClientSetHUD // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x1be4bac
	void ClientSetForceMipLevelsToBeResident(struct UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9328e34
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD); // Function Engine.PlayerController.ClientSetCinematicMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9328cdc
	void ClientSetCameraMode(struct FName NewCamMode); // Function Engine.PlayerController.ClientSetCameraMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9328c58
	void ClientSetCameraFade(bool bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished); // Function Engine.PlayerController.ClientSetCameraFade // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x9328a74
	void ClientSetBlockOnAsyncLoading(); // Function Engine.PlayerController.ClientSetBlockOnAsyncLoading // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9328a5c
	void ClientReturnToMainMenuWithTextReason(struct FText ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x24bd158
	void ClientReturnToMainMenu(struct FString ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenu // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9328904
	void ClientRetryClientRestart(struct APawn* NewPawn); // Function Engine.PlayerController.ClientRetryClientRestart // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x654d7f0
	void ClientRestart(struct APawn* NewPawn); // Function Engine.PlayerController.ClientRestart // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9328880
	void ClientReset(); // Function Engine.PlayerController.ClientReset // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x22e3e4c
	void ClientRepObjRef(struct UObject* Object); // Function Engine.PlayerController.ClientRepObjRef // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x93287fc
	void ClientRecvServerAckFrameDebug(char NumBuffered, float TargetNumBufferedCmds); // Function Engine.PlayerController.ClientRecvServerAckFrameDebug // (Net|Native|Event|Public|NetClient) // @ game+0x9328730
	void ClientRecvServerAckFrame(int32_t LastProcessedInputFrame, int32_t RecvServerFrameNumber, int8_t TimeDilation); // Function Engine.PlayerController.ClientRecvServerAckFrame // (Net|Native|Event|Public|NetClient) // @ game+0x9328634
	void ClientReceiveLocalizedMessage(struct ULocalMessage* message, int32_t Switch, struct APlayerState* , struct APlayerState* , struct UObject* OptionalObject); // Function Engine.PlayerController.ClientReceiveLocalizedMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x93284ac
	void ClientPrestreamTextures(struct AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientPrestreamTextures // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9328364
	void ClientPrepareMapChange(struct FName LevelName, bool bFirst, bool bLast); // Function Engine.PlayerController.ClientPrepareMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9328264
	void ClientPlaySoundAtLocation(struct USoundBase* sound, struct FVector Location, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySoundAtLocation // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x9328110
	void ClientPlaySound(struct USoundBase* sound, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySound // (Net|Native|Event|Public|NetClient) // @ game+0x9328014
	void ClientPlayForceFeedback_Internal(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FForceFeedbackParameters Params); // Function Engine.PlayerController.ClientPlayForceFeedback_Internal // (Final|Net|Native|Event|Private|NetClient) // @ game+0x2149f90
	void ClientMutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ClientMutePlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9327f30
	void ClientMessage(struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9327d5c
	void ClientIgnoreMoveInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreMoveInput // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9327cd8
	void ClientIgnoreLookInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreLookInput // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9327c54
	void ClientGotoState(struct FName NewState); // Function Engine.PlayerController.ClientGotoState // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9327bd0
	void ClientGameEnded(struct AActor* EndGameFocus, bool bIsWinner); // Function Engine.PlayerController.ClientGameEnded // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9327b04
	void ClientForceGarbageCollection(); // Function Engine.PlayerController.ClientForceGarbageCollection // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9327aec
	void ClientFlushLevelStreaming(); // Function Engine.PlayerController.ClientFlushLevelStreaming // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9327a88
	void ClientEndOnlineSession(); // Function Engine.PlayerController.ClientEndOnlineSession // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9327a70
	void ClientEnableNetworkVoice(bool bEnable); // Function Engine.PlayerController.ClientEnableNetworkVoice // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x264486c
	void ClientCommitMapChange(); // Function Engine.PlayerController.ClientCommitMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1fc3c70
	void ClientClearCameraLensEffects(); // Function Engine.PlayerController.ClientClearCameraLensEffects // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x9327a58
	void ClientCapBandwidth(int32_t Cap); // Function Engine.PlayerController.ClientCapBandwidth // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x279a04c
	void ClientCancelPendingMapChange(); // Function Engine.PlayerController.ClientCancelPendingMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x9327a40
	void ClientAddTextureStreamingLoc(struct FVector InLoc, float Duration, bool bOverrideLocation); // Function Engine.PlayerController.ClientAddTextureStreamingLoc // (Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x9327930
	void ClientAckUpdateLevelVisibility(struct FName PackageName, struct FNetLevelVisibilityTransactionId TransactionId); // Function Engine.PlayerController.ClientAckUpdateLevelVisibility // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x932786c
	void ClearAudioListenerOverride(); // Function Engine.PlayerController.ClearAudioListenerOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x9327844
	void ClearAudioListenerAttenuationOverride(); // Function Engine.PlayerController.ClearAudioListenerAttenuationOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x932781c
	bool CanRestartPlayer(); // Function Engine.PlayerController.CanRestartPlayer // (Native|Public|BlueprintCallable) // @ game+0x93277f4
	void Camera(struct FName NewMode); // Function Engine.PlayerController.Camera // (Exec|Native|Public) // @ game+0x9327770
	void AddYawInput(float Val); // Function Engine.PlayerController.AddYawInput // (Native|Public|BlueprintCallable) // @ game+0x93276e8
	void AddRollInput(float Val); // Function Engine.PlayerController.AddRollInput // (Native|Public|BlueprintCallable) // @ game+0x9327660
	void AddPitchInput(float Val); // Function Engine.PlayerController.AddPitchInput // (Native|Public|BlueprintCallable) // @ game+0x93275d8
	void ActivateTouchInterface(struct UTouchInterface* NewTouchInterface); // Function Engine.PlayerController.ActivateTouchInterface // (Native|Public|BlueprintCallable) // @ game+0x9327554
};

// Class Engine.CheatManager
// Size: 0x88 (Inherited: 0x28)
struct UCheatManager : UObject {
	struct ADebugCameraController* DebugCameraControllerRef; // 0x28(0x08)
	struct ADebugCameraController* DebugCameraControllerClass; // 0x30(0x08)
	char pad_38[0x40]; // 0x38(0x40)
	struct TArray<struct UCheatManagerExtension*> CheatManagerExtensions; // 0x78(0x10)

	void Walk(); // Function Engine.CheatManager.Walk // (Exec|Native|Public|BlueprintCallable) // @ game+0x1e84bf4
	void ViewSelf(); // Function Engine.CheatManager.ViewSelf // (Exec|Native|Public) // @ game+0x92a2470
	void ViewPlayer(struct FString S); // Function Engine.CheatManager.ViewPlayer // (Exec|Native|Public) // @ game+0x92a2318
	void ViewClass(struct AActor* DesiredClass); // Function Engine.CheatManager.ViewClass // (Exec|Native|Public) // @ game+0x92a2294
	void ViewActor(struct FName ActorName); // Function Engine.CheatManager.ViewActor // (Exec|Native|Public) // @ game+0x92a2210
	void UpdateSafeArea(); // Function Engine.CheatManager.UpdateSafeArea // (Final|Exec|Native|Public) // @ game+0x92a21f4
	void ToggleServerStatReplicatorUpdateStatNet(); // Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet // (Final|Exec|Native|Public) // @ game+0x92a219c
	void ToggleServerStatReplicatorClientOverwrite(); // Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite // (Final|Exec|Native|Public) // @ game+0x92a2144
	void ToggleDebugCamera(); // Function Engine.CheatManager.ToggleDebugCamera // (Exec|Native|Public) // @ game+0x92a212c
	void ToggleAILogging(); // Function Engine.CheatManager.ToggleAILogging // (Exec|Native|Public) // @ game+0x92a2114
	void TestCollisionDistance(); // Function Engine.CheatManager.TestCollisionDistance // (Exec|Native|Public) // @ game+0x1138230
	void Teleport(); // Function Engine.CheatManager.Teleport // (Exec|Native|Public|BlueprintCallable) // @ game+0x26d2f98
	void Summon(struct FString ClassName); // Function Engine.CheatManager.Summon // (Exec|Native|Public) // @ game+0x633dbf0
	void StreamLevelOut(struct FName PackageName); // Function Engine.CheatManager.StreamLevelOut // (Exec|Native|Public) // @ game+0x92a2090
	void StreamLevelIn(struct FName PackageName); // Function Engine.CheatManager.StreamLevelIn // (Exec|Native|Public) // @ game+0x92a200c
	void SpawnServerStatReplicator(); // Function Engine.CheatManager.SpawnServerStatReplicator // (Final|Exec|Native|Public) // @ game+0x92a1fdc
	void Slomo(float NewTimeDilation); // Function Engine.CheatManager.Slomo // (Exec|Native|Public|BlueprintCallable) // @ game+0x648e9d8
	void SetWorldOrigin(); // Function Engine.CheatManager.SetWorldOrigin // (Final|Exec|Native|Public) // @ game+0x92a1fc8
	void SetMouseSensitivityToDefault(); // Function Engine.CheatManager.SetMouseSensitivityToDefault // (Exec|Native|Public) // @ game+0x92a1fb0
	void ServerToggleAILogging(); // Function Engine.CheatManager.ServerToggleAILogging // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x92a1f64
	void ReceiveInitCheatManager(); // Function Engine.CheatManager.ReceiveInitCheatManager // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveEndPlay(); // Function Engine.CheatManager.ReceiveEndPlay // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void PlayersOnly(); // Function Engine.CheatManager.PlayersOnly // (Exec|Native|Public|BlueprintCallable) // @ game+0x92a1f4c
	void OnPlayerEndPlayed(struct AActor* Player, enum class EEndPlayReason EndPlayReason); // Function Engine.CheatManager.OnPlayerEndPlayed // (Final|Native|Public) // @ game+0x92a1e0c
	void OnlyLoadLevel(struct FName PackageName); // Function Engine.CheatManager.OnlyLoadLevel // (Exec|Native|Public) // @ game+0x92a1ec8
	void LogLoc(); // Function Engine.CheatManager.LogLoc // (Exec|Native|Public) // @ game+0x92a1df4
	void InvertMouse(); // Function Engine.CheatManager.InvertMouse // (Exec|Native|Public) // @ game+0x5c9a188
	void God(); // Function Engine.CheatManager.God // (Exec|Native|Public|BlueprintCallable) // @ game+0x5c90d54
	void Ghost(); // Function Engine.CheatManager.Ghost // (Exec|Native|Public|BlueprintCallable) // @ game+0x5c7e9b0
	struct APlayerController* GetPlayerController(); // Function Engine.CheatManager.GetPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a1da8
	void FreezeFrame(float Delay); // Function Engine.CheatManager.FreezeFrame // (Exec|Native|Public|BlueprintCallable) // @ game+0x67ce1ec
	void Fly(); // Function Engine.CheatManager.Fly // (Exec|Native|Public|BlueprintCallable) // @ game+0x686eedc
	void FlushLog(); // Function Engine.CheatManager.FlushLog // (Exec|Native|Public) // @ game+0x92a1d90
	void EnableDebugCamera(); // Function Engine.CheatManager.EnableDebugCamera // (Native|Protected|BlueprintCallable) // @ game+0x5c99ac0
	void DumpVoiceMutingState(); // Function Engine.CheatManager.DumpVoiceMutingState // (Exec|Native|Public) // @ game+0x22f2acc
	void DumpPartyState(); // Function Engine.CheatManager.DumpPartyState // (Exec|Native|Public) // @ game+0x1282d0c
	void DumpOnlineSessionState(); // Function Engine.CheatManager.DumpOnlineSessionState // (Exec|Native|Public) // @ game+0x1db3074
	void DumpChatState(); // Function Engine.CheatManager.DumpChatState // (Exec|Native|Public) // @ game+0x26eaa48
	void DisableDebugCamera(); // Function Engine.CheatManager.DisableDebugCamera // (Native|Protected|BlueprintCallable) // @ game+0x92a1d78
	void DestroyTarget(); // Function Engine.CheatManager.DestroyTarget // (Exec|Native|Public|BlueprintCallable) // @ game+0x92a1d60
	void DestroyServerStatReplicator(); // Function Engine.CheatManager.DestroyServerStatReplicator // (Final|Exec|Native|Public) // @ game+0x92a1d4c
	void DestroyPawns(struct APawn* aClass); // Function Engine.CheatManager.DestroyPawns // (Exec|Native|Public) // @ game+0x92a1cc8
	void DestroyAllPawnsExceptTarget(); // Function Engine.CheatManager.DestroyAllPawnsExceptTarget // (Exec|Native|Public) // @ game+0x735253c
	void DestroyAll(struct AActor* aClass); // Function Engine.CheatManager.DestroyAll // (Exec|Native|Public) // @ game+0x92a1c44
	void DebugCapsuleSweepSize(float HalfHeight, float Radius); // Function Engine.CheatManager.DebugCapsuleSweepSize // (Exec|Native|Public) // @ game+0x92a1b7c
	void DebugCapsuleSweepPawn(); // Function Engine.CheatManager.DebugCapsuleSweepPawn // (Exec|Native|Public) // @ game+0x259e1b0
	void DebugCapsuleSweepComplex(bool bTraceComplex); // Function Engine.CheatManager.DebugCapsuleSweepComplex // (Exec|Native|Public) // @ game+0x92a1af8
	void DebugCapsuleSweepClear(); // Function Engine.CheatManager.DebugCapsuleSweepClear // (Exec|Native|Public) // @ game+0x234846c
	void DebugCapsuleSweepChannel(enum class ECollisionChannel Channel); // Function Engine.CheatManager.DebugCapsuleSweepChannel // (Exec|Native|Public) // @ game+0x92a1a74
	void DebugCapsuleSweepCapture(); // Function Engine.CheatManager.DebugCapsuleSweepCapture // (Exec|Native|Public) // @ game+0x92a1a5c
	void DebugCapsuleSweep(); // Function Engine.CheatManager.DebugCapsuleSweep // (Exec|Native|Public) // @ game+0x92a1a44
	void DamageTarget(float DamageAmount); // Function Engine.CheatManager.DamageTarget // (Exec|Native|Public|BlueprintCallable) // @ game+0x92a19bc
	void CheatScript(struct FString ScriptName); // Function Engine.CheatManager.CheatScript // (Final|Exec|Native|Public) // @ game+0x92a185c
	void ChangeSize(float F); // Function Engine.CheatManager.ChangeSize // (Exec|Native|Public|BlueprintCallable) // @ game+0x922a890
	void BugItStringCreator(struct FVector ViewLocation, struct FRotator ViewRotation, struct FString& GoString, struct FString& LocString); // Function Engine.CheatManager.BugItStringCreator // (Exec|Native|Public|HasOutParms|HasDefaults) // @ game+0x92a1528
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll); // Function Engine.CheatManager.BugItGo // (Exec|Native|Public) // @ game+0x92a1354
	void BugIt(struct FString ScreenShotDescription); // Function Engine.CheatManager.BugIt // (Exec|Native|Public) // @ game+0x92a11fc
};

// Class Engine.CheatManagerExtension
// Size: 0x28 (Inherited: 0x28)
struct UCheatManagerExtension : UObject {

	struct APlayerController* GetPlayerController(); // Function Engine.CheatManagerExtension.GetPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a1dc8
};

// Class Engine.BlueprintGeneratedClass
// Size: 0x380 (Inherited: 0x230)
struct UBlueprintGeneratedClass : UClass {
	char pad_230[0x8]; // 0x230(0x08)
	int32_t NumReplicatedProperties; // 0x238(0x04)
	char bHasNativizedParent : 1; // 0x23c(0x01)
	char bHasCookedComponentInstancingData : 1; // 0x23c(0x01)
	char pad_23C_2 : 6; // 0x23c(0x01)
	char pad_23D[0x3]; // 0x23d(0x03)
	struct TArray<struct UDynamicBlueprintBinding*> DynamicBindingObjects; // 0x240(0x10)
	struct TArray<struct UActorComponent*> ComponentTemplates; // 0x250(0x10)
	struct TArray<struct UTimelineTemplate*> Timelines; // 0x260(0x10)
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides; // 0x270(0x10)
	struct USimpleConstructionScript* SimpleConstructionScript; // 0x280(0x08)
	struct UInheritableComponentHandler* InheritableComponentHandler; // 0x288(0x08)
	struct UStructProperty* UberGraphFramePointerProperty; // 0x290(0x08)
	char pad_298[0x8]; // 0x298(0x08)
	struct UFunction* UberGraphFunction; // 0x2a0(0x08)
	struct TMap<struct FName, struct FGuid> CookedPropertyGuids; // 0x2a8(0x50)
	struct TMap<struct FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData; // 0x2f8(0x50)
	char pad_348[0x38]; // 0x348(0x38)
};

// Class Engine.ReplicationConnectionDriver
// Size: 0x28 (Inherited: 0x28)
struct UReplicationConnectionDriver : UObject {
};

// Class Engine.ReplicationDriver
// Size: 0x28 (Inherited: 0x28)
struct UReplicationDriver : UObject {
};

// Class Engine.SkeletalMeshActor
// Size: 0x308 (Inherited: 0x288)
struct ASkeletalMeshActor : AActor {
	char bShouldDoAnimNotifies : 1; // 0x288(0x01)
	char bWakeOnLevelStart : 1; // 0x288(0x01)
	char pad_288_2 : 6; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0x290(0x08)
	struct USkeletalMesh* ReplicatedMesh; // 0x298(0x08)
	struct UPhysicsAsset* ReplicatedPhysAsset; // 0x2a0(0x08)
	struct UMaterialInterface* ReplicatedMaterial0; // 0x2a8(0x08)
	struct UMaterialInterface* ReplicatedMaterial1; // 0x2b0(0x08)
	char pad_2B8[0x50]; // 0x2b8(0x50)

	void OnRep_ReplicatedPhysAsset(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset // (Native|Public) // @ game+0xfe5030
	void OnRep_ReplicatedMesh(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh // (Native|Public) // @ game+0x230a2e8
	void OnRep_ReplicatedMaterial1(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1 // (Native|Public) // @ game+0x23e4cc8
	void OnRep_ReplicatedMaterial0(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0 // (Native|Public) // @ game+0xdf3528
};

// Class Engine.StreamableRenderAsset
// Size: 0xd0 (Inherited: 0x28)
struct UStreamableRenderAsset : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	double ForceMipLevelsToBeResidentTimestamp; // 0x40(0x08)
	int32_t NumCinematicMipLevels; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct FPerQualityLevelInt NoRefStreamingLODBias; // 0x50(0x68)
	int32_t StreamingIndex; // 0xb8(0x04)
	int32_t CachedCombinedLODBias; // 0xbc(0x04)
	char NeverStream : 1; // 0xc0(0x01)
	char bGlobalForceMipLevelsToBeResident : 1; // 0xc0(0x01)
	char bHasStreamingUpdatePending : 1; // 0xc0(0x01)
	char bForceMiplevelsToBeResident : 1; // 0xc0(0x01)
	char bIgnoreStreamingMipBias : 1; // 0xc0(0x01)
	char bUseCinematicMipLevels : 1; // 0xc0(0x01)
	char pad_C0_6 : 2; // 0xc0(0x01)
	char pad_C1[0xf]; // 0xc1(0x0f)

	void SetForceMipLevelsToBeResident(float Seconds, int32_t CinematicLODGroupMask); // Function Engine.StreamableRenderAsset.SetForceMipLevelsToBeResident // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9355628
};

// Class Engine.Texture
// Size: 0x158 (Inherited: 0xd0)
struct UTexture : UStreamableRenderAsset {
	char pad_D0[0x10]; // 0xd0(0x10)
	struct FGuid LightingGuid; // 0xe0(0x10)
	int32_t LevelIndex; // 0xf0(0x04)
	int32_t LODBias; // 0xf4(0x04)
	enum class TextureCompressionSettings CompressionSettings; // 0xf8(0x01)
	enum class TextureFilter Filter; // 0xf9(0x01)
	enum class ETextureMipLoadOptions MipLoadOptions; // 0xfa(0x01)
	enum class TextureGroup LODGroup; // 0xfb(0x01)
	struct FPerPlatformFloat Downscale; // 0xfc(0x04)
	enum class ETextureDownscaleOptions DownscaleOptions; // 0x100(0x01)
	char SRGB : 1; // 0x101(0x01)
	char bNoTiling : 1; // 0x101(0x01)
	char VirtualTextureStreaming : 1; // 0x101(0x01)
	char CompressionYCoCg : 1; // 0x101(0x01)
	char bNotOfflineProcessed : 1; // 0x101(0x01)
	char bAsyncResourceReleaseHasBeenStarted : 1; // 0x101(0x01)
	char pad_101_6 : 2; // 0x101(0x01)
	char pad_102[0x6]; // 0x102(0x06)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x108(0x10)
	char pad_118[0x40]; // 0x118(0x40)

	int64_t Blueprint_GetMemorySize(); // Function Engine.Texture.Blueprint_GetMemorySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93552b4
};

// Class Engine.Commandlet
// Size: 0x80 (Inherited: 0x28)
struct UCommandlet : UObject {
	struct FString HelpDescription; // 0x28(0x10)
	struct FString HelpUsage; // 0x38(0x10)
	struct FString HelpWebLink; // 0x48(0x10)
	struct TArray<struct FString> HelpParamNames; // 0x58(0x10)
	struct TArray<struct FString> HelpParamDescriptions; // 0x68(0x10)
	char IsServer : 1; // 0x78(0x01)
	char IsClient : 1; // 0x78(0x01)
	char IsEditor : 1; // 0x78(0x01)
	char LogToConsole : 1; // 0x78(0x01)
	char ShowErrorCount : 1; // 0x78(0x01)
	char ShowProgress : 1; // 0x78(0x01)
	char pad_78_6 : 2; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Engine.EdGraph
// Size: 0x60 (Inherited: 0x28)
struct UEdGraph : UObject {
	struct UEdGraphSchema* Schema; // 0x28(0x08)
	struct TArray<struct UEdGraphNode*> Nodes; // 0x30(0x10)
	char bEditable : 1; // 0x40(0x01)
	char bAllowDeletion : 1; // 0x40(0x01)
	char bAllowRenaming : 1; // 0x40(0x01)
	char pad_40_3 : 5; // 0x40(0x01)
	char pad_41[0x1f]; // 0x41(0x1f)
};

// Class Engine.SoundBase
// Size: 0x168 (Inherited: 0x28)
struct USoundBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USoundClass* SoundClassObject; // 0x30(0x08)
	char bDebug : 1; // 0x38(0x01)
	char bOverrideConcurrency : 1; // 0x38(0x01)
	char bEnableBusSends : 1; // 0x38(0x01)
	char bEnableBaseSubmix : 1; // 0x38(0x01)
	char bEnableSubmixSends : 1; // 0x38(0x01)
	char bHasDelayNode : 1; // 0x38(0x01)
	char bHasConcatenatorNode : 1; // 0x38(0x01)
	char bBypassVolumeScaleForPriority : 1; // 0x38(0x01)
	enum class EVirtualizationMode VirtualizationMode; // 0x39(0x01)
	char pad_3A[0x56]; // 0x3a(0x56)
	struct TSet<struct USoundConcurrency*> ConcurrencySet; // 0x90(0x50)
	struct FSoundConcurrencySettings ConcurrencyOverrides; // 0xe0(0x20)
	float Duration; // 0x100(0x04)
	float MaxDistance; // 0x104(0x04)
	float TotalSamples; // 0x108(0x04)
	float Priority; // 0x10c(0x04)
	struct USoundAttenuation* AttenuationSettings; // 0x110(0x08)
	struct USoundSubmixBase* SoundSubmixObject; // 0x118(0x08)
	struct TArray<struct FSoundSubmixSendInfo> SoundSubmixSends; // 0x120(0x10)
	struct USoundEffectSourcePresetChain* SourceEffectChain; // 0x130(0x08)
	struct TArray<struct FSoundSourceBusSendInfo> BusSends; // 0x138(0x10)
	struct TArray<struct FSoundSourceBusSendInfo> PreEffectBusSends; // 0x148(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x158(0x10)
};

// Class Engine.SoundWave
// Size: 0x310 (Inherited: 0x168)
struct USoundWave : USoundBase {
	char pad_168[0x10]; // 0x168(0x10)
	int32_t CompressionQuality; // 0x178(0x04)
	int32_t StreamingPriority; // 0x17c(0x04)
	enum class ESoundwaveSampleRateSettings SampleRateQuality; // 0x180(0x01)
	char pad_181[0x1]; // 0x181(0x01)
	enum class ESoundGroup SoundGroup; // 0x182(0x01)
	char bLooping : 1; // 0x183(0x01)
	char bStreaming : 1; // 0x183(0x01)
	char pad_183_2 : 6; // 0x183(0x01)
	enum class ESoundAssetCompressionType SoundAssetCompressionType; // 0x184(0x01)
	char bSeekableStreaming : 1; // 0x185(0x01)
	char bUseBinkAudio : 1; // 0x185(0x01)
	char pad_185_2 : 6; // 0x185(0x01)
	char pad_186[0x1a]; // 0x186(0x1a)
	struct FSoundModulationDefaultRoutingSettings ModulationSettings; // 0x1a0(0x48)
	struct TArray<float> FrequenciesToAnalyze; // 0x1e8(0x10)
	struct TArray<struct FSoundWaveSpectralTimeData> CookedSpectralTimeData; // 0x1f8(0x10)
	struct TArray<struct FSoundWaveEnvelopeTimeData> CookedEnvelopeTimeData; // 0x208(0x10)
	int32_t InitialChunkSize; // 0x218(0x04)
	char pad_21C[0x40]; // 0x21c(0x40)
	char pad_25C_0 : 5; // 0x25c(0x01)
	char bMature : 1; // 0x25c(0x01)
	char bManualWordWrap : 1; // 0x25c(0x01)
	char bSingleLine : 1; // 0x25c(0x01)
	char bIsAmbisonics : 1; // 0x25d(0x01)
	char pad_25D_1 : 7; // 0x25d(0x01)
	enum class ESoundWaveLoadingBehavior LoadingBehavior; // 0x25e(0x01)
	char pad_25F[0x1]; // 0x25f(0x01)
	struct FString SpokenText; // 0x260(0x10)
	float SubtitlePriority; // 0x270(0x04)
	float Volume; // 0x274(0x04)
	float Pitch; // 0x278(0x04)
	int32_t NumChannels; // 0x27c(0x04)
	struct TArray<struct FSoundWaveCuePoint> CuePoints; // 0x280(0x10)
	int32_t SampleRate; // 0x290(0x04)
	char pad_294[0xc]; // 0x294(0x0c)
	struct TArray<struct FSubtitleCue> Subtitles; // 0x2a0(0x10)
	struct UCurveTable* Curves; // 0x2b0(0x08)
	struct UCurveTable* InternalCurves; // 0x2b8(0x08)
	char pad_2C0[0x50]; // 0x2c0(0x50)

	void SetSoundAssetCompressionType(enum class ESoundAssetCompressionType InSoundAssetCompressionType); // Function Engine.SoundWave.SetSoundAssetCompressionType // (Final|Native|Public|BlueprintCallable) // @ game+0x66da9d0
	enum class ESoundAssetCompressionType GetSoundAssetCompressionType(); // Function Engine.SoundWave.GetSoundAssetCompressionType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934ea74
};

// Class Engine.SoundWaveProcedural
// Size: 0x360 (Inherited: 0x310)
struct USoundWaveProcedural : USoundWave {
	char pad_310[0x50]; // 0x310(0x50)
};

// Class Engine.AssetUserData
// Size: 0x28 (Inherited: 0x28)
struct UAssetUserData : UObject {
};

// Class Engine.TimecodeProvider
// Size: 0x30 (Inherited: 0x28)
struct UTimecodeProvider : UObject {
	float FrameDelay; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)

	struct FTimecode GetTimecode(); // Function Engine.TimecodeProvider.GetTimecode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9355dac
	enum class ETimecodeProviderSynchronizationState GetSynchronizationState(); // Function Engine.TimecodeProvider.GetSynchronizationState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x74b2688
	struct FQualifiedFrameTime GetQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetQualifiedFrameTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9355d78
	struct FFrameRate GetFrameRate(); // Function Engine.TimecodeProvider.GetFrameRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9355d44
	struct FTimecode GetDelayedTimecode(); // Function Engine.TimecodeProvider.GetDelayedTimecode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9355cf0
	struct FQualifiedFrameTime GetDelayedQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9355cc0
	bool FetchTimecode(struct FQualifiedFrameTime& OutFrameTime); // Function Engine.TimecodeProvider.FetchTimecode // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9355c0c
	void FetchAndUpdate(); // Function Engine.TimecodeProvider.FetchAndUpdate // (Native|Public|BlueprintCallable) // @ game+0x67ce468
};

// Class Engine.Channel
// Size: 0x68 (Inherited: 0x28)
struct UChannel : UObject {
	struct UNetConnection* Connection; // 0x28(0x08)
	char pad_30[0x38]; // 0x30(0x38)
};

// Class Engine.SoundCue
// Size: 0x548 (Inherited: 0x168)
struct USoundCue : USoundBase {
	struct USoundNode* FirstNode; // 0x168(0x08)
	float VolumeMultiplier; // 0x170(0x04)
	float PitchMultiplier; // 0x174(0x04)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x178(0x3b8)
	float SubtitlePriority; // 0x530(0x04)
	char pad_534[0x4]; // 0x534(0x04)
	char bPrimeOnLoad : 1; // 0x538(0x01)
	char bOverrideAttenuation : 1; // 0x538(0x01)
	char bExcludeFromRandomNodeBranchCulling : 1; // 0x538(0x01)
	char bHasPlayWhenSilent : 1; // 0x538(0x01)
	char pad_538_4 : 4; // 0x538(0x01)
	char pad_539[0x3]; // 0x539(0x03)
	int32_t CookedQualityIndex; // 0x53c(0x04)
	char pad_540[0x8]; // 0x540(0x08)
};

// Class Engine.AudioEngineSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UAudioEngineSubsystem : UDynamicSubsystem {
};

// Class Engine.RuntimeOptionsBase
// Size: 0x38 (Inherited: 0x28)
struct URuntimeOptionsBase : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Engine.DebugDrawComponent
// Size: 0x580 (Inherited: 0x530)
struct UDebugDrawComponent : UPrimitiveComponent {
	char pad_530[0x50]; // 0x530(0x50)
};

// Class Engine.AnimBoneCompressionCodec
// Size: 0x38 (Inherited: 0x28)
struct UAnimBoneCompressionCodec : UObject {
	struct FString Description; // 0x28(0x10)
};

// Class Engine.AnimCurveCompressionCodec
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec : UObject {
};

// Class Engine.TextureMipDataProviderFactory
// Size: 0x28 (Inherited: 0x28)
struct UTextureMipDataProviderFactory : UAssetUserData {
};

// Class Engine.MaterialExpressionCustomOutput
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionCustomOutput : UMaterialExpression {
};

// Class Engine.DynamicBlueprintBinding
// Size: 0x28 (Inherited: 0x28)
struct UDynamicBlueprintBinding : UObject {
};

// Class Engine.InputDelegateBinding
// Size: 0x28 (Inherited: 0x28)
struct UInputDelegateBinding : UDynamicBlueprintBinding {
};

// Class Engine.InputComponent
// Size: 0x128 (Inherited: 0xa0)
struct UInputComponent : UActorComponent {
	char pad_A0[0x70]; // 0xa0(0x70)
	struct TArray<struct FCachedKeyToActionInfo> CachedKeyToActionInfo; // 0x110(0x10)
	char pad_120[0x8]; // 0x120(0x08)

	bool WasControllerKeyJustReleased(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustReleased // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c7204
	bool WasControllerKeyJustPressed(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustPressed // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c7204
	void OnInputOwnerEndPlayed(struct AActor* InOwner, enum class EEndPlayReason EndPlayReason); // Function Engine.InputComponent.OnInputOwnerEndPlayed // (Final|Native|Private) // @ game+0x227d3c8
	bool IsControllerKeyDown(struct FKey Key); // Function Engine.InputComponent.IsControllerKeyDown // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c7204
	void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.InputComponent.GetTouchState // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c70d8
	struct FVector GetControllerVectorKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerVectorKeyState // (Final|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c6b74
	void GetControllerMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.InputComponent.GetControllerMouseDelta // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c6ac8
	float GetControllerKeyTimeDown(struct FKey Key); // Function Engine.InputComponent.GetControllerKeyTimeDown // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c68f0
	void GetControllerAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.InputComponent.GetControllerAnalogStickState // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c69e0
	float GetControllerAnalogKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerAnalogKeyState // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c68f0
};

// Class Engine.PlayerInput
// Size: 0x498 (Inherited: 0x28)
struct UPlayerInput : UObject {
	char pad_28[0x178]; // 0x28(0x178)
	struct TArray<struct FKeyBind> DebugExecBindings; // 0x1a0(0x10)
	char pad_1B0[0x30]; // 0x1b0(0x30)
	struct TArray<struct FName> InvertedAxis; // 0x1e0(0x10)
	char pad_1F0[0x2a8]; // 0x1f0(0x2a8)

	void SetMouseSensitivity(float Sensitivity); // Function Engine.PlayerInput.SetMouseSensitivity // (Final|Exec|Native|Public) // @ game+0x9330d50
	void SetBind(struct FName BindName, struct FString Command); // Function Engine.PlayerInput.SetBind // (Final|Exec|Native|Public) // @ game+0x933062c
	void InvertAxisKey(struct FKey AxisKey); // Function Engine.PlayerInput.InvertAxisKey // (Final|Exec|Native|Public) // @ game+0x93304b0
	void InvertAxis(struct FName AxisName); // Function Engine.PlayerInput.InvertAxis // (Final|Exec|Native|Public) // @ game+0x9330430
	struct APlayerController* GetOuterAPlayerController(); // Function Engine.PlayerInput.GetOuterAPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9330364
	void ClearSmoothing(); // Function Engine.PlayerInput.ClearSmoothing // (Final|Exec|Native|Public) // @ game+0x932fe98
};

// Class Engine.SpectatorPawn
// Size: 0x338 (Inherited: 0x338)
struct ASpectatorPawn : ADefaultPawn {
};

// Class Engine.SceneCaptureComponent
// Size: 0x360 (Inherited: 0x2a0)
struct USceneCaptureComponent : USceneComponent {
	enum class ESceneCapturePrimitiveRenderMode PrimitiveRenderMode; // 0x2a0(0x01)
	enum class ESceneCaptureSource CaptureSource; // 0x2a1(0x01)
	char bCaptureEveryFrame : 1; // 0x2a2(0x01)
	char bCaptureOnMovement : 1; // 0x2a2(0x01)
	char pad_2A2_2 : 6; // 0x2a2(0x01)
	bool bAlwaysPersistRenderingState; // 0x2a3(0x01)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> HiddenComponents; // 0x2a8(0x10)
	struct TArray<struct AActor*> HiddenActors; // 0x2b8(0x10)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> ShowOnlyComponents; // 0x2c8(0x10)
	struct TArray<struct AActor*> ShowOnlyActors; // 0x2d8(0x10)
	float LODDistanceFactor; // 0x2e8(0x04)
	float MaxViewDistanceOverride; // 0x2ec(0x04)
	int32_t CaptureSortPriority; // 0x2f0(0x04)
	bool bUseRayTracingIfEnabled; // 0x2f4(0x01)
	char pad_2F5[0x3]; // 0x2f5(0x03)
	struct TArray<struct FEngineShowFlagsSetting> ShowFlagSettings; // 0x2f8(0x10)
	char pad_308[0x30]; // 0x308(0x30)
	struct FString ProfilingEventName; // 0x338(0x10)
	char pad_348[0x18]; // 0x348(0x18)

	void ShowOnlyComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.ShowOnlyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x933c398
	void ShowOnlyActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.ShowOnlyActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x933c184
	void SetCaptureSortPriority(int32_t NewCaptureSortPriority); // Function Engine.SceneCaptureComponent.SetCaptureSortPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x933c088
	void RemoveShowOnlyComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x933bff4
	void RemoveShowOnlyActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x933bd6c
	void HideComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.HideComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x933ad20
	void HideActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.HideActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x933ab34
	void ClearShowOnlyComponents(); // Function Engine.SceneCaptureComponent.ClearShowOnlyComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x933a670
	void ClearHiddenComponents(); // Function Engine.SceneCaptureComponent.ClearHiddenComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x933a640
};

// Class Engine.SceneCaptureComponent2D
// Size: 0xb40 (Inherited: 0x360)
struct USceneCaptureComponent2D : USceneCaptureComponent {
	enum class ECameraProjectionMode ProjectionType; // 0x358(0x01)
	float FOVAngle; // 0x35c(0x04)
	float OrthoWidth; // 0x360(0x04)
	struct UTextureRenderTarget2D* TextureTarget; // 0x368(0x08)
	enum class ESceneCaptureCompositeMode CompositeMode; // 0x370(0x01)
	char pad_372[0xe]; // 0x372(0x0e)
	struct FPostProcessSettings PostProcessSettings; // 0x380(0x6d0)
	float PostProcessBlendWeight; // 0xa50(0x04)
	char bOverride_CustomNearClippingPlane : 1; // 0xa54(0x01)
	char pad_A54_1 : 7; // 0xa54(0x01)
	char pad_A55[0x3]; // 0xa55(0x03)
	float CustomNearClippingPlane; // 0xa58(0x04)
	bool bUseCustomProjectionMatrix; // 0xa5c(0x01)
	char pad_A5D[0x3]; // 0xa5d(0x03)
	struct FMatrix CustomProjectionMatrix; // 0xa60(0x80)
	bool bUseFauxOrthoViewPos; // 0xae0(0x01)
	bool bEnableOrthographicTiling; // 0xae1(0x01)
	char pad_AE2[0x2]; // 0xae2(0x02)
	int32_t NumXTiles; // 0xae4(0x04)
	int32_t NumYTiles; // 0xae8(0x04)
	bool bEnableClipPlane; // 0xaec(0x01)
	char pad_AED[0x3]; // 0xaed(0x03)
	struct FVector ClipPlaneBase; // 0xaf0(0x18)
	struct FVector ClipPlaneNormal; // 0xb08(0x18)
	char bCameraCutThisFrame : 1; // 0xb20(0x01)
	char bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1; // 0xb20(0x01)
	char pad_B20_2 : 6; // 0xb20(0x01)
	char pad_B21[0x3]; // 0xb21(0x03)
	bool bDisableFlipCopyGLES; // 0xb24(0x01)
	char pad_B25[0x1b]; // 0xb25(0x1b)

	void RemoveBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject); // Function Engine.SceneCaptureComponent2D.RemoveBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x933bcd8
	void CaptureScene(); // Function Engine.SceneCaptureComponent2D.CaptureScene // (Final|Native|Public|BlueprintCallable) // @ game+0x933a62c
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x933a550
};

// Class Engine.MovementComponent
// Size: 0x108 (Inherited: 0xa0)
struct UMovementComponent : UActorComponent {
	struct USceneComponent* UpdatedComponent; // 0xa0(0x08)
	struct UPrimitiveComponent* UpdatedPrimitive; // 0xa8(0x08)
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FVector Velocity; // 0xb8(0x18)
	struct FVector PlaneConstraintNormal; // 0xd0(0x18)
	struct FVector PlaneConstraintOrigin; // 0xe8(0x18)
	char bUpdateOnlyIfRendered : 1; // 0x100(0x01)
	char bAutoUpdateTickRegistration : 1; // 0x100(0x01)
	char bTickBeforeOwner : 1; // 0x100(0x01)
	char bAutoRegisterUpdatedComponent : 1; // 0x100(0x01)
	char bConstrainToPlane : 1; // 0x100(0x01)
	char bSnapToPlaneAtStart : 1; // 0x100(0x01)
	char bAutoRegisterPhysicsVolumeUpdates : 1; // 0x100(0x01)
	char bComponentShouldUpdatePhysicsVolume : 1; // 0x100(0x01)
	char pad_101[0x2]; // 0x101(0x02)
	enum class EPlaneConstraintAxisSetting PlaneConstraintAxisSetting; // 0x103(0x01)
	char pad_104[0x4]; // 0x104(0x04)

	void StopMovementImmediately(); // Function Engine.MovementComponent.StopMovementImmediately // (Native|Public|BlueprintCallable) // @ game+0x145216c
	void SnapUpdatedComponentToPlane(); // Function Engine.MovementComponent.SnapUpdatedComponentToPlane // (Native|Public|BlueprintCallable) // @ game+0x5c3d0a4
	void SetUpdatedComponent(struct USceneComponent* NewUpdatedComponent); // Function Engine.MovementComponent.SetUpdatedComponent // (Native|Public|BlueprintCallable) // @ game+0x2376b88
	void SetPlaneConstraintOrigin(struct FVector PlaneOrigin); // Function Engine.MovementComponent.SetPlaneConstraintOrigin // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x931c57c
	void SetPlaneConstraintNormal(struct FVector PlaneNormal); // Function Engine.MovementComponent.SetPlaneConstraintNormal // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x931c4e8
	void SetPlaneConstraintFromVectors(struct FVector Forward, struct FVector Up); // Function Engine.MovementComponent.SetPlaneConstraintFromVectors // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x931c3f8
	void SetPlaneConstraintEnabled(bool bEnabled); // Function Engine.MovementComponent.SetPlaneConstraintEnabled // (Native|Public|BlueprintCallable) // @ game+0x931c374
	void SetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting NewAxisSetting); // Function Engine.MovementComponent.SetPlaneConstraintAxisSetting // (Native|Public|BlueprintCallable) // @ game+0x931c2f0
	void PhysicsVolumeChanged(struct APhysicsVolume* NewVolume); // Function Engine.MovementComponent.PhysicsVolumeChanged // (Native|Public) // @ game+0xe74dbc
	bool K2_MoveUpdatedComponent(struct FVector Delta, struct FRotator NewRotation, struct FHitResult& OutHit, bool bSweep, bool bTeleport); // Function Engine.MovementComponent.K2_MoveUpdatedComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x931b6e0
	bool IsExceedingMaxSpeed(float MaxSpeed); // Function Engine.MovementComponent.IsExceedingMaxSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x931b644
	struct FVector GetPlaneConstraintOrigin(); // Function Engine.MovementComponent.GetPlaneConstraintOrigin // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x931b61c
	struct FVector GetPlaneConstraintNormal(); // Function Engine.MovementComponent.GetPlaneConstraintNormal // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x931b5f4
	enum class EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting(); // Function Engine.MovementComponent.GetPlaneConstraintAxisSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x931b5dc
	struct APhysicsVolume* GetPhysicsVolume(); // Function Engine.MovementComponent.GetPhysicsVolume // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x761e810
	float GetMaxSpeed(); // Function Engine.MovementComponent.GetMaxSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x931b5b0
	float GetGravityZ(); // Function Engine.MovementComponent.GetGravityZ // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x931b584
	struct FVector ConstrainNormalToPlane(struct FVector Normal); // Function Engine.MovementComponent.ConstrainNormalToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x931b4c4
	struct FVector ConstrainLocationToPlane(struct FVector Location); // Function Engine.MovementComponent.ConstrainLocationToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x931b404
	struct FVector ConstrainDirectionToPlane(struct FVector Direction); // Function Engine.MovementComponent.ConstrainDirectionToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x931b344
};

// Class Engine.ProjectileMovementComponent
// Size: 0x240 (Inherited: 0x108)
struct UProjectileMovementComponent : UMovementComponent {
	float InitialSpeed; // 0x108(0x04)
	float MaxSpeed; // 0x10c(0x04)
	char bRotationFollowsVelocity : 1; // 0x110(0x01)
	char bRotationRemainsVertical : 1; // 0x110(0x01)
	char bShouldBounce : 1; // 0x110(0x01)
	char bInitialVelocityInLocalSpace : 1; // 0x110(0x01)
	char bForceSubStepping : 1; // 0x110(0x01)
	char bSimulationEnabled : 1; // 0x110(0x01)
	char bSweepCollision : 1; // 0x110(0x01)
	char bIsHomingProjectile : 1; // 0x110(0x01)
	char bBounceAngleAffectsFriction : 1; // 0x111(0x01)
	char bIsSliding : 1; // 0x111(0x01)
	char bInterpMovement : 1; // 0x111(0x01)
	char bInterpRotation : 1; // 0x111(0x01)
	char pad_111_4 : 4; // 0x111(0x01)
	char pad_112[0x2]; // 0x112(0x02)
	float PreviousHitTime; // 0x114(0x04)
	struct FVector PreviousHitNormal; // 0x118(0x18)
	float ProjectileGravityScale; // 0x130(0x04)
	float Buoyancy; // 0x134(0x04)
	float Bounciness; // 0x138(0x04)
	float Friction; // 0x13c(0x04)
	float BounceVelocityStopSimulatingThreshold; // 0x140(0x04)
	float MinFrictionFraction; // 0x144(0x04)
	struct FMulticastInlineDelegate OnProjectileBounce; // 0x148(0x10)
	struct FMulticastInlineDelegate OnProjectileStop; // 0x158(0x10)
	float HomingAccelerationMagnitude; // 0x168(0x04)
	struct TWeakObjectPtr<struct USceneComponent> HomingTargetComponent; // 0x16c(0x08)
	float MaxSimulationTimeStep; // 0x174(0x04)
	int32_t MaxSimulationIterations; // 0x178(0x04)
	int32_t BounceAdditionalIterations; // 0x17c(0x04)
	float InterpLocationTime; // 0x180(0x04)
	float InterpRotationTime; // 0x184(0x04)
	float InterpLocationMaxLagDistance; // 0x188(0x04)
	float InterpLocationSnapToTargetDistance; // 0x18c(0x04)
	char pad_190[0xb0]; // 0x190(0xb0)

	void StopSimulating(struct FHitResult& HitResult); // Function Engine.ProjectileMovementComponent.StopSimulating // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2254050
	void SetVelocityInLocalSpace(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9337ad4
	void SetInterpolatedComponent(struct USceneComponent* Component); // Function Engine.ProjectileMovementComponent.SetInterpolatedComponent // (Native|Public|BlueprintCallable) // @ game+0x21250bc
	void ResetInterpolation(); // Function Engine.ProjectileMovementComponent.ResetInterpolation // (Native|Public|BlueprintCallable) // @ game+0x73eda74
	void OnProjectileStopDelegate__DelegateSignature(struct FHitResult& ImpactResult); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0xd67374
	void OnProjectileBounceDelegate__DelegateSignature(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0xd67374
	void MoveInterpolationTarget(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.ProjectileMovementComponent.MoveInterpolationTarget // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93376bc
	struct FVector LimitVelocity(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.LimitVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9337600
	bool IsVelocityUnderSimulationThreshold(); // Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93375ac
	bool IsInterpolationComplete(); // Function Engine.ProjectileMovementComponent.IsInterpolationComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933758c
};

// Class Engine.ChildActorComponent
// Size: 0x2e0 (Inherited: 0x2a0)
struct UChildActorComponent : USceneComponent {
	struct AActor* ChildActorClass; // 0x2a0(0x08)
	struct AActor* ChildActor; // 0x2a8(0x08)
	struct AActor* ChildActorTemplate; // 0x2b0(0x08)
	char pad_2B8[0x28]; // 0x2b8(0x28)

	void SetChildActorClass(struct AActor* InClass); // Function Engine.ChildActorComponent.SetChildActorClass // (Final|Native|Public|BlueprintCallable) // @ game+0x247cf14
};

// Class Engine.CameraActor
// Size: 0x980 (Inherited: 0x288)
struct ACameraActor : AActor {
	enum class EAutoReceiveInput AutoActivateForPlayer; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct UCameraComponent* CameraComponent; // 0x290(0x08)
	struct USceneComponent* SceneComponent; // 0x298(0x08)
	char bConstrainAspectRatio : 1; // 0x2a0(0x01)
	char pad_2A0_1 : 7; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	float AspectRatio; // 0x2a4(0x04)
	float FOVAngle; // 0x2a8(0x04)
	float PostProcessBlendWeight; // 0x2ac(0x04)
	struct FPostProcessSettings PostProcessSettings; // 0x2b0(0x6d0)

	int32_t GetAutoActivatePlayerIndex(); // Function Engine.CameraActor.GetAutoActivatePlayerIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9296d60
};

// Class Engine.ParticleSystem
// Size: 0x158 (Inherited: 0x30)
struct UParticleSystem : UFXSystemAsset {
	float UpdateTime_FPS; // 0x30(0x04)
	float UpdateTime_Delta; // 0x34(0x04)
	float WarmupTime; // 0x38(0x04)
	float WarmupTickRate; // 0x3c(0x04)
	struct TArray<struct UParticleEmitter*> Emitters; // 0x40(0x10)
	struct UParticleSystemComponent* PreviewComponent; // 0x50(0x08)
	struct UInterpCurveEdSetup* CurveEdSetup; // 0x58(0x08)
	float LODDistanceCheckTime; // 0x60(0x04)
	float MacroUVRadius; // 0x64(0x04)
	struct TArray<float> LODDistances; // 0x68(0x10)
	struct TArray<struct FParticleSystemLOD> LODSettings; // 0x78(0x10)
	struct FBox FixedRelativeBoundingBox; // 0x88(0x38)
	float SecondsBeforeInactive; // 0xc0(0x04)
	float Delay; // 0xc4(0x04)
	float DelayLow; // 0xc8(0x04)
	char bOrientZAxisTowardCamera : 1; // 0xcc(0x01)
	char bUseFixedRelativeBoundingBox : 1; // 0xcc(0x01)
	char bShouldResetPeakCounts : 1; // 0xcc(0x01)
	char bHasPhysics : 1; // 0xcc(0x01)
	char bUseRealtimeThumbnail : 1; // 0xcc(0x01)
	char ThumbnailImageOutOfDate : 1; // 0xcc(0x01)
	char pad_CC_6 : 2; // 0xcc(0x01)
	char bUseDelayRange : 1; // 0xcd(0x01)
	char bAllowManagedTicking : 1; // 0xcd(0x01)
	char bAutoDeactivate : 1; // 0xcd(0x01)
	char bRegenerateLODDuplicate : 1; // 0xcd(0x01)
	char pad_CD_4 : 4; // 0xcd(0x01)
	enum class EParticleSystemUpdateMode SystemUpdateMode; // 0xce(0x01)
	enum class ParticleSystemLODMethod LODMethod; // 0xcf(0x01)
	enum class EParticleSystemInsignificanceReaction InsignificantReaction; // 0xd0(0x01)
	enum class EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod; // 0xd1(0x01)
	char pad_D2[0x1]; // 0xd2(0x01)
	enum class EParticleSignificanceLevel MaxSignificanceLevel; // 0xd3(0x01)
	uint32_t MinTimeBetweenTicks; // 0xd4(0x04)
	float InsignificanceDelay; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
	struct FVector MacroUVPosition; // 0xe0(0x18)
	struct FBox CustomOcclusionBounds; // 0xf8(0x38)
	struct TArray<struct FLODSoloTrack> SoloTracking; // 0x130(0x10)
	struct TArray<struct FNamedEmitterMaterial> NamedMaterialSlots; // 0x140(0x10)
	char pad_150[0x8]; // 0x150(0x08)

	bool ContainsEmitterType(struct UObject* TypeData); // Function Engine.ParticleSystem.ContainsEmitterType // (Final|Native|Public|BlueprintCallable) // @ game+0x931d788
};

// Class Engine.ParticleModule
// Size: 0x30 (Inherited: 0x28)
struct UParticleModule : UObject {
	char bSpawnModule : 1; // 0x28(0x01)
	char bUpdateModule : 1; // 0x28(0x01)
	char bFinalUpdateModule : 1; // 0x28(0x01)
	char bUpdateForGPUEmitter : 1; // 0x28(0x01)
	char bCurvesAsColor : 1; // 0x28(0x01)
	char b3DDrawMode : 1; // 0x28(0x01)
	char bSupported3DDrawMode : 1; // 0x28(0x01)
	char bEnabled : 1; // 0x28(0x01)
	char bEditable : 1; // 0x29(0x01)
	char LODDuplicate : 1; // 0x29(0x01)
	char bSupportsRandomSeed : 1; // 0x29(0x01)
	char bRequiresLoopingNotification : 1; // 0x29(0x01)
	char pad_29_4 : 4; // 0x29(0x01)
	char LODValidity; // 0x2a(0x01)
	char pad_2B[0x5]; // 0x2b(0x05)
};

// Class Engine.SaveGame
// Size: 0x28 (Inherited: 0x28)
struct USaveGame : UObject {
};

// Class Engine.AnimNotify_PlaySound
// Size: 0x50 (Inherited: 0x38)
struct UAnimNotify_PlaySound : UAnimNotify {
	struct USoundBase* sound; // 0x38(0x08)
	float VolumeMultiplier; // 0x40(0x04)
	float PitchMultiplier; // 0x44(0x04)
	char bFollow : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FName AttachName; // 0x4c(0x04)
};

// Class Engine.AnimNotify_PlayParticleEffect
// Size: 0xc0 (Inherited: 0x38)
struct UAnimNotify_PlayParticleEffect : UAnimNotify {
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct FVector LocationOffset; // 0x40(0x18)
	struct FRotator RotationOffset; // 0x58(0x18)
	struct FVector Scale; // 0x70(0x18)
	char pad_88[0x28]; // 0x88(0x28)
	char Attached : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	struct FName SocketName; // 0xb4(0x04)
	char pad_B8[0x8]; // 0xb8(0x08)
};

// Class Engine.AssetManager
// Size: 0x4e8 (Inherited: 0x28)
struct UAssetManager : UObject {
	char pad_28[0x308]; // 0x28(0x308)
	struct TArray<struct UObject*> ObjectReferenceList; // 0x330(0x10)
	bool bIsGlobalAsyncScanEnvironment; // 0x340(0x01)
	bool bShouldGuessTypeAndName; // 0x341(0x01)
	bool bShouldUseSynchronousLoad; // 0x342(0x01)
	bool bIsLoadingFromPakFiles; // 0x343(0x01)
	bool bShouldAcquireMissingChunksOnLoad; // 0x344(0x01)
	bool bOnlyCookProductionAssets; // 0x345(0x01)
	char pad_346[0x2]; // 0x346(0x02)
	int32_t NumBulkScanRequests; // 0x348(0x04)
	bool bIsPrimaryAssetDirectoryCurrent; // 0x34c(0x01)
	bool bIsManagementDatabaseCurrent; // 0x34d(0x01)
	bool bUpdateManagementDatabaseAfterScan; // 0x34e(0x01)
	bool bIncludeOnlyOnDiskAssets; // 0x34f(0x01)
	bool bHasCompletedInitialScan; // 0x350(0x01)
	char pad_351[0x3]; // 0x351(0x03)
	int32_t NumberOfSpawnedNotifications; // 0x354(0x04)
	char pad_358[0x190]; // 0x358(0x190)
};

// Class Engine.StaticMeshActor
// Size: 0x298 (Inherited: 0x288)
struct AStaticMeshActor : AActor {
	struct UStaticMeshComponent* StaticMeshComponent; // 0x288(0x08)
	bool bStaticMeshReplicateMovement; // 0x290(0x01)
	enum class ENavDataGatheringMode NavigationGeometryGatheringMode; // 0x291(0x01)
	char pad_292[0x6]; // 0x292(0x06)

	void SetMobility(enum class EComponentMobility InMobility); // Function Engine.StaticMeshActor.SetMobility // (Final|Native|Public|BlueprintCallable) // @ game+0x935455c
};

// Class Engine.CurveBase
// Size: 0x30 (Inherited: 0x28)
struct UCurveBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	void GetValueRange(float& MinValue, float& MaxValue); // Function Engine.CurveBase.GetValueRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a7c58
	void GetTimeRange(float& MinTime, float& MaxTime); // Function Engine.CurveBase.GetTimeRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a7ae0
};

// Class Engine.CurveVector
// Size: 0x1b0 (Inherited: 0x30)
struct UCurveVector : UCurveBase {
	struct FRichCurve FloatCurves[0x3]; // 0x30(0x180)

	struct FVector GetVectorValue(float InTime); // Function Engine.CurveVector.GetVectorValue // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a9018
};

// Class Engine.AnimMetaData
// Size: 0x28 (Inherited: 0x28)
struct UAnimMetaData : UObject {
};

// Class Engine.Console
// Size: 0x130 (Inherited: 0x28)
struct UConsole : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct ULocalPlayer* ConsoleTargetPlayer; // 0x38(0x08)
	struct UTexture2D* DefaultTexture_Black; // 0x40(0x08)
	struct UTexture2D* DefaultTexture_White; // 0x48(0x08)
	char pad_50[0x18]; // 0x50(0x18)
	struct TArray<struct FString> HistoryBuffer; // 0x68(0x10)
	char pad_78[0xb8]; // 0x78(0xb8)
};

// Class Engine.DebugCameraController
// Size: 0x970 (Inherited: 0x7f8)
struct ADebugCameraController : APlayerController {
	char bShowSelectedInfo : 1; // 0x7f8(0x01)
	char bIsFrozenRendering : 1; // 0x7f8(0x01)
	char bIsOrbitingSelectedActor : 1; // 0x7f8(0x01)
	char bOrbitPivotUseCenter : 1; // 0x7f8(0x01)
	char bEnableBufferVisualization : 1; // 0x7f8(0x01)
	char bEnableBufferVisualizationFullMode : 1; // 0x7f8(0x01)
	char bIsBufferVisualizationInputSetup : 1; // 0x7f8(0x01)
	char bLastDisplayEnabled : 1; // 0x7f8(0x01)
	char pad_7F9[0x7]; // 0x7f9(0x07)
	struct UDrawFrustumComponent* DrawFrustum; // 0x800(0x08)
	struct TWeakObjectPtr<struct AActor> SelectedActor; // 0x808(0x08)
	struct TWeakObjectPtr<struct UPrimitiveComponent> SelectedComponent; // 0x810(0x08)
	struct FHitResult SelectedHitPoint; // 0x818(0xe0)
	struct APlayerController* OriginalControllerRef; // 0x8f8(0x08)
	struct UPlayer* OriginalPlayer; // 0x900(0x08)
	float SpeedScale; // 0x908(0x04)
	float InitialMaxSpeed; // 0x90c(0x04)
	float InitialAccel; // 0x910(0x04)
	float InitialDecel; // 0x914(0x04)
	char pad_918[0x58]; // 0x918(0x58)

	void ToggleDisplay(); // Function Engine.DebugCameraController.ToggleDisplay // (Final|Native|Public|BlueprintCallable) // @ game+0x92aab84
	void ShowDebugSelectedInfo(); // Function Engine.DebugCameraController.ShowDebugSelectedInfo // (Exec|Native|Public) // @ game+0x92aab6c
	void SetPawnMovementSpeedScale(float NewSpeedScale); // Function Engine.DebugCameraController.SetPawnMovementSpeedScale // (Final|Native|Public|BlueprintCallable) // @ game+0x92aaa58
	void ReceiveOnDeactivate(struct APlayerController* RestoredPC); // Function Engine.DebugCameraController.ReceiveOnDeactivate // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void ReceiveOnActorSelected(struct AActor* NewSelectedActor, struct FVector& SelectHitLocation, struct FVector& SelectHitNormal, struct FHitResult& Hit); // Function Engine.DebugCameraController.ReceiveOnActorSelected // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xd67374
	void ReceiveOnActivate(struct APlayerController* OriginalPC); // Function Engine.DebugCameraController.ReceiveOnActivate // (Event|Public|BlueprintEvent) // @ game+0xd67374
	struct AActor* GetSelectedActor(); // Function Engine.DebugCameraController.GetSelectedActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92aa350
};

// Class Engine.Emitter
// Size: 0x2d8 (Inherited: 0x288)
struct AEmitter : AActor {
	struct UParticleSystemComponent* ParticleSystemComponent; // 0x288(0x08)
	char bDestroyOnSystemFinish : 1; // 0x290(0x01)
	char bPostUpdateTickGroup : 1; // 0x290(0x01)
	char bCurrentlyActive : 1; // 0x290(0x01)
	char pad_290_3 : 5; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x298(0x10)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x2b8(0x10)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x2c8(0x10)

	void ToggleActive(); // Function Engine.Emitter.ToggleActive // (Final|Native|Public|BlueprintCallable) // @ game+0x92aed00
	void SetVectorParameter(struct FName ParameterName, struct FVector Param); // Function Engine.Emitter.SetVectorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92aec28
	void SetTemplate(struct UParticleSystem* NewTemplate); // Function Engine.Emitter.SetTemplate // (Native|Public|BlueprintCallable) // @ game+0x671fe14
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface* Param); // Function Engine.Emitter.SetMaterialParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x92aeb64
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.Emitter.SetFloatParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x92aea98
	void SetColorParameter(struct FName ParameterName, struct FLinearColor Param); // Function Engine.Emitter.SetColorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92ae9cc
	void SetActorParameter(struct FName ParameterName, struct AActor* Param); // Function Engine.Emitter.SetActorParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x92ae904
	void OnRep_bCurrentlyActive(); // Function Engine.Emitter.OnRep_bCurrentlyActive // (Native|Public) // @ game+0xfe5030
	void OnParticleSystemFinished(struct UParticleSystemComponent* FinishedComponent); // Function Engine.Emitter.OnParticleSystemFinished // (Native|Public) // @ game+0x25098ec
	bool IsActive(); // Function Engine.Emitter.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92ae8d4
	void Deactivate(); // Function Engine.Emitter.Deactivate // (Final|Native|Public|BlueprintCallable) // @ game+0x92ae8a0
	void Activate(); // Function Engine.Emitter.Activate // (Final|Native|Public|BlueprintCallable) // @ game+0x92ae88c
};

// Class Engine.EmitterCameraLensEffectBase
// Size: 0x370 (Inherited: 0x2d8)
struct AEmitterCameraLensEffectBase : AEmitter {
	char pad_2D8[0x8]; // 0x2d8(0x08)
	struct UParticleSystem* PS_CameraEffect; // 0x2e0(0x08)
	struct APlayerCameraManager* BaseCamera; // 0x2e8(0x08)
	struct FTransform RelativeTransform; // 0x2f0(0x60)
	float BaseFOV; // 0x350(0x04)
	char bAllowMultipleInstances : 1; // 0x354(0x01)
	char bResetWhenRetriggered : 1; // 0x354(0x01)
	char pad_354_2 : 6; // 0x354(0x01)
	char pad_355[0x3]; // 0x355(0x03)
	struct TArray<struct AActor*> EmittersToTreatAsSame; // 0x358(0x10)
	float DistFromCamera; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)
};

// Class Engine.GameEngine
// Size: 0xf40 (Inherited: 0xee8)
struct UGameEngine : UEngine {
	float MaxDeltaTime; // 0xee8(0x04)
	float ServerFlushLogInterval; // 0xeec(0x04)
	struct UGameInstance* GameInstance; // 0xef0(0x08)
	char pad_EF8[0x48]; // 0xef8(0x48)
};

// Class Engine.GameModeBase
// Size: 0x328 (Inherited: 0x288)
struct AGameModeBase : AInfo {
	struct FString OptionsString; // 0x288(0x10)
	struct AGameSession* GameSessionClass; // 0x298(0x08)
	struct AGameStateBase* GameStateClass; // 0x2a0(0x08)
	struct APlayerController* PlayerControllerClass; // 0x2a8(0x08)
	struct APlayerState* PlayerStateClass; // 0x2b0(0x08)
	struct AHUD* HUDClass; // 0x2b8(0x08)
	struct APawn* DefaultPawnClass; // 0x2c0(0x08)
	struct ASpectatorPawn* SpectatorClass; // 0x2c8(0x08)
	struct APlayerController* ReplaySpectatorPlayerControllerClass; // 0x2d0(0x08)
	struct AServerStatReplicator* ServerStatReplicatorClass; // 0x2d8(0x08)
	struct AGameSession* GameSession; // 0x2e0(0x08)
	struct AGameStateBase* GameState; // 0x2e8(0x08)
	struct AServerStatReplicator* ServerStatReplicator; // 0x2f0(0x08)
	struct FText DefaultPlayerName; // 0x2f8(0x18)
	char bUseSeamlessTravel : 1; // 0x310(0x01)
	char bStartPlayersAsSpectators : 1; // 0x310(0x01)
	char bPauseable : 1; // 0x310(0x01)
	char pad_310_3 : 5; // 0x310(0x01)
	char pad_311[0x17]; // 0x311(0x17)

	void StartPlay(); // Function Engine.GameModeBase.StartPlay // (Native|Public|BlueprintCallable) // @ game+0x1de3730
	struct APawn* SpawnDefaultPawnFor(struct AController* NewPlayer, struct AActor* StartSpot); // Function Engine.GameModeBase.SpawnDefaultPawnFor // (Native|Event|Public|BlueprintEvent) // @ game+0x92bae34
	struct APawn* SpawnDefaultPawnAtTransform(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.SpawnDefaultPawnAtTransform // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x73ca984
	bool ShouldReset(struct AActor* ActorToReset); // Function Engine.GameModeBase.ShouldReset // (Native|Event|Public|BlueprintEvent) // @ game+0x92ba928
	void ReturnToMainMenuHost(); // Function Engine.GameModeBase.ReturnToMainMenuHost // (Native|Public|BlueprintCallable) // @ game+0x609534c
	void RestartPlayerAtTransform(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.RestartPlayerAtTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92b9274
	void RestartPlayerAtPlayerStart(struct AController* NewPlayer, struct AActor* StartSpot); // Function Engine.GameModeBase.RestartPlayerAtPlayerStart // (Native|Public|BlueprintCallable) // @ game+0x92b91ac
	void RestartPlayer(struct AController* NewPlayer); // Function Engine.GameModeBase.RestartPlayer // (Native|Public|BlueprintCallable) // @ game+0x92b9128
	void ResetLevel(); // Function Engine.GameModeBase.ResetLevel // (Native|Public|BlueprintCallable) // @ game+0x2d0c3ec
	bool PlayerCanRestart(struct APlayerController* Player); // Function Engine.GameModeBase.PlayerCanRestart // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x26b0df8
	bool MustSpectate(struct APlayerController* NewPlayerController); // Function Engine.GameModeBase.MustSpectate // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x255d53c
	void K2_PostLogin(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.K2_PostLogin // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void K2_OnSwapPlayerControllers(struct APlayerController* OldPC, struct APlayerController* NewPC); // Function Engine.GameModeBase.K2_OnSwapPlayerControllers // (Event|Protected|BlueprintEvent) // @ game+0xd67374
	void K2_OnRestartPlayer(struct AController* NewPlayer); // Function Engine.GameModeBase.K2_OnRestartPlayer // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void K2_OnLogout(struct AController* ExitingController); // Function Engine.GameModeBase.K2_OnLogout // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void K2_OnChangeName(struct AController* Other, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.K2_OnChangeName // (Event|Public|BlueprintEvent) // @ game+0xd67374
	struct AActor* K2_FindPlayerStart(struct AController* Player, struct FString IncomingName); // Function Engine.GameModeBase.K2_FindPlayerStart // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b6e24
	void InitStartSpot(struct AActor* StartSpot, struct AController* NewPlayer); // Function Engine.GameModeBase.InitStartSpot // (Native|Event|Public|BlueprintEvent) // @ game+0x745865c
	void InitializeHUDForPlayer(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.InitializeHUDForPlayer // (Native|Event|Protected|BlueprintEvent) // @ game+0x25098ec
	bool HasMatchStarted(); // Function Engine.GameModeBase.HasMatchStarted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a7d30
	bool HasMatchEnded(); // Function Engine.GameModeBase.HasMatchEnded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92b6a24
	void HandleStartingNewPlayer(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.HandleStartingNewPlayer // (Native|Event|Public|BlueprintEvent) // @ game+0x27723dc
	int32_t GetNumSpectators(); // Function Engine.GameModeBase.GetNumSpectators // (Native|Public|BlueprintCallable) // @ game+0x92b5cf4
	int32_t GetNumPlayers(); // Function Engine.GameModeBase.GetNumPlayers // (Native|Public|BlueprintCallable) // @ game+0x227bec8
	struct UObject* GetDefaultPawnClassForController(struct AController* InController); // Function Engine.GameModeBase.GetDefaultPawnClassForController // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x92b5248
	struct AActor* FindPlayerStart(struct AController* Player, struct FString IncomingName); // Function Engine.GameModeBase.FindPlayerStart // (Native|Event|Public|BlueprintEvent) // @ game+0x26f4f00
	struct AActor* ChoosePlayerStart(struct AController* Player); // Function Engine.GameModeBase.ChoosePlayerStart // (Native|Event|Public|BlueprintEvent) // @ game+0x275f7cc
	void ChangeName(struct AController* Controller, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.ChangeName // (Native|Public|BlueprintCallable) // @ game+0x92b347c
	bool CanSpectate(struct APlayerController* Viewer, struct APlayerState* ViewTarget); // Function Engine.GameModeBase.CanSpectate // (Native|Event|Public|BlueprintEvent) // @ game+0x92b339c
};

// Class Engine.GameMode
// Size: 0x370 (Inherited: 0x328)
struct AGameMode : AGameModeBase {
	struct FName MatchState; // 0x328(0x04)
	char bDelayedStart : 1; // 0x32c(0x01)
	char pad_32C_1 : 7; // 0x32c(0x01)
	char pad_32D[0x3]; // 0x32d(0x03)
	int32_t NumSpectators; // 0x330(0x04)
	int32_t NumPlayers; // 0x334(0x04)
	int32_t NumBots; // 0x338(0x04)
	float MinRespawnDelay; // 0x33c(0x04)
	int32_t NumTravellingPlayers; // 0x340(0x04)
	char pad_344[0x4]; // 0x344(0x04)
	struct ULocalMessage* EngineMessageClass; // 0x348(0x08)
	struct TArray<struct APlayerState*> InactivePlayerArray; // 0x350(0x10)
	float InactivePlayerStateLifeSpan; // 0x360(0x04)
	int32_t MaxInactivePlayers; // 0x364(0x04)
	bool bHandleDedicatedServerReplays; // 0x368(0x01)
	char pad_369[0x7]; // 0x369(0x07)

	void StartMatch(); // Function Engine.GameMode.StartMatch // (Native|Public|BlueprintCallable) // @ game+0x2d0c404
	void Say(struct FString Msg); // Function Engine.GameMode.Say // (Exec|Native|Public|BlueprintCallable) // @ game+0x92b9570
	void RestartGame(); // Function Engine.GameMode.RestartGame // (Native|Public|BlueprintCallable) // @ game+0x240b224
	bool ReadyToStartMatch(); // Function Engine.GameMode.ReadyToStartMatch // (Native|Event|Protected|BlueprintEvent) // @ game+0x1cea5cc
	bool ReadyToEndMatch(); // Function Engine.GameMode.ReadyToEndMatch // (Native|Event|Protected|BlueprintEvent) // @ game+0x1f46990
	void K2_OnSetMatchState(struct FName NewState); // Function Engine.GameMode.K2_OnSetMatchState // (Event|Protected|BlueprintEvent) // @ game+0xd67374
	bool IsMatchInProgress(); // Function Engine.GameMode.IsMatchInProgress // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92b6d5c
	struct FName GetMatchState(); // Function Engine.GameMode.GetMatchState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92b5a98
	void EndMatch(); // Function Engine.GameMode.EndMatch // (Native|Public|BlueprintCallable) // @ game+0x275e884
	void AbortMatch(); // Function Engine.GameMode.AbortMatch // (Native|Public|BlueprintCallable) // @ game+0x92b1358
};

// Class Engine.GameSession
// Size: 0x2a0 (Inherited: 0x288)
struct AGameSession : AInfo {
	int32_t MaxSpectators; // 0x288(0x04)
	int32_t MaxPlayers; // 0x28c(0x04)
	int32_t MaxPartySize; // 0x290(0x04)
	char MaxSplitscreensPerConnection; // 0x294(0x01)
	bool bRequiresPushToTalk; // 0x295(0x01)
	char pad_296[0x2]; // 0x296(0x02)
	struct FName SessionName; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
};

// Class Engine.GameStateBase
// Size: 0x2d8 (Inherited: 0x288)
struct AGameStateBase : AInfo {
	struct AGameModeBase* GameModeClass; // 0x288(0x08)
	struct AGameModeBase* AuthorityGameMode; // 0x290(0x08)
	struct ASpectatorPawn* SpectatorClass; // 0x298(0x08)
	struct TArray<struct APlayerState*> PlayerArray; // 0x2a0(0x10)
	bool bReplicatedHasBegunPlay; // 0x2b0(0x01)
	char pad_2B1[0x3]; // 0x2b1(0x03)
	float ReplicatedWorldTimeSeconds; // 0x2b4(0x04)
	float ServerWorldTimeSecondsDelta; // 0x2b8(0x04)
	float ServerWorldTimeSecondsUpdateFrequency; // 0x2bc(0x04)
	char pad_2C0[0x18]; // 0x2c0(0x18)

	void OnRep_SpectatorClass(); // Function Engine.GameStateBase.OnRep_SpectatorClass // (Native|Protected) // @ game+0x26fd570
	void OnRep_ReplicatedWorldTimeSeconds(); // Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds // (Native|Protected) // @ game+0x1de3730
	void OnRep_ReplicatedHasBegunPlay(); // Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay // (Native|Protected) // @ game+0x2adb844
	void OnRep_GameModeClass(); // Function Engine.GameStateBase.OnRep_GameModeClass // (Native|Protected) // @ game+0x2c00e0c
	bool HasMatchStarted(); // Function Engine.GameStateBase.HasMatchStarted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x6551090
	bool HasMatchEnded(); // Function Engine.GameStateBase.HasMatchEnded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x287a0cc
	bool HasBegunPlay(); // Function Engine.GameStateBase.HasBegunPlay // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x761ccc0
	float GetServerWorldTimeSeconds(); // Function Engine.GameStateBase.GetServerWorldTimeSeconds // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29d2e4c
	float GetPlayerStartTime(struct AController* Controller); // Function Engine.GameStateBase.GetPlayerStartTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bce1c
	float GetPlayerRespawnDelay(struct AController* Controller); // Function Engine.GameStateBase.GetPlayerRespawnDelay // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bcd88
};

// Class Engine.GameState
// Size: 0x2f0 (Inherited: 0x2d8)
struct AGameState : AGameStateBase {
	struct FName MatchState; // 0x2d8(0x04)
	struct FName PreviousMatchState; // 0x2dc(0x04)
	int32_t ElapsedTime; // 0x2e0(0x04)
	char pad_2E4[0xc]; // 0x2e4(0x0c)

	void OnRep_MatchState(); // Function Engine.GameState.OnRep_MatchState // (Native|Public) // @ game+0x16cf67c
	void OnRep_ElapsedTime(); // Function Engine.GameState.OnRep_ElapsedTime // (Native|Public) // @ game+0x2d0c3ec
};

// Class Engine.GameUserSettings
// Size: 0x148 (Inherited: 0x28)
struct UGameUserSettings : UObject {
	bool bUseVSync; // 0x28(0x01)
	bool bUseDynamicResolution; // 0x29(0x01)
	char pad_2A[0x5e]; // 0x2a(0x5e)
	uint32_t ResolutionSizeX; // 0x88(0x04)
	uint32_t ResolutionSizeY; // 0x8c(0x04)
	uint32_t LastUserConfirmedResolutionSizeX; // 0x90(0x04)
	uint32_t LastUserConfirmedResolutionSizeY; // 0x94(0x04)
	int32_t WindowPosX; // 0x98(0x04)
	int32_t WindowPosY; // 0x9c(0x04)
	int32_t FullscreenMode; // 0xa0(0x04)
	int32_t LastConfirmedFullscreenMode; // 0xa4(0x04)
	int32_t PreferredFullscreenMode; // 0xa8(0x04)
	uint32_t Version; // 0xac(0x04)
	int32_t AudioQualityLevel; // 0xb0(0x04)
	int32_t LastConfirmedAudioQualityLevel; // 0xb4(0x04)
	float FrameRateLimit; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	int32_t DesiredScreenWidth; // 0xc0(0x04)
	bool bUseDesiredScreenHeight; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	int32_t DesiredScreenHeight; // 0xc8(0x04)
	int32_t LastUserConfirmedDesiredScreenWidth; // 0xcc(0x04)
	int32_t LastUserConfirmedDesiredScreenHeight; // 0xd0(0x04)
	float LastRecommendedScreenWidth; // 0xd4(0x04)
	float LastRecommendedScreenHeight; // 0xd8(0x04)
	float LastCPUBenchmarkResult; // 0xdc(0x04)
	float LastGPUBenchmarkResult; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct TArray<float> LastCPUBenchmarkSteps; // 0xe8(0x10)
	struct TArray<float> LastGPUBenchmarkSteps; // 0xf8(0x10)
	float LastGPUBenchmarkMultiplier; // 0x108(0x04)
	bool bUseHDRDisplayOutput; // 0x10c(0x01)
	char pad_10D[0x3]; // 0x10d(0x03)
	int32_t HDRDisplayOutputNits; // 0x110(0x04)
	char pad_114[0x24]; // 0x114(0x24)
	struct FMulticastInlineDelegate OnGameUserSettingsUINeedsUpdate; // 0x138(0x10)

	void ValidateSettings(); // Function Engine.GameUserSettings.ValidateSettings // (Native|Public|BlueprintCallable) // @ game+0x1e84bf4
	bool SupportsHDRDisplayOutput(); // Function Engine.GameUserSettings.SupportsHDRDisplayOutput // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x74b30dc
	void SetVSyncEnabled(bool bEnable); // Function Engine.GameUserSettings.SetVSyncEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x92bdd00
	void SetVisualEffectQuality(int32_t Value); // Function Engine.GameUserSettings.SetVisualEffectQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x92bddfc
	void SetViewDistanceQuality(int32_t Value); // Function Engine.GameUserSettings.SetViewDistanceQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x92bdd7c
	void SetToDefaults(); // Function Engine.GameUserSettings.SetToDefaults // (Native|Public|BlueprintCallable) // @ game+0x12f1cf0
	void SetTextureQuality(int32_t Value); // Function Engine.GameUserSettings.SetTextureQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x92bdc80
	void SetShadowQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadowQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x92bdc00
	void SetShadingQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x92bdb80
	void SetScreenResolution(struct FIntPoint Resolution); // Function Engine.GameUserSettings.SetScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92bdb04
	void SetResolutionScaleValueEx(float NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValueEx // (Final|Native|Public|BlueprintCallable) // @ game+0x92bda80
	void SetResolutionScaleValue(int32_t NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValue // (Final|Native|Public|BlueprintCallable) // @ game+0x92bd9fc
	void SetResolutionScaleNormalized(float NewScaleNormalized); // Function Engine.GameUserSettings.SetResolutionScaleNormalized // (Final|Native|Public|BlueprintCallable) // @ game+0x92bd960
	void SetReflectionQuality(int32_t Value); // Function Engine.GameUserSettings.SetReflectionQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x92bd8e0
	void SetPostProcessingQuality(int32_t Value); // Function Engine.GameUserSettings.SetPostProcessingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x92bd860
	void SetOverallScalabilityLevel(int32_t Value); // Function Engine.GameUserSettings.SetOverallScalabilityLevel // (Native|Public|BlueprintCallable) // @ game+0x92bd7dc
	void SetGlobalIlluminationQuality(int32_t Value); // Function Engine.GameUserSettings.SetGlobalIlluminationQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x92bd75c
	void SetFullscreenMode(enum class EWindowMode InFullscreenMode); // Function Engine.GameUserSettings.SetFullscreenMode // (Final|Native|Public|BlueprintCallable) // @ game+0x92bd6dc
	void SetFrameRateLimit(float NewLimit); // Function Engine.GameUserSettings.SetFrameRateLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x92bd658
	void SetFoliageQuality(int32_t Value); // Function Engine.GameUserSettings.SetFoliageQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x92bd5d8
	void SetDynamicResolutionEnabled(bool bEnable); // Function Engine.GameUserSettings.SetDynamicResolutionEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x92bd55c
	void SetBenchmarkFallbackValues(); // Function Engine.GameUserSettings.SetBenchmarkFallbackValues // (Final|Native|Public|BlueprintCallable) // @ game+0x92bd544
	void SetAudioQualityLevel(int32_t QualityLevel); // Function Engine.GameUserSettings.SetAudioQualityLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x92bd4c4
	void SetAntiAliasingQuality(int32_t Value); // Function Engine.GameUserSettings.SetAntiAliasingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x92bd444
	void SaveSettings(); // Function Engine.GameUserSettings.SaveSettings // (Native|Public|BlueprintCallable) // @ game+0x5c90d54
	void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier); // Function Engine.GameUserSettings.RunHardwareBenchmark // (Native|Public|BlueprintCallable) // @ game+0x92bd348
	void RevertVideoMode(); // Function Engine.GameUserSettings.RevertVideoMode // (Final|Native|Public|BlueprintCallable) // @ game+0x92bd314
	void ResetToCurrentSettings(); // Function Engine.GameUserSettings.ResetToCurrentSettings // (Native|Public|BlueprintCallable) // @ game+0x5c90d6c
	void LoadSettings(bool bForceReload); // Function Engine.GameUserSettings.LoadSettings // (Native|Public|BlueprintCallable) // @ game+0x9297a70
	bool IsVSyncEnabled(); // Function Engine.GameUserSettings.IsVSyncEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29ee890
	bool IsVSyncDirty(); // Function Engine.GameUserSettings.IsVSyncDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bd2f0
	bool IsScreenResolutionDirty(); // Function Engine.GameUserSettings.IsScreenResolutionDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bd2d0
	bool IsHDREnabled(); // Function Engine.GameUserSettings.IsHDREnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x633dd48
	bool IsFullscreenModeDirty(); // Function Engine.GameUserSettings.IsFullscreenModeDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bd2ac
	bool IsDynamicResolutionEnabled(); // Function Engine.GameUserSettings.IsDynamicResolutionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x284bc7c
	bool IsDynamicResolutionDirty(); // Function Engine.GameUserSettings.IsDynamicResolutionDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bd288
	bool IsDirty(); // Function Engine.GameUserSettings.IsDirty // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x74b2ee4
	int32_t GetVisualEffectQuality(); // Function Engine.GameUserSettings.GetVisualEffectQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f0244
	int32_t GetViewDistanceQuality(); // Function Engine.GameUserSettings.GetViewDistanceQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29ee8bc
	int32_t GetTextureQuality(); // Function Engine.GameUserSettings.GetTextureQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29ee8d0
	int32_t GetSyncInterval(); // Function Engine.GameUserSettings.GetSyncInterval // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92bd264
	int32_t GetShadowQuality(); // Function Engine.GameUserSettings.GetShadowQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x267a9e8
	int32_t GetShadingQuality(); // Function Engine.GameUserSettings.GetShadingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x7137138
	struct FIntPoint GetScreenResolution(); // Function Engine.GameUserSettings.GetScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bd240
	float GetResolutionScaleNormalized(); // Function Engine.GameUserSettings.GetResolutionScaleNormalized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bd20c
	void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformationEx // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bd074
	void GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformation // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bcecc
	int32_t GetReflectionQuality(); // Function Engine.GameUserSettings.GetReflectionQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x7137160
	float GetRecommendedResolutionScale(); // Function Engine.GameUserSettings.GetRecommendedResolutionScale // (Native|Public|BlueprintCallable) // @ game+0x648e2a8
	enum class EWindowMode GetPreferredFullscreenMode(); // Function Engine.GameUserSettings.GetPreferredFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bceb0
	int32_t GetPostProcessingQuality(); // Function Engine.GameUserSettings.GetPostProcessingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29ee8e4
	int32_t GetOverallScalabilityLevel(); // Function Engine.GameUserSettings.GetOverallScalabilityLevel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bcd60
	struct FIntPoint GetLastConfirmedScreenResolution(); // Function Engine.GameUserSettings.GetLastConfirmedScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bcd3c
	enum class EWindowMode GetLastConfirmedFullscreenMode(); // Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bcd10
	int32_t GetGlobalIlluminationQuality(); // Function Engine.GameUserSettings.GetGlobalIlluminationQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x7137124
	struct UGameUserSettings* GetGameUserSettings(); // Function Engine.GameUserSettings.GetGameUserSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2198f18
	enum class EWindowMode GetFullscreenMode(); // Function Engine.GameUserSettings.GetFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x14896a4
	float GetFrameRateLimit(); // Function Engine.GameUserSettings.GetFrameRateLimit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29ee8a4
	int32_t GetFramePace(); // Function Engine.GameUserSettings.GetFramePace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92bccec
	int32_t GetFoliageQuality(); // Function Engine.GameUserSettings.GetFoliageQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x713714c
	struct FIntPoint GetDesktopResolution(); // Function Engine.GameUserSettings.GetDesktopResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bccbc
	struct FIntPoint GetDefaultWindowPosition(); // Function Engine.GameUserSettings.GetDefaultWindowPosition // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x92bcca4
	enum class EWindowMode GetDefaultWindowMode(); // Function Engine.GameUserSettings.GetDefaultWindowMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2524684
	float GetDefaultResolutionScale(); // Function Engine.GameUserSettings.GetDefaultResolutionScale // (Native|Public|BlueprintCallable) // @ game+0x92bcc78
	struct FIntPoint GetDefaultResolution(); // Function Engine.GameUserSettings.GetDefaultResolution // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x92bcc58
	int32_t GetCurrentHDRDisplayNits(); // Function Engine.GameUserSettings.GetCurrentHDRDisplayNits // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92bcc30
	int32_t GetAudioQualityLevel(); // Function Engine.GameUserSettings.GetAudioQualityLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29eed64
	int32_t GetAntiAliasingQuality(); // Function Engine.GameUserSettings.GetAntiAliasingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5f34a3c
	void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits); // Function Engine.GameUserSettings.EnableHDRDisplayOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x92bcb6c
	void ConfirmVideoMode(); // Function Engine.GameUserSettings.ConfirmVideoMode // (Native|Public|BlueprintCallable) // @ game+0x18168e4
	void ApplySettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplySettings // (Native|Public|BlueprintCallable) // @ game+0x92bcae8
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplyResolutionSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x92bca68
	void ApplyNonResolutionSettings(); // Function Engine.GameUserSettings.ApplyNonResolutionSettings // (Native|Public|BlueprintCallable) // @ game+0x67ce468
	void ApplyHardwareBenchmarkResults(); // Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults // (Native|Public|BlueprintCallable) // @ game+0x92a1f4c
};

// Class Engine.AudioComponent
// Size: 0xb10 (Inherited: 0x2a0)
struct UAudioComponent : USceneComponent {
	char pad_2A0[0x198]; // 0x2a0(0x198)
	struct USoundBase* sound; // 0x438(0x08)
	struct TArray<struct FAudioParameter> DefaultParameters; // 0x440(0x10)
	struct TArray<struct FAudioParameter> InstanceParameters; // 0x450(0x10)
	struct USoundClass* SoundClassOverride; // 0x460(0x08)
	char bAutoDestroy : 1; // 0x468(0x01)
	char bStopWhenOwnerDestroyed : 1; // 0x468(0x01)
	char bShouldRemainActiveIfDropped : 1; // 0x468(0x01)
	char bAllowSpatialization : 1; // 0x468(0x01)
	char bOverrideAttenuation : 1; // 0x468(0x01)
	char bOverrideSubtitlePriority : 1; // 0x468(0x01)
	char bIsUISound : 1; // 0x468(0x01)
	char bEnableLowPassFilter : 1; // 0x468(0x01)
	char bOverridePriority : 1; // 0x469(0x01)
	char bSuppressSubtitles : 1; // 0x469(0x01)
	char bCanPlayMultipleInstances : 1; // 0x469(0x01)
	char bDisableParameterUpdatesWhilePlaying : 1; // 0x469(0x01)
	char pad_469_4 : 4; // 0x469(0x01)
	char pad_46A_0 : 6; // 0x46a(0x01)
	char bAutoManageAttachment : 1; // 0x46a(0x01)
	char pad_46A_7 : 1; // 0x46a(0x01)
	char pad_46B[0x5]; // 0x46b(0x05)
	struct FName AudioComponentUserID; // 0x470(0x04)
	float PitchModulationMin; // 0x474(0x04)
	float PitchModulationMax; // 0x478(0x04)
	float VolumeModulationMin; // 0x47c(0x04)
	float VolumeModulationMax; // 0x480(0x04)
	float VolumeMultiplier; // 0x484(0x04)
	int32_t EnvelopeFollowerAttackTime; // 0x488(0x04)
	int32_t EnvelopeFollowerReleaseTime; // 0x48c(0x04)
	float Priority; // 0x490(0x04)
	float SubtitlePriority; // 0x494(0x04)
	struct USoundEffectSourcePresetChain* SourceEffectChain; // 0x498(0x08)
	float PitchMultiplier; // 0x4a0(0x04)
	float LowPassFilterFrequency; // 0x4a4(0x04)
	char pad_4A8[0x8]; // 0x4a8(0x08)
	struct USoundAttenuation* AttenuationSettings; // 0x4b0(0x08)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x4b8(0x3b8)
	struct USoundConcurrency* ConcurrencySettings; // 0x870(0x08)
	struct TSet<struct USoundConcurrency*> ConcurrencySet; // 0x878(0x50)
	char pad_8C8[0xc]; // 0x8c8(0x0c)
	enum class EAttachmentRule AutoAttachLocationRule; // 0x8d4(0x01)
	enum class EAttachmentRule AutoAttachRotationRule; // 0x8d5(0x01)
	enum class EAttachmentRule AutoAttachScaleRule; // 0x8d6(0x01)
	char pad_8D7[0x1]; // 0x8d7(0x01)
	struct FSoundModulationDefaultRoutingSettings ModulationRouting; // 0x8d8(0x48)
	struct FMulticastInlineDelegate OnAudioPlayStateChanged; // 0x920(0x10)
	char pad_930[0x18]; // 0x930(0x18)
	struct FMulticastInlineDelegate OnAudioVirtualizationChanged; // 0x948(0x10)
	char pad_958[0x18]; // 0x958(0x18)
	struct FMulticastInlineDelegate OnAudioFinished; // 0x970(0x10)
	char pad_980[0x18]; // 0x980(0x18)
	struct FMulticastInlineDelegate OnAudioPlaybackPercent; // 0x998(0x10)
	char pad_9A8[0x18]; // 0x9a8(0x18)
	struct FMulticastInlineDelegate OnAudioSingleEnvelopeValue; // 0x9c0(0x10)
	char pad_9D0[0x18]; // 0x9d0(0x18)
	struct FMulticastInlineDelegate OnAudioMultiEnvelopeValue; // 0x9e8(0x10)
	char pad_9F8[0x18]; // 0x9f8(0x18)
	struct FDelegate OnQueueSubtitles; // 0xa10(0x0c)
	char pad_A1C[0x14]; // 0xa1c(0x14)
	struct TWeakObjectPtr<struct USceneComponent> AutoAttachParent; // 0xa30(0x08)
	struct FName AutoAttachSocketName; // 0xa38(0x04)
	char pad_A3C[0xd4]; // 0xa3c(0xd4)

	void StopDelayed(float DelayTime); // Function Engine.AudioComponent.StopDelayed // (Final|Native|Public|BlueprintCallable) // @ game+0x928b26c
	void Stop(); // Function Engine.AudioComponent.Stop // (Native|Public|BlueprintCallable) // @ game+0x2804f40
	void SetWaveParameter(struct FName InName, struct USoundWave* InWave); // Function Engine.AudioComponent.SetWaveParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x2283cf0
	void SetVolumeMultiplier(float NewVolumeMultiplier); // Function Engine.AudioComponent.SetVolumeMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x928b1e8
	void SetUISound(bool bInUISound); // Function Engine.AudioComponent.SetUISound // (Final|Native|Public|BlueprintCallable) // @ game+0x928b100
	void SetSubmixSend(struct USoundSubmixBase* Submix, float SendLevel); // Function Engine.AudioComponent.SetSubmixSend // (Final|Native|Public|BlueprintCallable) // @ game+0x18c90b4
	void SetSourceBusSendPreEffect(struct USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPreEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x928b038
	void SetSourceBusSendPostEffect(struct USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPostEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x928af68
	void SetSound(struct USoundBase* NewSound); // Function Engine.AudioComponent.SetSound // (Final|Native|Public|BlueprintCallable) // @ game+0x2348fa0
	void SetPitchMultiplier(float NewPitchMultiplier); // Function Engine.AudioComponent.SetPitchMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x2b605ac
	void SetPaused(bool bPause); // Function Engine.AudioComponent.SetPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x928ae00
	void SetOutputToBusOnly(bool bInOutputToBusOnly); // Function Engine.AudioComponent.SetOutputToBusOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x928ad80
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency); // Function Engine.AudioComponent.SetLowPassFilterFrequency // (Final|Native|Public|BlueprintCallable) // @ game+0x928acfc
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled); // Function Engine.AudioComponent.SetLowPassFilterEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x928ac7c
	void SetIntParameter(struct FName InName, int32_t inInt); // Function Engine.AudioComponent.SetIntParameter // (Native|Public|BlueprintCallable) // @ game+0x19fd4b8
	void SetFloatParameter(struct FName InName, float InFloat); // Function Engine.AudioComponent.SetFloatParameter // (Native|Public|BlueprintCallable) // @ game+0x20cb4a8
	void SetBoolParameter(struct FName InName, bool InBool); // Function Engine.AudioComponent.SetBoolParameter // (Native|Public|BlueprintCallable) // @ game+0x19fc568
	void SetAudioBusSendPreEffect(struct UAudioBus* AudioBus, float AudioBusSendLevel); // Function Engine.AudioComponent.SetAudioBusSendPreEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x928ab54
	void SetAudioBusSendPostEffect(struct UAudioBus* AudioBus, float AudioBusSendLevel); // Function Engine.AudioComponent.SetAudioBusSendPostEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x928aa84
	void PlayQuantized(struct UObject* WorldContextObject, struct UQuartzClockHandle*& InClockHandle, struct FQuartzQuantizationBoundary& InQuantizationBoundary, struct FDelegate& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum class EAudioFaderCurve InFadeCurve); // Function Engine.AudioComponent.PlayQuantized // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x15da3e8
	void Play(float StartTime); // Function Engine.AudioComponent.Play // (Native|Public|BlueprintCallable) // @ game+0x22bc3d4
	bool IsVirtualized(); // Function Engine.AudioComponent.IsVirtualized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x928aa68
	bool IsPlaying(); // Function Engine.AudioComponent.IsPlaying // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2435028
	bool HasCookedFFTData(); // Function Engine.AudioComponent.HasCookedFFTData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x928a994
	bool HasCookedAmplitudeEnvelopeData(); // Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x928a970
	enum class EAudioComponentPlayState GetPlayState(); // Function Engine.AudioComponent.GetPlayState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x928a94c
	bool GetCookedFFTDataForAllPlayingSounds(struct TArray<struct FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x928a868
	bool GetCookedFFTData(struct TArray<float>& FrequenciesToGet, struct TArray<struct FSoundWaveSpectralData>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x928a750
	bool GetCookedEnvelopeDataForAllPlayingSounds(struct TArray<struct FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x928a5e4
	bool GetCookedEnvelopeData(float& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x928a548
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeOut // (Native|Public|BlueprintCallable) // @ game+0x15349a0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeIn // (Native|Public|BlueprintCallable) // @ game+0x1534bf4
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings& OutAttenuationSettings); // Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x928a474
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.AdjustVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x928a378
	void AdjustAttenuation(struct FSoundAttenuationSettings& InAttenuationSettings); // Function Engine.AudioComponent.AdjustAttenuation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x928a2b4
};

// Class Engine.CameraComponent
// Size: 0xa20 (Inherited: 0x2a0)
struct UCameraComponent : USceneComponent {
	float FieldOfView; // 0x2a0(0x04)
	float OrthoWidth; // 0x2a4(0x04)
	float OrthoNearClipPlane; // 0x2a8(0x04)
	float OrthoFarClipPlane; // 0x2ac(0x04)
	float AspectRatio; // 0x2b0(0x04)
	char bConstrainAspectRatio : 1; // 0x2b4(0x01)
	char bUseFieldOfViewForLOD : 1; // 0x2b4(0x01)
	char bLockToHmd : 1; // 0x2b4(0x01)
	char bUsePawnControlRotation : 1; // 0x2b4(0x01)
	char pad_2B4_4 : 4; // 0x2b4(0x01)
	enum class ECameraProjectionMode ProjectionMode; // 0x2b5(0x01)
	char pad_2B6[0x6a]; // 0x2b6(0x6a)
	float PostProcessBlendWeight; // 0x320(0x04)
	char pad_324[0x2c]; // 0x324(0x2c)
	struct FPostProcessSettings PostProcessSettings; // 0x350(0x6d0)

	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD); // Function Engine.CameraComponent.SetUseFieldOfViewForLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x92974a8
	void SetProjectionMode(enum class ECameraProjectionMode InProjectionMode); // Function Engine.CameraComponent.SetProjectionMode // (Final|Native|Public|BlueprintCallable) // @ game+0x929742c
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight); // Function Engine.CameraComponent.SetPostProcessBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x92973a8
	void SetOrthoWidth(float InOrthoWidth); // Function Engine.CameraComponent.SetOrthoWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x9297324
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane); // Function Engine.CameraComponent.SetOrthoNearClipPlane // (Final|Native|Public|BlueprintCallable) // @ game+0x92972a0
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane); // Function Engine.CameraComponent.SetOrthoFarClipPlane // (Final|Native|Public|BlueprintCallable) // @ game+0x929721c
	void SetFieldOfView(float InFieldOfView); // Function Engine.CameraComponent.SetFieldOfView // (Native|Public|BlueprintCallable) // @ game+0x288c774
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio); // Function Engine.CameraComponent.SetConstraintAspectRatio // (Final|Native|Public|BlueprintCallable) // @ game+0x929710c
	void SetAspectRatio(float InAspectRatio); // Function Engine.CameraComponent.SetAspectRatio // (Final|Native|Public|BlueprintCallable) // @ game+0x9296fb0
	void RemoveBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject); // Function Engine.CameraComponent.RemoveBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x9296f1c
	void OnCameraMeshHiddenChanged(); // Function Engine.CameraComponent.OnCameraMeshHiddenChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x24841e4
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo& DesiredView); // Function Engine.CameraComponent.GetCameraView // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9296d80
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.CameraComponent.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x9296c84
};

// Class Engine.World
// Size: 0x888 (Inherited: 0x28)
struct UWorld : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct ULevel* PersistentLevel; // 0x30(0x08)
	struct UNetDriver* NetDriver; // 0x38(0x08)
	struct ULineBatchComponent* LineBatcher; // 0x40(0x08)
	struct ULineBatchComponent* PersistentLineBatcher; // 0x48(0x08)
	struct ULineBatchComponent* ForegroundLineBatcher; // 0x50(0x08)
	struct AGameNetworkManager* NetworkManager; // 0x58(0x08)
	struct UPhysicsCollisionHandler* PhysicsCollisionHandler; // 0x60(0x08)
	struct TArray<struct UObject*> ExtraReferencedObjects; // 0x68(0x10)
	struct TArray<struct UObject*> PerModuleDataObjects; // 0x78(0x10)
	struct TArray<struct ULevelStreaming*> StreamingLevels; // 0x88(0x10)
	struct FStreamingLevelsToConsider StreamingLevelsToConsider; // 0x98(0x28)
	struct FString StreamingLevelsPrefix; // 0xc0(0x10)
	struct ULevel* CurrentLevelPendingVisibility; // 0xd0(0x08)
	struct ULevel* CurrentLevelPendingInvisibility; // 0xd8(0x08)
	struct UDemoNetDriver* DemoNetDriver; // 0xe0(0x08)
	struct AParticleEventManager* MyParticleEventManager; // 0xe8(0x08)
	struct APhysicsVolume* DefaultPhysicsVolume; // 0xf0(0x08)
	char pad_F8[0x36]; // 0xf8(0x36)
	char pad_12E_0 : 2; // 0x12e(0x01)
	char bAreConstraintsDirty : 1; // 0x12e(0x01)
	char pad_12E_3 : 5; // 0x12e(0x01)
	char pad_12F[0x9]; // 0x12f(0x09)
	struct UNavigationSystemBase* NavigationSystem; // 0x138(0x08)
	struct AGameModeBase* AuthorityGameMode; // 0x140(0x08)
	struct AGameStateBase* GameState; // 0x148(0x08)
	struct UAISystemBase* AISystem; // 0x150(0x08)
	struct UAvoidanceManager* AvoidanceManager; // 0x158(0x08)
	struct TArray<struct ULevel*> Levels; // 0x160(0x10)
	struct TArray<struct FLevelCollection> LevelCollections; // 0x170(0x10)
	char pad_180[0x28]; // 0x180(0x28)
	struct UGameInstance* OwningGameInstance; // 0x1a8(0x08)
	struct TArray<struct UMaterialParameterCollectionInstance*> ParameterCollectionInstances; // 0x1b0(0x10)
	struct UCanvas* CanvasForRenderingToTarget; // 0x1c0(0x08)
	struct UCanvas* CanvasForDrawMaterialToRenderTarget; // 0x1c8(0x08)
	char pad_1D0[0x70]; // 0x1d0(0x70)
	struct UPhysicsFieldComponent* PhysicsField; // 0x240(0x08)
	uint32_t LWILastAssignedUID; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)
	struct TSet<struct UActorComponent*> ComponentsThatNeedPreEndOfFrameSync; // 0x250(0x50)
	struct TArray<struct UActorComponent*> ComponentsThatNeedEndOfFrameUpdate; // 0x2a0(0x10)
	struct TArray<struct UActorComponent*> ComponentsThatNeedEndOfFrameUpdate_OnGameThread; // 0x2b0(0x10)
	char pad_2C0[0x3f8]; // 0x2c0(0x3f8)
	struct UWorldComposition* WorldComposition; // 0x6b8(0x08)
	struct UContentBundleManager* ContentBundleManager; // 0x6c0(0x08)
	char pad_6C8[0xa8]; // 0x6c8(0xa8)
	struct FWorldPSCPool PSCPool; // 0x770(0x58)
	char pad_7C8[0xc0]; // 0x7c8(0xc0)

	struct AWorldSettings* K2_GetWorldSettings(); // Function Engine.World.K2_GetWorldSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x9359844
	void HandleTimelineScrubbed(); // Function Engine.World.HandleTimelineScrubbed // (Final|Native|Public) // @ game+0x9359830
};

// Class Engine.LevelStreaming
// Size: 0x180 (Inherited: 0x28)
struct ULevelStreaming : UObject {
	struct TSoftObjectPtr<UWorld> WorldAsset; // 0x28(0x28)
	int32_t StreamingPriority; // 0x50(0x04)
	struct FName PackageNameToLoad; // 0x54(0x04)
	struct TArray<struct FName> LODPackageNames; // 0x58(0x10)
	char pad_68[0x18]; // 0x68(0x18)
	struct FTransform LevelTransform; // 0x80(0x60)
	bool bClientOnlyVisible; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	int32_t LevelLODIndex; // 0xe4(0x04)
	char pad_E8_0 : 3; // 0xe8(0x01)
	char bShouldBeVisible : 1; // 0xe8(0x01)
	char bShouldBeLoaded : 1; // 0xe8(0x01)
	char pad_E8_5 : 3; // 0xe8(0x01)
	char pad_E9[0x2]; // 0xe9(0x02)
	char bLocked : 1; // 0xeb(0x01)
	char bIsStatic : 1; // 0xeb(0x01)
	char bShouldBlockOnLoad : 1; // 0xeb(0x01)
	char bShouldBlockOnUnload : 1; // 0xeb(0x01)
	char bDisableDistanceStreaming : 1; // 0xeb(0x01)
	char bDrawOnLevelStatusMap : 1; // 0xeb(0x01)
	char pad_EB_6 : 2; // 0xeb(0x01)
	struct FLinearColor LevelColor; // 0xec(0x10)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct TArray<struct ALevelStreamingVolume*> EditorStreamingVolumes; // 0x100(0x10)
	float MinTimeBetweenVolumeUnloadRequests; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct FMulticastInlineDelegate OnLevelLoaded; // 0x118(0x10)
	struct FMulticastInlineDelegate OnLevelUnloaded; // 0x128(0x10)
	struct FMulticastInlineDelegate OnLevelShown; // 0x138(0x10)
	struct FMulticastInlineDelegate OnLevelHidden; // 0x148(0x10)
	struct ULevel* LoadedLevel; // 0x158(0x08)
	struct ULevel* PendingUnloadLevel; // 0x160(0x08)
	char pad_168[0x18]; // 0x168(0x18)

	bool ShouldBeLoaded(); // Function Engine.LevelStreaming.ShouldBeLoaded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x648e35c
	void SetShouldBeVisible(bool bInShouldBeVisible); // Function Engine.LevelStreaming.SetShouldBeVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x9314ac4
	void SetShouldBeLoaded(bool bInShouldBeLoaded); // Function Engine.LevelStreaming.SetShouldBeLoaded // (Native|Public|BlueprintCallable) // @ game+0x689b53c
	void SetPriority(int32_t NewPriority); // Function Engine.LevelStreaming.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x931493c
	void SetLevelLODIndex(int32_t LODIndex); // Function Engine.LevelStreaming.SetLevelLODIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x93142b0
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval); // Function Engine.LevelStreaming.SetIsRequestingUnloadAndRemoval // (Final|Native|Public|BlueprintCallable) // @ game+0x9314230
	bool IsStreamingStatePending(); // Function Engine.LevelStreaming.IsStreamingStatePending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9312e00
	bool IsLevelVisible(); // Function Engine.LevelStreaming.IsLevelVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9312de0
	bool IsLevelLoaded(); // Function Engine.LevelStreaming.IsLevelLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9312dc4
	struct FName GetWorldAssetPackageFName(); // Function Engine.LevelStreaming.GetWorldAssetPackageFName // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9312d64
	struct ULevel* GetLoadedLevel(); // Function Engine.LevelStreaming.GetLoadedLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x277b038
	struct ALevelScriptActor* GetLevelScriptActor(); // Function Engine.LevelStreaming.GetLevelScriptActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x9312d18
	bool GetIsRequestingUnloadAndRemoval(); // Function Engine.LevelStreaming.GetIsRequestingUnloadAndRemoval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9312cfc
	struct ULevelStreaming* CreateInstance(struct FString UniqueInstanceName); // Function Engine.LevelStreaming.CreateInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x9312b6c
};

// Class Engine.LevelStreamingDynamic
// Size: 0x190 (Inherited: 0x180)
struct ULevelStreamingDynamic : ULevelStreaming {
	char bInitiallyLoaded : 1; // 0x180(0x01)
	char bInitiallyVisible : 1; // 0x180(0x01)
	char pad_180_2 : 6; // 0x180(0x01)
	char pad_181[0xf]; // 0x181(0x0f)

	struct ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess, struct FString OptionalLevelNameOverride, struct ULevelStreamingDynamic* OptionalLevelStreamingClass, bool bLoadAsTempPackage); // Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93132ac
	struct ULevelStreamingDynamic* LoadLevelInstance(struct UObject* WorldContextObject, struct FString LevelName, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess, struct FString OptionalLevelNameOverride, struct ULevelStreamingDynamic* OptionalLevelStreamingClass, bool bLoadAsTempPackage); // Function Engine.LevelStreamingDynamic.LoadLevelInstance // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9312e24
};

// Class Engine.LevelScriptActor
// Size: 0x290 (Inherited: 0x288)
struct ALevelScriptActor : AActor {
	char bInputEnabled : 1; // 0x288(0x01)
	char pad_288_1 : 7; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)

	void WorldOriginLocationChanged(struct FIntVector OldOriginLocation, struct FIntVector NewOriginLocation); // Function Engine.LevelScriptActor.WorldOriginLocationChanged // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0xd67374
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.LevelScriptActor.SetCinematicMode // (Native|Public|BlueprintCallable) // @ game+0x9313da0
	bool RemoteEvent(struct FName EventName); // Function Engine.LevelScriptActor.RemoteEvent // (Native|Public|BlueprintCallable) // @ game+0x9313820
	void LevelReset(); // Function Engine.LevelScriptActor.LevelReset // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0xd67374
};

// Class Engine.LightComponentBase
// Size: 0x2e0 (Inherited: 0x2a0)
struct ULightComponentBase : USceneComponent {
	struct FGuid LightGuid; // 0x2a0(0x10)
	float Brightness; // 0x2b0(0x04)
	float Intensity; // 0x2b4(0x04)
	struct FColor LightColor; // 0x2b8(0x04)
	char bAffectsWorld : 1; // 0x2bc(0x01)
	char CastShadows : 1; // 0x2bc(0x01)
	char CastStaticShadows : 1; // 0x2bc(0x01)
	char CastDynamicShadows : 1; // 0x2bc(0x01)
	char bAffectTranslucentLighting : 1; // 0x2bc(0x01)
	char bTransmission : 1; // 0x2bc(0x01)
	char bCastVolumetricShadow : 1; // 0x2bc(0x01)
	char bCastDeepShadow : 1; // 0x2bc(0x01)
	char bCastRaytracedShadow : 1; // 0x2bd(0x01)
	char pad_2BD_1 : 7; // 0x2bd(0x01)
	char pad_2BE[0x2]; // 0x2be(0x02)
	enum class ECastRayTracedShadow CastRaytracedShadow; // 0x2c0(0x01)
	char pad_2C1[0x3]; // 0x2c1(0x03)
	char bAffectReflection : 1; // 0x2c4(0x01)
	char bAffectGlobalIllumination : 1; // 0x2c4(0x01)
	char pad_2C4_2 : 6; // 0x2c4(0x01)
	char pad_2C5[0x3]; // 0x2c5(0x03)
	float DeepShadowLayerDistribution; // 0x2c8(0x04)
	float IndirectLightingIntensity; // 0x2cc(0x04)
	float VolumetricScatteringIntensity; // 0x2d0(0x04)
	int32_t SamplesPerPixel; // 0x2d4(0x04)
	char pad_2D8[0x8]; // 0x2d8(0x08)

	void SetSamplesPerPixel(int32_t NewValue); // Function Engine.LightComponentBase.SetSamplesPerPixel // (Final|Native|Public|BlueprintCallable) // @ game+0x9316674
	void SetCastVolumetricShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastVolumetricShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9316558
	void SetCastShadows(bool bNewValue); // Function Engine.LightComponentBase.SetCastShadows // (Final|Native|Public|BlueprintCallable) // @ game+0x93164d8
	void SetCastRaytracedShadows(enum class ECastRayTracedShadow bNewValue); // Function Engine.LightComponentBase.SetCastRaytracedShadows // (Final|Native|Public|BlueprintCallable) // @ game+0x9316434
	void SetCastRaytracedShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastRaytracedShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x9316378
	void SetCastDeepShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastDeepShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x93162b8
	void SetAffectReflection(bool bNewValue); // Function Engine.LightComponentBase.SetAffectReflection // (Final|Native|Public|BlueprintCallable) // @ game+0x931617c
	void SetAffectGlobalIllumination(bool bNewValue); // Function Engine.LightComponentBase.SetAffectGlobalIllumination // (Final|Native|Public|BlueprintCallable) // @ game+0x93160c0
	struct FLinearColor GetLightColor(); // Function Engine.LightComponentBase.GetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9315f4c
};

// Class Engine.LightComponent
// Size: 0x3e0 (Inherited: 0x2e0)
struct ULightComponent : ULightComponentBase {
	float Temperature; // 0x2d8(0x04)
	float MaxDrawDistance; // 0x2dc(0x04)
	float MaxDistanceFadeRange; // 0x2e0(0x04)
	char bUseTemperature : 1; // 0x2e4(0x01)
	int32_t ShadowMapChannel; // 0x2e8(0x04)
	float MinRoughness; // 0x2f0(0x04)
	float SpecularScale; // 0x2f4(0x04)
	float ShadowResolutionScale; // 0x2f8(0x04)
	float ShadowBias; // 0x2fc(0x04)
	float ShadowSlopeBias; // 0x300(0x04)
	float ShadowSharpen; // 0x304(0x04)
	float ContactShadowLength; // 0x308(0x04)
	char ContactShadowLengthInWS : 1; // 0x30c(0x01)
	char InverseSquaredFalloff : 1; // 0x30c(0x01)
	char CastTranslucentShadows : 1; // 0x30c(0x01)
	char bCastShadowsFromCinematicObjectsOnly : 1; // 0x30c(0x01)
	char bAffectDynamicIndirectLighting : 1; // 0x30c(0x01)
	char bForceCachedShadowsForMovablePrimitives : 1; // 0x30c(0x01)
	char pad_30C_7 : 1; // 0x30c(0x01)
	char pad_30D[0x3]; // 0x30d(0x03)
	struct FLightingChannels LightingChannels; // 0x310(0x01)
	char pad_311[0x7]; // 0x311(0x07)
	struct UMaterialInterface* LightFunctionMaterial; // 0x318(0x08)
	struct FVector LightFunctionScale; // 0x320(0x18)
	struct UTextureLightProfile* IESTexture; // 0x338(0x08)
	char bUseIESBrightness : 1; // 0x340(0x01)
	char pad_340_1 : 7; // 0x340(0x01)
	char pad_341[0x3]; // 0x341(0x03)
	float IESBrightnessScale; // 0x344(0x04)
	float LightFunctionFadeDistance; // 0x348(0x04)
	float DisabledBrightness; // 0x34c(0x04)
	char bEnableLightShaftBloom : 1; // 0x350(0x01)
	char pad_350_1 : 7; // 0x350(0x01)
	char pad_351[0x3]; // 0x351(0x03)
	float BloomScale; // 0x354(0x04)
	float BloomThreshold; // 0x358(0x04)
	float BloomMaxBrightness; // 0x35c(0x04)
	struct FColor BloomTint; // 0x360(0x04)
	bool bUseRayTracedDistanceFieldShadows; // 0x364(0x01)
	char pad_365[0x3]; // 0x365(0x03)
	float RayStartOffsetDepthScale; // 0x368(0x04)
	char pad_36C[0x74]; // 0x36c(0x74)

	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.LightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x9314e40
	void SetUseTemperature(bool bNewValue); // Function Engine.LightComponent.SetUseTemperature // (Final|Native|Public|BlueprintCallable) // @ game+0x9314dc0
	void SetUseIESBrightness(bool bNewValue); // Function Engine.LightComponent.SetUseIESBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x9314d08
	void SetTransmission(bool bNewValue); // Function Engine.LightComponent.SetTransmission // (Final|Native|Public|BlueprintCallable) // @ game+0x9314c4c
	void SetTemperature(float NewTemperature); // Function Engine.LightComponent.SetTemperature // (Final|Native|Public|BlueprintCallable) // @ game+0x9314bc8
	void SetSpecularScale(float NewValue); // Function Engine.LightComponent.SetSpecularScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9314b44
	void SetShadowSlopeBias(float NewValue); // Function Engine.LightComponent.SetShadowSlopeBias // (Final|Native|Public|BlueprintCallable) // @ game+0x9314a40
	void SetShadowBias(float NewValue); // Function Engine.LightComponent.SetShadowBias // (Final|Native|Public|BlueprintCallable) // @ game+0x93149bc
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Function Engine.LightComponent.SetLightingChannels // (Final|Native|Public|BlueprintCallable) // @ game+0x93147ec
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.LightComponent.SetLightFunctionScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x931475c
	void SetLightFunctionMaterial(struct UMaterialInterface* NewLightFunctionMaterial); // Function Engine.LightComponent.SetLightFunctionMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x9314648
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.LightComponent.SetLightFunctionFadeDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x9314540
	void SetLightFunctionDisabledBrightness(float NewValue); // Function Engine.LightComponent.SetLightFunctionDisabledBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x9314434
	void SetLightFColor(struct FColor NewLightColor); // Function Engine.LightComponent.SetLightFColor // (Final|Native|Public|HasDefaults) // @ game+0x93143b8
	void SetLightColor(struct FLinearColor NewLightColor, bool bSRGB); // Function Engine.LightComponent.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x216fdd4
	void SetIntensity(float NewIntensity); // Function Engine.LightComponent.SetIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x216faa4
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.LightComponent.SetIndirectLightingIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x93141ac
	void SetIESTexture(struct UTextureLightProfile* NewValue); // Function Engine.LightComponent.SetIESTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x931410c
	void SetIESBrightnessScale(float NewValue); // Function Engine.LightComponent.SetIESBrightnessScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9314088
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue); // Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives // (Final|Native|Public|BlueprintCallable) // @ game+0x213e74c
	void SetEnableLightShaftBloom(bool bNewValue); // Function Engine.LightComponent.SetEnableLightShaftBloom // (Final|Native|Public|BlueprintCallable) // @ game+0x9313f4c
	void SetBloomTint(struct FColor NewValue); // Function Engine.LightComponent.SetBloomTint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9313c00
	void SetBloomThreshold(float NewValue); // Function Engine.LightComponent.SetBloomThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x9313b7c
	void SetBloomScale(float NewValue); // Function Engine.LightComponent.SetBloomScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9313af8
	void SetBloomMaxBrightness(float NewValue); // Function Engine.LightComponent.SetBloomMaxBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x9313a74
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectTranslucentLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x93139f4
	void SetAffectDynamicIndirectLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectDynamicIndirectLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x93138b4
};

// Class Engine.LocalLightComponent
// Size: 0x400 (Inherited: 0x3e0)
struct ULocalLightComponent : ULightComponent {
	enum class ELightUnits IntensityUnits; // 0x3e0(0x01)
	char pad_3E1[0x3]; // 0x3e1(0x03)
	float InverseExposureBlend; // 0x3e4(0x04)
	float Radius; // 0x3e8(0x04)
	float AttenuationRadius; // 0x3ec(0x04)
	struct FLightmassPointLightSettings LightmassSettings; // 0x3f0(0x0c)
	char pad_3FC[0x4]; // 0x3fc(0x04)

	void SetIntensityUnits(enum class ELightUnits NewIntensityUnits); // Function Engine.LocalLightComponent.SetIntensityUnits // (Final|Native|Public|BlueprintCallable) // @ game+0x93165d8
	void SetAttenuationRadius(float NewRadius); // Function Engine.LocalLightComponent.SetAttenuationRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x9316234
	float GetUnitsConversionFactor(enum class ELightUnits SrcUnits, enum class ELightUnits TargetUnits, float CosHalfConeAngle); // Function Engine.LocalLightComponent.GetUnitsConversionFactor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9315fb0
};

// Class Engine.PointLightComponent
// Size: 0x420 (Inherited: 0x400)
struct UPointLightComponent : ULocalLightComponent {
	char bUseInverseSquaredFalloff : 1; // 0x400(0x01)
	char pad_400_1 : 7; // 0x400(0x01)
	char pad_401[0x3]; // 0x401(0x03)
	float LightFalloffExponent; // 0x404(0x04)
	float SourceRadius; // 0x408(0x04)
	float SoftSourceRadius; // 0x40c(0x04)
	float SourceLength; // 0x410(0x04)
	char pad_414[0xc]; // 0x414(0x0c)

	void SetUseInverseSquaredFalloff(bool bNewValue); // Function Engine.PointLightComponent.SetUseInverseSquaredFalloff // (Final|Native|Public|BlueprintCallable) // @ game+0x9330fec
	void SetSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSourceRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x9330f68
	void SetSourceLength(float NewValue); // Function Engine.PointLightComponent.SetSourceLength // (Final|Native|Public|BlueprintCallable) // @ game+0x9330ee4
	void SetSoftSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSoftSourceRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x9330e60
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLightComponent.SetLightFalloffExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9330ccc
};

// Class Engine.SpotLightComponent
// Size: 0x420 (Inherited: 0x420)
struct USpotLightComponent : UPointLightComponent {
	float InnerConeAngle; // 0x418(0x04)
	float OuterConeAngle; // 0x41c(0x04)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLightComponent.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x935319c
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLightComponent.SetInnerConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x9352fe8
};

// Class Engine.NavMovementComponent
// Size: 0x148 (Inherited: 0x108)
struct UNavMovementComponent : UMovementComponent {
	struct FNavAgentProperties NavAgentProps; // 0x108(0x30)
	float FixedPathBrakingDistance; // 0x138(0x04)
	char bUpdateNavAgentWithOwnersCollision : 1; // 0x13c(0x01)
	char bUseAccelerationForPaths : 1; // 0x13c(0x01)
	char bUseFixedBrakingDistanceForPaths : 1; // 0x13c(0x01)
	char pad_13C_3 : 5; // 0x13c(0x01)
	struct FMovementProperties MovementState; // 0x13d(0x01)
	char pad_13E[0x2]; // 0x13e(0x02)
	struct UObject* PathFollowingComp; // 0x140(0x08)

	void StopMovementKeepPathing(); // Function Engine.NavMovementComponent.StopMovementKeepPathing // (Final|Native|Public|BlueprintCallable) // @ game+0x931cb5c
	void StopActiveMovement(); // Function Engine.NavMovementComponent.StopActiveMovement // (Native|Public|BlueprintCallable) // @ game+0x68cebc8
	bool IsSwimming(); // Function Engine.NavMovementComponent.IsSwimming // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x931ca90
	bool IsMovingOnGround(); // Function Engine.NavMovementComponent.IsMovingOnGround // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x293141c
	bool IsFlying(); // Function Engine.NavMovementComponent.IsFlying // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x931ca68
	bool IsFalling(); // Function Engine.NavMovementComponent.IsFalling // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26929fc
	bool IsCrouching(); // Function Engine.NavMovementComponent.IsCrouching // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x931ca40
};

// Class Engine.PawnMovementComponent
// Size: 0x150 (Inherited: 0x148)
struct UPawnMovementComponent : UNavMovementComponent {
	struct APawn* PawnOwner; // 0x148(0x08)

	bool IsMoveInputIgnored(); // Function Engine.PawnMovementComponent.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9320638
	struct FVector GetPendingInputVector(); // Function Engine.PawnMovementComponent.GetPendingInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9320534
	struct APawn* GetPawnOwner(); // Function Engine.PawnMovementComponent.GetPawnOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932051c
	struct FVector GetLastInputVector(); // Function Engine.PawnMovementComponent.GetLastInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93203e8
	struct FVector ConsumeInputVector(); // Function Engine.PawnMovementComponent.ConsumeInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9320220
	void AddInputVector(struct FVector WorldVector, bool bForce); // Function Engine.PawnMovementComponent.AddInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x931fcdc
};

// Class Engine.CharacterMovementComponent
// Size: 0xee0 (Inherited: 0x150)
struct UCharacterMovementComponent : UPawnMovementComponent {
	char pad_150[0x10]; // 0x150(0x10)
	struct ACharacter* CharacterOwner; // 0x160(0x08)
	float GravityScale; // 0x168(0x04)
	float MaxStepHeight; // 0x16c(0x04)
	float JumpZVelocity; // 0x170(0x04)
	float JumpOffJumpZFactor; // 0x174(0x04)
	char pad_178[0x1c]; // 0x178(0x1c)
	float WalkableFloorAngle; // 0x194(0x04)
	float WalkableFloorZ; // 0x198(0x04)
	enum class EMovementMode MovementMode; // 0x19c(0x01)
	char CustomMovementMode; // 0x19d(0x01)
	enum class ENetworkSmoothingMode NetworkSmoothingMode; // 0x19e(0x01)
	char pad_19F[0x1]; // 0x19f(0x01)
	float GroundFriction; // 0x1a0(0x04)
	char pad_1A4[0x44]; // 0x1a4(0x44)
	float MaxWalkSpeed; // 0x1e8(0x04)
	float MaxWalkSpeedCrouched; // 0x1ec(0x04)
	float MaxSwimSpeed; // 0x1f0(0x04)
	float MaxFlySpeed; // 0x1f4(0x04)
	float MaxCustomMovementSpeed; // 0x1f8(0x04)
	float MaxAcceleration; // 0x1fc(0x04)
	float MinAnalogWalkSpeed; // 0x200(0x04)
	float BrakingFrictionFactor; // 0x204(0x04)
	float BrakingFriction; // 0x208(0x04)
	float BrakingSubStepTime; // 0x20c(0x04)
	float BrakingDecelerationWalking; // 0x210(0x04)
	float BrakingDecelerationFalling; // 0x214(0x04)
	float BrakingDecelerationSwimming; // 0x218(0x04)
	float BrakingDecelerationFlying; // 0x21c(0x04)
	float AirControl; // 0x220(0x04)
	float AirControlBoostMultiplier; // 0x224(0x04)
	float AirControlBoostVelocityThreshold; // 0x228(0x04)
	float FallingLateralFriction; // 0x22c(0x04)
	float CrouchedHalfHeight; // 0x230(0x04)
	float Buoyancy; // 0x234(0x04)
	float PerchRadiusThreshold; // 0x238(0x04)
	float PerchAdditionalHeight; // 0x23c(0x04)
	struct FRotator RotationRate; // 0x240(0x18)
	char bUseSeparateBrakingFriction : 1; // 0x258(0x01)
	char bApplyGravityWhileJumping : 1; // 0x258(0x01)
	char bUseControllerDesiredRotation : 1; // 0x258(0x01)
	char bOrientRotationToMovement : 1; // 0x258(0x01)
	char bSweepWhileNavWalking : 1; // 0x258(0x01)
	char pad_258_5 : 1; // 0x258(0x01)
	char bMovementInProgress : 1; // 0x258(0x01)
	char bEnableScopedMovementUpdates : 1; // 0x258(0x01)
	char bEnableServerDualMoveScopedMovementUpdates : 1; // 0x259(0x01)
	char bForceMaxAccel : 1; // 0x259(0x01)
	char bRunPhysicsWithNoController : 1; // 0x259(0x01)
	char bForceNextFloorCheck : 1; // 0x259(0x01)
	char bShrinkProxyCapsule : 1; // 0x259(0x01)
	char bCanWalkOffLedges : 1; // 0x259(0x01)
	char bCanWalkOffLedgesWhenCrouching : 1; // 0x259(0x01)
	char pad_259_7 : 1; // 0x259(0x01)
	char pad_25A_0 : 1; // 0x25a(0x01)
	char bNetworkSkipProxyPredictionOnNetUpdate : 1; // 0x25a(0x01)
	char bNetworkAlwaysReplicateTransformUpdateTimestamp : 1; // 0x25a(0x01)
	char bDeferUpdateMoveComponent : 1; // 0x25a(0x01)
	char bEnablePhysicsInteraction : 1; // 0x25a(0x01)
	char bTouchForceScaledToMass : 1; // 0x25a(0x01)
	char bPushForceScaledToMass : 1; // 0x25a(0x01)
	char bPushForceUsingZOffset : 1; // 0x25a(0x01)
	char bScalePushForceToVelocity : 1; // 0x25b(0x01)
	char pad_25B_1 : 7; // 0x25b(0x01)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct USceneComponent* DeferredUpdatedMoveComponent; // 0x260(0x08)
	float MaxOutOfWaterStepHeight; // 0x268(0x04)
	float OutofWaterZ; // 0x26c(0x04)
	float Mass; // 0x270(0x04)
	float StandingDownwardForceScale; // 0x274(0x04)
	float InitialPushForceFactor; // 0x278(0x04)
	float PushForceFactor; // 0x27c(0x04)
	float PushForcePointZOffsetFactor; // 0x280(0x04)
	float TouchForceFactor; // 0x284(0x04)
	float MinTouchForce; // 0x288(0x04)
	float MaxTouchForce; // 0x28c(0x04)
	float RepulsionForce; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	struct FVector Acceleration; // 0x298(0x18)
	struct FQuat LastUpdateRotation; // 0x2b0(0x20)
	struct FVector LastUpdateLocation; // 0x2d0(0x18)
	struct FVector LastUpdateVelocity; // 0x2e8(0x18)
	float ServerLastTransformUpdateTimeStamp; // 0x300(0x04)
	float ServerLastClientGoodMoveAckTime; // 0x304(0x04)
	float ServerLastClientAdjustmentTime; // 0x308(0x04)
	char pad_30C[0x4]; // 0x30c(0x04)
	struct FVector PendingImpulseToApply; // 0x310(0x18)
	struct FVector PendingForceToApply; // 0x328(0x18)
	float AnalogInputModifier; // 0x340(0x04)
	char pad_344[0xc]; // 0x344(0x0c)
	float MaxSimulationTimeStep; // 0x350(0x04)
	int32_t MaxSimulationIterations; // 0x354(0x04)
	int32_t MaxJumpApexAttemptsPerSimulation; // 0x358(0x04)
	float MaxDepenetrationWithGeometry; // 0x35c(0x04)
	float MaxDepenetrationWithGeometryAsProxy; // 0x360(0x04)
	float MaxDepenetrationWithPawn; // 0x364(0x04)
	float MaxDepenetrationWithPawnAsProxy; // 0x368(0x04)
	float NetworkSimulatedSmoothLocationTime; // 0x36c(0x04)
	float NetworkSimulatedSmoothRotationTime; // 0x370(0x04)
	float ListenServerNetworkSimulatedSmoothLocationTime; // 0x374(0x04)
	float ListenServerNetworkSimulatedSmoothRotationTime; // 0x378(0x04)
	float NetProxyShrinkRadius; // 0x37c(0x04)
	float NetProxyShrinkHalfHeight; // 0x380(0x04)
	float NetworkMaxSmoothUpdateDistance; // 0x384(0x04)
	float NetworkNoSmoothUpdateDistance; // 0x388(0x04)
	float NetworkMinTimeBetweenClientAckGoodMoves; // 0x38c(0x04)
	float NetworkMinTimeBetweenClientAdjustments; // 0x390(0x04)
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x394(0x04)
	float NetworkLargeClientCorrectionDistance; // 0x398(0x04)
	float LedgeCheckThreshold; // 0x39c(0x04)
	float JumpOutOfWaterPitch; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	struct FFindFloorResult CurrentFloor; // 0x3a8(0xf0)
	enum class EMovementMode DefaultLandMovementMode; // 0x498(0x01)
	enum class EMovementMode DefaultWaterMovementMode; // 0x499(0x01)
	enum class EMovementMode GroundMovementMode; // 0x49a(0x01)
	char pad_49B[0x9]; // 0x49b(0x09)
	char bMaintainHorizontalGroundVelocity : 1; // 0x4a4(0x01)
	char bImpartBaseVelocityX : 1; // 0x4a4(0x01)
	char bImpartBaseVelocityY : 1; // 0x4a4(0x01)
	char bImpartBaseVelocityZ : 1; // 0x4a4(0x01)
	char bImpartBaseAngularVelocity : 1; // 0x4a4(0x01)
	char bJustTeleported : 1; // 0x4a4(0x01)
	char bNetworkUpdateReceived : 1; // 0x4a4(0x01)
	char bNetworkMovementModeChanged : 1; // 0x4a4(0x01)
	char bIgnoreClientMovementErrorChecksAndCorrection : 1; // 0x4a5(0x01)
	char bServerAcceptClientAuthoritativePosition : 1; // 0x4a5(0x01)
	char bNotifyApex : 1; // 0x4a5(0x01)
	char bCheatFlying : 1; // 0x4a5(0x01)
	char bWantsToCrouch : 1; // 0x4a5(0x01)
	char bCrouchMaintainsBaseLocation : 1; // 0x4a5(0x01)
	char bIgnoreBaseRotation : 1; // 0x4a5(0x01)
	char bFastAttachedMove : 1; // 0x4a5(0x01)
	char bAlwaysCheckFloor : 1; // 0x4a6(0x01)
	char bUseFlatBaseForFloorChecks : 1; // 0x4a6(0x01)
	char bPerformingJumpOff : 1; // 0x4a6(0x01)
	char bWantsToLeaveNavWalking : 1; // 0x4a6(0x01)
	char bUseRVOAvoidance : 1; // 0x4a6(0x01)
	char bRequestedMoveUseAcceleration : 1; // 0x4a6(0x01)
	char pad_4A6_6 : 1; // 0x4a6(0x01)
	char bWasSimulatingRootMotion : 1; // 0x4a6(0x01)
	char bAllowPhysicsRotationDuringAnimRootMotion : 1; // 0x4a7(0x01)
	char pad_4A7_1 : 7; // 0x4a7(0x01)
	float FormerBaseVelocityDecayHalfLife; // 0x4a8(0x04)
	char bHasRequestedVelocity : 1; // 0x4ac(0x01)
	char bRequestedMoveWithMaxSpeed : 1; // 0x4ac(0x01)
	char bWasAvoidanceUpdated : 1; // 0x4ac(0x01)
	char pad_4AC_3 : 2; // 0x4ac(0x01)
	char bProjectNavMeshWalking : 1; // 0x4ac(0x01)
	char bProjectNavMeshOnBothWorldChannels : 1; // 0x4ac(0x01)
	char pad_4AC_7 : 1; // 0x4ac(0x01)
	char pad_4AD[0x1f]; // 0x4ad(0x1f)
	float AvoidanceConsiderationRadius; // 0x4cc(0x04)
	struct FVector RequestedVelocity; // 0x4d0(0x18)
	struct FVector LastUpdateRequestedVelocity; // 0x4e8(0x18)
	int32_t AvoidanceUID; // 0x500(0x04)
	struct FNavAvoidanceMask AvoidanceGroup; // 0x504(0x04)
	struct FNavAvoidanceMask GroupsToAvoid; // 0x508(0x04)
	struct FNavAvoidanceMask GroupsToIgnore; // 0x50c(0x04)
	float AvoidanceWeight; // 0x510(0x04)
	char pad_514[0x4]; // 0x514(0x04)
	struct FVector PendingLaunchVelocity; // 0x518(0x18)
	char pad_530[0x128]; // 0x530(0x128)
	float NavMeshProjectionInterval; // 0x658(0x04)
	float NavMeshProjectionTimer; // 0x65c(0x04)
	float NavMeshProjectionInterpSpeed; // 0x660(0x04)
	float NavMeshProjectionHeightScaleUp; // 0x664(0x04)
	float NavMeshProjectionHeightScaleDown; // 0x668(0x04)
	float NavWalkingFloorDistTolerance; // 0x66c(0x04)
	char pad_670[0x30]; // 0x670(0x30)
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction; // 0x6a0(0x30)
	char pad_6D0[0x18]; // 0x6d0(0x18)
	float MinTimeBetweenTimeStampResets; // 0x6e8(0x04)
	char pad_6EC[0x54c]; // 0x6ec(0x54c)
	struct FRootMotionSourceGroup CurrentRootMotion; // 0xc38(0x48)
	struct FRootMotionSourceGroup ServerCorrectionRootMotion; // 0xc80(0x48)
	char pad_CC8[0x168]; // 0xcc8(0x168)
	struct FRootMotionMovementParams RootMotionParams; // 0xe30(0x70)
	struct FVector AnimRootMotionVelocity; // 0xea0(0x18)
	char pad_EB8[0x28]; // 0xeb8(0x28)

	void SetWalkableFloorZ(float InWalkableFloorZ); // Function Engine.CharacterMovementComponent.SetWalkableFloorZ // (Final|Native|Public|BlueprintCallable) // @ game+0x92a08bc
	void SetWalkableFloorAngle(float InWalkableFloorAngle); // Function Engine.CharacterMovementComponent.SetWalkableFloorAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x92a0838
	void SetMovementMode(enum class EMovementMode NewMovementMode, char NewCustomMode); // Function Engine.CharacterMovementComponent.SetMovementMode // (Native|Public|BlueprintCallable) // @ game+0x25a4a18
	void SetGroupsToIgnoreMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92a07a8
	void SetGroupsToIgnore(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToIgnore // (Final|Native|Public|BlueprintCallable) // @ game+0x92a0724
	void SetGroupsToAvoidMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92a0694
	void SetGroupsToAvoid(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToAvoid // (Final|Native|Public|BlueprintCallable) // @ game+0x92a0610
	void SetCrouchedHalfHeight(float NewValue); // Function Engine.CharacterMovementComponent.SetCrouchedHalfHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x92a058c
	void SetAvoidanceGroupMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92a04fc
	void SetAvoidanceGroup(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetAvoidanceGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x92a0478
	void SetAvoidanceEnabled(bool bEnable); // Function Engine.CharacterMovementComponent.SetAvoidanceEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x92a03f8
	float K2_GetWalkableFloorZ(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a03e0
	float K2_GetWalkableFloorAngle(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a03c8
	void K2_FindFloor(struct FVector CapsuleLocation, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_FindFloor // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a02d4
	void K2_ComputeFloorDist(struct FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_ComputeFloorDist // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a00f4
	bool IsWalking(); // Function Engine.CharacterMovementComponent.IsWalking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x293141c
	bool IsWalkable(struct FHitResult& Hit); // Function Engine.CharacterMovementComponent.IsWalkable // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a0044
	float GetValidPerchRadius(); // Function Engine.CharacterMovementComponent.GetValidPerchRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a0024
	float GetPerchRadiusThreshold(); // Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a0000
	struct UPrimitiveComponent* GetMovementBase(); // Function Engine.CharacterMovementComponent.GetMovementBase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929ffe0
	float GetMinAnalogSpeed(); // Function Engine.CharacterMovementComponent.GetMinAnalogSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929ffb4
	float GetMaxJumpHeightWithJumpTime(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929ff88
	float GetMaxJumpHeight(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeight // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929ff5c
	float GetMaxBrakingDeceleration(); // Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929ff30
	float GetMaxAcceleration(); // Function Engine.CharacterMovementComponent.GetMaxAcceleration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929ff04
	struct FVector GetLastUpdateVelocity(); // Function Engine.CharacterMovementComponent.GetLastUpdateVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x929fedc
	struct FRotator GetLastUpdateRotation(); // Function Engine.CharacterMovementComponent.GetLastUpdateRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x929fe9c
	struct FVector GetLastUpdateRequestedVelocity(); // Function Engine.CharacterMovementComponent.GetLastUpdateRequestedVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x929fe74
	struct FVector GetLastUpdateLocation(); // Function Engine.CharacterMovementComponent.GetLastUpdateLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x929fe4c
	struct FVector GetImpartedMovementBaseVelocity(); // Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x929fe10
	struct FVector GetCurrentAcceleration(); // Function Engine.CharacterMovementComponent.GetCurrentAcceleration // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x929fde8
	float GetCrouchedHalfHeight(); // Function Engine.CharacterMovementComponent.GetCrouchedHalfHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x7491f00
	struct ACharacter* GetCharacterOwner(); // Function Engine.CharacterMovementComponent.GetCharacterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929fdd0
	float GetAnalogInputModifier(); // Function Engine.CharacterMovementComponent.GetAnalogInputModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929fdb8
	void DisableMovement(); // Function Engine.CharacterMovementComponent.DisableMovement // (Native|Public|BlueprintCallable) // @ game+0x75d6574
	void ClearAccumulatedForces(); // Function Engine.CharacterMovementComponent.ClearAccumulatedForces // (Native|Public|BlueprintCallable) // @ game+0x609534c
	void CapsuleTouched(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Engine.CharacterMovementComponent.CapsuleTouched // (Native|Protected|HasOutParms) // @ game+0x929fbc8
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration); // Function Engine.CharacterMovementComponent.CalcVelocity // (Native|Public|BlueprintCallable) // @ game+0x929fa80
	void AddImpulse(struct FVector Impulse, bool bVelocityChange); // Function Engine.CharacterMovementComponent.AddImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x929f9a4
	void AddForce(struct FVector Force); // Function Engine.CharacterMovementComponent.AddForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x929f910
};

// Class Engine.LocalMessage
// Size: 0x28 (Inherited: 0x28)
struct ULocalMessage : UObject {
};

// Class Engine.PlayerCameraManager
// Size: 0x32e0 (Inherited: 0x288)
struct APlayerCameraManager : AActor {
	struct APlayerController* PCOwner; // 0x288(0x08)
	struct USceneComponent* TransformComponent; // 0x290(0x08)
	char pad_298[0x4]; // 0x298(0x04)
	float DefaultFOV; // 0x29c(0x04)
	char pad_2A0[0x4]; // 0x2a0(0x04)
	float DefaultOrthoWidth; // 0x2a4(0x04)
	char pad_2A8[0x4]; // 0x2a8(0x04)
	float DefaultAspectRatio; // 0x2ac(0x04)
	char pad_2B0[0x70]; // 0x2b0(0x70)
	struct FCameraCacheEntry CameraCache; // 0x320(0x7c0)
	struct FCameraCacheEntry LastFrameCameraCache; // 0xae0(0x7c0)
	struct FTViewTarget ViewTarget; // 0x12a0(0x7d0)
	struct FTViewTarget PendingViewTarget; // 0x1a70(0x7d0)
	char pad_2240[0x30]; // 0x2240(0x30)
	struct FCameraCacheEntry CameraCachePrivate; // 0x2270(0x7c0)
	struct FCameraCacheEntry LastFrameCameraCachePrivate; // 0x2a30(0x7c0)
	struct TArray<struct UCameraModifier*> ModifierList; // 0x31f0(0x10)
	struct TArray<struct UCameraModifier*> DefaultModifiers; // 0x3200(0x10)
	float FreeCamDistance; // 0x3210(0x04)
	char pad_3214[0x4]; // 0x3214(0x04)
	struct FVector FreeCamOffset; // 0x3218(0x18)
	struct FVector ViewTargetOffset; // 0x3230(0x18)
	struct FMulticastInlineDelegate OnAudioFadeChangeEvent; // 0x3248(0x10)
	char pad_3258[0x18]; // 0x3258(0x18)
	struct TArray<struct TScriptInterface<ICameraLensEffectInterface>> CameraLensEffects; // 0x3270(0x10)
	struct UCameraModifier_CameraShake* CachedCameraShakeMod; // 0x3280(0x08)
	struct TArray<struct FPostProcessSettings> PostProcessBlendCache; // 0x3288(0x10)
	char pad_3298[0x10]; // 0x3298(0x10)
	struct ACameraActor* AnimCameraActor; // 0x32a8(0x08)
	char bIsOrthographic : 1; // 0x32b0(0x01)
	char bDefaultConstrainAspectRatio : 1; // 0x32b0(0x01)
	char pad_32B0_2 : 4; // 0x32b0(0x01)
	char bClientSimulatingViewTarget : 1; // 0x32b0(0x01)
	char bUseClientSideCameraUpdates : 1; // 0x32b0(0x01)
	char pad_32B1_0 : 2; // 0x32b1(0x01)
	char bGameCameraCutThisFrame : 1; // 0x32b1(0x01)
	char pad_32B1_3 : 5; // 0x32b1(0x01)
	char pad_32B2[0x2]; // 0x32b2(0x02)
	float ViewPitchMin; // 0x32b4(0x04)
	float ViewPitchMax; // 0x32b8(0x04)
	float ViewYawMin; // 0x32bc(0x04)
	float ViewYawMax; // 0x32c0(0x04)
	float ViewRollMin; // 0x32c4(0x04)
	float ViewRollMax; // 0x32c8(0x04)
	char pad_32CC[0x4]; // 0x32cc(0x04)
	float ServerUpdateCameraTimeout; // 0x32d0(0x04)
	char pad_32D4[0xc]; // 0x32d4(0x0c)

	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates(); // Function Engine.PlayerCameraManager.SwapPendingViewTargetWhenUsingClientSideCameraUpdates // (Final|Native|Protected) // @ game+0x9325d8c
	void StopCameraShake(struct UCameraShakeBase* ShakeInstance, bool bImmediately); // Function Engine.PlayerCameraManager.StopCameraShake // (Native|Public|BlueprintCallable) // @ game+0x9325c98
	void StopCameraFade(); // Function Engine.PlayerCameraManager.StopCameraFade // (Native|Public|BlueprintCallable) // @ game+0x9325c80
	void StopAllInstancesOfCameraShakeFromSource(struct UCameraShakeBase* Shake, struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource // (Native|Public|BlueprintCallable) // @ game+0x9325b80
	void StopAllInstancesOfCameraShake(struct UCameraShakeBase* Shake, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake // (Native|Public|BlueprintCallable) // @ game+0x9325ab4
	void StopAllCameraShakesFromSource(struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllCameraShakesFromSource // (Native|Public|BlueprintCallable) // @ game+0x93259e8
	void StopAllCameraShakes(bool bImmediately); // Function Engine.PlayerCameraManager.StopAllCameraShakes // (Native|Public|BlueprintCallable) // @ game+0x9325964
	struct UCameraShakeBase* StartCameraShakeFromSource(struct UCameraShakeBase* ShakeClass, struct UCameraShakeSourceComponent* SourceComponent, float Scale, enum class ECameraShakePlaySpace Playspace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.StartCameraShakeFromSource // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93257c4
	struct UCameraShakeBase* StartCameraShake(struct UCameraShakeBase* ShakeClass, float Scale, enum class ECameraShakePlaySpace Playspace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.StartCameraShake // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x932566c
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, struct FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // Function Engine.PlayerCameraManager.StartCameraFade // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x932549c
	void SetManualCameraFade(float InFadeAmount, struct FLinearColor Color, bool bInFadeAudio); // Function Engine.PlayerCameraManager.SetManualCameraFade // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9325394
	void SetGameCameraCutThisFrame(); // Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame // (Native|Public|BlueprintCallable) // @ game+0x75c9b6c
	void RemoveGenericCameraLensEffect(struct TScriptInterface<ICameraLensEffectInterface> Emitter); // Function Engine.PlayerCameraManager.RemoveGenericCameraLensEffect // (Native|Public|BlueprintCallable) // @ game+0x9325300
	bool RemoveCameraModifier(struct UCameraModifier* ModifierToRemove); // Function Engine.PlayerCameraManager.RemoveCameraModifier // (Native|Public|BlueprintCallable) // @ game+0x932526c
	void RemoveCameraLensEffect(struct AEmitterCameraLensEffectBase* Emitter); // Function Engine.PlayerCameraManager.RemoveCameraLensEffect // (Native|Public) // @ game+0x93251e8
	void PhotographyCameraModify(struct FVector NewCameraLocation, struct FVector PreviousCameraLocation, struct FVector OriginalCameraLocation, struct FVector& ResultCameraLocation); // Function Engine.PlayerCameraManager.PhotographyCameraModify // (BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x9325044
	void OnPhotographySessionStart(); // Function Engine.PlayerCameraManager.OnPhotographySessionStart // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0x23e4cc8
	void OnPhotographySessionEnd(); // Function Engine.PlayerCameraManager.OnPhotographySessionEnd // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0xdf3528
	void OnPhotographyMultiPartCaptureStart(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0xfe5030
	void OnPhotographyMultiPartCaptureEnd(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0x230a2e8
	struct APlayerController* GetOwningPlayerController(); // Function Engine.PlayerCameraManager.GetOwningPlayerController // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9324a50
	float GetFOVAngle(); // Function Engine.PlayerCameraManager.GetFOVAngle // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93244f0
	struct FRotator GetCameraRotation(); // Function Engine.PlayerCameraManager.GetCameraRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x932447c
	struct FVector GetCameraLocation(); // Function Engine.PlayerCameraManager.GetCameraLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2c011a4
	struct UCameraModifier* FindCameraModifierByClass(struct UCameraModifier* ModifierClass); // Function Engine.PlayerCameraManager.FindCameraModifierByClass // (Native|Public|BlueprintCallable) // @ game+0x9323dd0
	void ClearCameraLensEffects(); // Function Engine.PlayerCameraManager.ClearCameraLensEffects // (Native|Public|BlueprintCallable) // @ game+0x16b7f94
	bool BlueprintUpdateCamera(struct AActor* CameraTarget, struct FVector& NewCameraLocation, struct FRotator& NewCameraRotation, float& NewCameraFOV); // Function Engine.PlayerCameraManager.BlueprintUpdateCamera // (BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0xd67374
	struct UCameraModifier* AddNewCameraModifier(struct UCameraModifier* ModifierClass); // Function Engine.PlayerCameraManager.AddNewCameraModifier // (Native|Public|BlueprintCallable) // @ game+0x9323c7c
	struct TScriptInterface<ICameraLensEffectInterface> AddGenericCameraLensEffect(struct AActor* LensEffectEmitterClass); // Function Engine.PlayerCameraManager.AddGenericCameraLensEffect // (Native|Public|BlueprintCallable) // @ game+0x9323be0
	struct AEmitterCameraLensEffectBase* AddCameraLensEffect(struct AEmitterCameraLensEffectBase* LensEffectEmitterClass); // Function Engine.PlayerCameraManager.AddCameraLensEffect // (Native|Public) // @ game+0x93239b8
};

// Class Engine.NavigationObjectBase
// Size: 0x2b0 (Inherited: 0x288)
struct ANavigationObjectBase : AActor {
	char pad_288[0x8]; // 0x288(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x290(0x08)
	struct UBillboardComponent* GoodSprite; // 0x298(0x08)
	struct UBillboardComponent* BadSprite; // 0x2a0(0x08)
	char bIsPIEPlayerStart : 1; // 0x2a8(0x01)
	char pad_2A8_1 : 7; // 0x2a8(0x01)
	char pad_2A9[0x7]; // 0x2a9(0x07)
};

// Class Engine.PlayerStart
// Size: 0x2b8 (Inherited: 0x2b0)
struct APlayerStart : ANavigationObjectBase {
	struct FName PlayerStartTag; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)
};

// Class Engine.PlayerState
// Size: 0x3a0 (Inherited: 0x288)
struct APlayerState : AInfo {
	float Score; // 0x288(0x04)
	int32_t PlayerId; // 0x28c(0x04)
	char CompressedPing; // 0x290(0x01)
	char pad_291[0x1]; // 0x291(0x01)
	char bShouldUpdateReplicatedPing : 1; // 0x292(0x01)
	char bIsSpectator : 1; // 0x292(0x01)
	char bOnlySpectator : 1; // 0x292(0x01)
	char bIsABot : 1; // 0x292(0x01)
	char pad_292_4 : 1; // 0x292(0x01)
	char bIsInactive : 1; // 0x292(0x01)
	char bFromPreviousLevel : 1; // 0x292(0x01)
	char pad_292_7 : 1; // 0x292(0x01)
	char pad_293[0x1]; // 0x293(0x01)
	int32_t StartTime; // 0x294(0x04)
	struct ULocalMessage* EngineMessageClass; // 0x298(0x08)
	char pad_2A0[0x8]; // 0x2a0(0x08)
	struct FString SavedNetworkAddress; // 0x2a8(0x10)
	struct FUniqueNetIdRepl UniqueId; // 0x2b8(0x30)
	char pad_2E8[0x8]; // 0x2e8(0x08)
	struct FMulticastInlineDelegate OnPawnSet; // 0x2f0(0x10)
	struct APawn* PawnPrivate; // 0x300(0x08)
	char pad_308[0x78]; // 0x308(0x78)
	struct FString PlayerNamePrivate; // 0x380(0x10)
	char pad_390[0x10]; // 0x390(0x10)

	void ReceiveOverrideWith(struct APlayerState* OldPlayerState); // Function Engine.PlayerState.ReceiveOverrideWith // (Event|Protected|BlueprintEvent) // @ game+0xd67374
	void ReceiveCopyProperties(struct APlayerState* NewPlayerState); // Function Engine.PlayerState.ReceiveCopyProperties // (Event|Protected|BlueprintEvent) // @ game+0xd67374
	void OnRep_UniqueId(); // Function Engine.PlayerState.OnRep_UniqueId // (Native|Public) // @ game+0x183df6c
	void OnRep_Score(); // Function Engine.PlayerState.OnRep_Score // (Native|Public) // @ game+0x230a2e8
	void OnRep_PlayerName(); // Function Engine.PlayerState.OnRep_PlayerName // (Native|Public) // @ game+0xfe5030
	void OnRep_PlayerID(); // Function Engine.PlayerState.OnRep_PlayerID // (Native|Public) // @ game+0x23e4cc8
	void OnRep_bIsInactive(); // Function Engine.PlayerState.OnRep_bIsInactive // (Native|Public) // @ game+0xdf3528
	void OnPawnPrivateDestroyed(struct AActor* InActor); // Function Engine.PlayerState.OnPawnPrivateDestroyed // (Final|Native|Private) // @ game+0x2198b24
	bool IsOnlyASpectator(); // Function Engine.PlayerState.IsOnlyASpectator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9330590
	struct FString GetPlayerName(); // Function Engine.PlayerState.GetPlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x252f430
	struct APlayerController* GetPlayerController(); // Function Engine.PlayerState.GetPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93303e4
	float GetPingInMilliseconds(); // Function Engine.PlayerState.GetPingInMilliseconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93303c4
	struct APawn* GetPawn(); // Function Engine.PlayerState.GetPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93303ac
	struct FUniqueNetIdRepl BP_GetUniqueId(); // Function Engine.PlayerState.BP_GetUniqueId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x75c1570
};

// Class Engine.CapsuleComponent
// Size: 0x560 (Inherited: 0x550)
struct UCapsuleComponent : UShapeComponent {
	float CapsuleHalfHeight; // 0x550(0x04)
	float CapsuleRadius; // 0x554(0x04)
	char pad_558[0x8]; // 0x558(0x08)

	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleSize // (Final|Native|Public|BlueprintCallable) // @ game+0x929f36c
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x929f298
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x929f1c4
	void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d854
	void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2951f98
	float GetUnscaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d83c
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d818
	float GetUnscaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d800
	float GetShapeScale(); // Function Engine.CapsuleComponent.GetShapeScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d694
	void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d544
	void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetScaledCapsuleSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d420
	float GetScaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetScaledCapsuleRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x232827c
	float GetScaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d3c4
	float GetScaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2543268
};

// Class Engine.SoundNode
// Size: 0x48 (Inherited: 0x28)
struct USoundNode : UObject {
	struct TArray<struct USoundNode*> ChildNodes; // 0x28(0x10)
	char pad_38[0x10]; // 0x38(0x10)
};

// Class Engine.WorldSettings
// Size: 0x4a8 (Inherited: 0x288)
struct AWorldSettings : AInfo {
	char pad_288[0x8]; // 0x288(0x08)
	int32_t VisibilityCellSize; // 0x290(0x04)
	enum class EVisibilityAggressiveness VisibilityAggressiveness; // 0x294(0x01)
	char bPrecomputeVisibility : 1; // 0x295(0x01)
	char bPlaceCellsOnlyAlongCameraTracks : 1; // 0x295(0x01)
	char bEnableLargeWorlds : 1; // 0x295(0x01)
	char bEnableWorldBoundsChecks : 1; // 0x295(0x01)
	char bEnableNavigationSystem : 1; // 0x295(0x01)
	char bEnableAISystem : 1; // 0x295(0x01)
	char bEnableWorldComposition : 1; // 0x295(0x01)
	char bUseClientSideLevelStreamingVolumes : 1; // 0x295(0x01)
	char bEnableWorldOriginRebasing : 1; // 0x296(0x01)
	char bWorldGravitySet : 1; // 0x296(0x01)
	char bGlobalGravitySet : 1; // 0x296(0x01)
	char bMinimizeBSPSections : 1; // 0x296(0x01)
	char bForceNoPrecomputedLighting : 1; // 0x296(0x01)
	char bHighPriorityLoading : 1; // 0x296(0x01)
	char bHighPriorityLoadingLocal : 1; // 0x296(0x01)
	char bOverrideDefaultBroadphaseSettings : 1; // 0x296(0x01)
	char bGenerateSingleClusterForLevel : 1; // 0x297(0x01)
	char pad_297_1 : 7; // 0x297(0x01)
	struct TSoftClassPtr<UObject> AISystemClass; // 0x298(0x28)
	struct FVector LevelInstancePivotOffset; // 0x2c0(0x18)
	struct UNavigationSystemConfig* NavigationSystemConfig; // 0x2d8(0x08)
	struct UNavigationSystemConfig* NavigationSystemConfigOverride; // 0x2e0(0x08)
	struct UWorldPartition* WorldPartition; // 0x2e8(0x08)
	struct TArray<struct UDataLayerAsset*> BaseNavmeshDataLayers; // 0x2f0(0x10)
	float WorldToMeters; // 0x300(0x04)
	float KillZ; // 0x304(0x04)
	struct UDamageType* KillZDamageType; // 0x308(0x08)
	float WorldGravityZ; // 0x310(0x04)
	float GlobalGravityZ; // 0x314(0x04)
	struct ADefaultPhysicsVolume* DefaultPhysicsVolumeClass; // 0x318(0x08)
	struct UPhysicsCollisionHandler* PhysicsCollisionHandlerClass; // 0x320(0x08)
	struct AGameModeBase* DefaultGameMode; // 0x328(0x08)
	struct AGameNetworkManager* GameNetworkManagerClass; // 0x330(0x08)
	int32_t PackedLightAndShadowMapTextureSize; // 0x338(0x04)
	char pad_33C[0x4]; // 0x33c(0x04)
	struct FVector DefaultColorScale; // 0x340(0x18)
	float DefaultMaxDistanceFieldOcclusionDistance; // 0x358(0x04)
	float GlobalDistanceFieldViewDistance; // 0x35c(0x04)
	float DynamicIndirectShadowsSelfShadowingIntensity; // 0x360(0x04)
	char pad_364[0x4]; // 0x364(0x04)
	struct FReverbSettings DefaultReverbSettings; // 0x368(0x20)
	struct FInteriorSettings DefaultAmbientZoneSettings; // 0x388(0x24)
	char pad_3AC[0x4]; // 0x3ac(0x04)
	struct USoundMix* DefaultBaseSoundMix; // 0x3b0(0x08)
	float TimeDilation; // 0x3b8(0x04)
	float CinematicTimeDilation; // 0x3bc(0x04)
	float DemoPlayTimeDilation; // 0x3c0(0x04)
	float MinGlobalTimeDilation; // 0x3c4(0x04)
	float MaxGlobalTimeDilation; // 0x3c8(0x04)
	float MinUndilatedFrameTime; // 0x3cc(0x04)
	float MaxUndilatedFrameTime; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct FBroadphaseSettings BroadphaseSettings; // 0x3d8(0x80)
	struct TArray<struct FNetViewer> ReplicationViewers; // 0x458(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x468(0x10)
	struct APlayerState* PauserPlayerState; // 0x478(0x08)
	int32_t MaxNumberOfBookmarks; // 0x480(0x04)
	char pad_484[0x4]; // 0x484(0x04)
	struct UBookmarkBase* DefaultBookmarkClass; // 0x488(0x08)
	struct TArray<struct UBookmarkBase*> BookmarkArray; // 0x490(0x10)
	struct UBookmarkBase* LastBookmarkClass; // 0x4a0(0x08)

	void OnRep_WorldGravityZ(); // Function Engine.WorldSettings.OnRep_WorldGravityZ // (Native|Public) // @ game+0x230a2e8
};

// Class Engine.FloatingPawnMovement
// Size: 0x168 (Inherited: 0x150)
struct UFloatingPawnMovement : UPawnMovementComponent {
	float MaxSpeed; // 0x150(0x04)
	float Acceleration; // 0x154(0x04)
	float Deceleration; // 0x158(0x04)
	float TurningBoost; // 0x15c(0x04)
	char bPositionCorrected : 1; // 0x160(0x01)
	char pad_160_1 : 7; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)
};

// Class Engine.SpectatorPawnMovement
// Size: 0x170 (Inherited: 0x168)
struct USpectatorPawnMovement : UFloatingPawnMovement {
	char bIgnoreTimeDilation : 1; // 0x168(0x01)
	char pad_168_1 : 7; // 0x168(0x01)
	char pad_169[0x7]; // 0x169(0x07)
};

// Class Engine.SkyLight
// Size: 0x298 (Inherited: 0x288)
struct ASkyLight : AInfo {
	struct USkyLightComponent* LightComponent; // 0x288(0x08)
	char bEnabled : 1; // 0x290(0x01)
	char pad_290_1 : 7; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)

	void OnRep_bEnabled(); // Function Engine.SkyLight.OnRep_bEnabled // (Native|Public) // @ game+0x230a2e8
};

// Class Engine.TextureCube
// Size: 0x160 (Inherited: 0x158)
struct UTextureCube : UTexture {
	char pad_158[0x8]; // 0x158(0x08)
};

// Class Engine.InstancedStaticMeshComponent
// Size: 0x730 (Inherited: 0x5f0)
struct UInstancedStaticMeshComponent : UStaticMeshComponent {
	char pad_5F0[0x8]; // 0x5f0(0x08)
	struct TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData; // 0x5f8(0x10)
	struct TArray<struct FMatrix> PerInstancePrevTransform; // 0x608(0x10)
	int32_t NumCustomDataFloats; // 0x618(0x04)
	char pad_61C[0x4]; // 0x61c(0x04)
	struct TArray<float> PerInstanceSMCustomData; // 0x620(0x10)
	int32_t InstancingRandomSeed; // 0x630(0x04)
	char pad_634[0x4]; // 0x634(0x04)
	struct TArray<struct FInstancedStaticMeshRandomSeed> AdditionalRandomSeeds; // 0x638(0x10)
	int32_t InstanceStartCullDistance; // 0x648(0x04)
	int32_t InstanceEndCullDistance; // 0x64c(0x04)
	struct TArray<int32_t> InstanceReorderTable; // 0x650(0x10)
	char pad_660[0xb8]; // 0x660(0xb8)
	int32_t NumPendingLightmaps; // 0x718(0x04)
	char pad_71C[0x4]; // 0x71c(0x04)
	struct TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings; // 0x720(0x10)

	bool UpdateInstanceTransform(int32_t InstanceIndex, struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92c7904
	bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // Function Engine.InstancedStaticMeshComponent.SetCustomDataValue // (Native|Public|BlueprintCallable) // @ game+0x92c77bc
	void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance); // Function Engine.InstancedStaticMeshComponent.SetCullDistances // (Final|Native|Public|BlueprintCallable) // @ game+0x2820898
	bool RemoveInstances(struct TArray<int32_t>& InstancesToRemove); // Function Engine.InstancedStaticMeshComponent.RemoveInstances // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c7684
	bool RemoveInstance(int32_t InstanceIndex); // Function Engine.InstancedStaticMeshComponent.RemoveInstance // (Native|Public|BlueprintCallable) // @ game+0x92c75f0
	bool IsValidInstance(int32_t InstanceIndex); // Function Engine.InstancedStaticMeshComponent.IsValidInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c72f4
	bool GetInstanceTransform(int32_t InstanceIndex, struct FTransform& OutInstanceTransform, bool bWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstanceTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c6cb8
	struct TArray<int32_t> GetInstancesOverlappingSphere(struct FVector& Center, float Radius, bool bSphereInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c6f74
	struct TArray<int32_t> GetInstancesOverlappingBox(struct FBox& Box, bool bBoxInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c6e38
	int32_t GetInstanceCount(); // Function Engine.InstancedStaticMeshComponent.GetInstanceCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c6ca0
	void ClearInstances(); // Function Engine.InstancedStaticMeshComponent.ClearInstances // (Native|Public|BlueprintCallable) // @ game+0x92c65d4
	bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, struct TArray<struct FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c640c
	bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92c61b0
	int32_t AddInstanceWorldSpace(struct FTransform& WorldTransform); // Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92c5f40
	struct TArray<int32_t> AddInstances(struct TArray<struct FTransform>& InstanceTransforms, bool bShouldReturnIndices, bool bWorldSpace); // Function Engine.InstancedStaticMeshComponent.AddInstances // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c6048
	int32_t AddInstance(struct FTransform& InstanceTransform, bool bWorldSpace); // Function Engine.InstancedStaticMeshComponent.AddInstance // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92c5dfc
};

// Class Engine.HierarchicalInstancedStaticMeshComponent
// Size: 0x8c0 (Inherited: 0x730)
struct UHierarchicalInstancedStaticMeshComponent : UInstancedStaticMeshComponent {
	char pad_730[0x10]; // 0x730(0x10)
	char bUseTranslatedInstanceSpace : 1; // 0x740(0x01)
	char pad_740_1 : 7; // 0x740(0x01)
	char pad_741[0x7]; // 0x741(0x07)
	struct FVector TranslatedInstanceSpaceOrigin; // 0x748(0x18)
	struct TArray<int32_t> SortedInstances; // 0x760(0x10)
	int32_t NumBuiltInstances; // 0x770(0x04)
	char pad_774[0x4]; // 0x774(0x04)
	struct FBox BuiltInstanceBounds; // 0x778(0x38)
	struct FBox UnbuiltInstanceBounds; // 0x7b0(0x38)
	struct TArray<struct FBox> UnbuiltInstanceBoundsList; // 0x7e8(0x10)
	char bEnableDensityScaling : 1; // 0x7f8(0x01)
	char pad_7F8_1 : 7; // 0x7f8(0x01)
	char pad_7F9[0x7]; // 0x7f9(0x07)
	int32_t OcclusionLayerNumNodes; // 0x800(0x04)
	char pad_804[0x4]; // 0x804(0x04)
	struct FBoxSphereBounds CacheMeshExtendedBounds; // 0x808(0x38)
	bool bDisableCollision; // 0x840(0x01)
	char pad_841[0x3]; // 0x841(0x03)
	int32_t InstanceCountToRender; // 0x844(0x04)
	char pad_848[0x78]; // 0x848(0x78)
};

// Class Engine.PartitionActor
// Size: 0x288 (Inherited: 0x288)
struct APartitionActor : AActor {
};

// Class Engine.ISMPartitionActor
// Size: 0x298 (Inherited: 0x288)
struct AISMPartitionActor : APartitionActor {
	char pad_288[0x10]; // 0x288(0x10)
};

// Class Engine.MaterialInterface
// Size: 0x98 (Inherited: 0x28)
struct UMaterialInterface : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct USubsurfaceProfile* SubsurfaceProfile; // 0x38(0x08)
	char pad_40[0x10]; // 0x40(0x10)
	struct FLightmassMaterialInterfaceSettings LightmassSettings; // 0x50(0x10)
	struct TArray<struct FMaterialTextureInfo> TextureStreamingData; // 0x60(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x70(0x10)
	char pad_80[0x18]; // 0x80(0x18)

	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // Function Engine.MaterialInterface.SetForceMipLevelsToBeResident // (RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x93194a8
	struct UPhysicalMaterialMask* GetPhysicalMaterialMask(); // Function Engine.MaterialInterface.GetPhysicalMaterialMask // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93187c8
	struct UPhysicalMaterial* GetPhysicalMaterialFromMap(int32_t Index); // Function Engine.MaterialInterface.GetPhysicalMaterialFromMap // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9318734
	struct UPhysicalMaterial* GetPhysicalMaterial(); // Function Engine.MaterialInterface.GetPhysicalMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x931870c
	struct FMaterialParameterInfo GetParameterInfo(enum class EMaterialParameterAssociation Association, struct FName ParameterName, struct UMaterialFunctionInterface* LayerFunction); // Function Engine.MaterialInterface.GetParameterInfo // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9318538
	enum class EBlendMode GetBlendMode(); // Function Engine.MaterialInterface.GetBlendMode // (RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d94074
	struct UMaterial* GetBaseMaterial(); // Function Engine.MaterialInterface.GetBaseMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x273be80
};

// Class Engine.MaterialInstance
// Size: 0x1b8 (Inherited: 0x98)
struct UMaterialInstance : UMaterialInterface {
	struct UPhysicalMaterial* PhysMaterial; // 0x98(0x08)
	struct UPhysicalMaterial* PhysicalMaterialMap[0x8]; // 0xa0(0x40)
	struct UMaterialInterface* Parent; // 0xe0(0x08)
	char bHasStaticPermutationResource : 1; // 0xe8(0x01)
	char bOverrideSubsurfaceProfile : 1; // 0xe8(0x01)
	char pad_E8_2 : 6; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct TArray<struct FScalarParameterValue> ScalarParameterValues; // 0xf0(0x10)
	struct TArray<struct FVectorParameterValue> VectorParameterValues; // 0x100(0x10)
	struct TArray<struct FDoubleVectorParameterValue> DoubleVectorParameterValues; // 0x110(0x10)
	struct TArray<struct FTextureParameterValue> TextureParameterValues; // 0x120(0x10)
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0x130(0x10)
	struct TArray<struct FFontParameterValue> FontParameterValues; // 0x140(0x10)
	struct FMaterialInstanceBasePropertyOverrides BasePropertyOverrides; // 0x150(0x08)
	char pad_158[0x8]; // 0x158(0x08)
	struct FStaticParameterSetRuntimeData StaticParametersRuntime; // 0x160(0x28)
	char pad_188[0x30]; // 0x188(0x30)
};

// Class Engine.MaterialInstanceConstant
// Size: 0x1c0 (Inherited: 0x1b8)
struct UMaterialInstanceConstant : UMaterialInstance {
	struct UPhysicalMaterialMask* PhysMaterialMask; // 0x1b8(0x08)

	struct FLinearColor K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9318b1c
	struct UTexture* K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x24dead8
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x9318914
};

// Class Engine.EngineCustomTimeStep
// Size: 0x28 (Inherited: 0x28)
struct UEngineCustomTimeStep : UObject {
};

// Class Engine.EdGraphNode
// Size: 0x98 (Inherited: 0x28)
struct UEdGraphNode : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TArray<struct UEdGraphPin_Deprecated*> DeprecatedPins; // 0x38(0x10)
	int32_t NodePosX; // 0x48(0x04)
	int32_t NodePosY; // 0x4c(0x04)
	int32_t NodeWidth; // 0x50(0x04)
	int32_t NodeHeight; // 0x54(0x04)
	enum class ENodeAdvancedPins AdvancedPinDisplay; // 0x58(0x01)
	enum class ENodeEnabledState EnabledState; // 0x59(0x01)
	char pad_5A[0x1]; // 0x5a(0x01)
	char pad_5B_0 : 1; // 0x5b(0x01)
	char bDisplayAsDisabled : 1; // 0x5b(0x01)
	char bUserSetEnabledState : 1; // 0x5b(0x01)
	char pad_5B_3 : 1; // 0x5b(0x01)
	char bHasCompilerMessage : 1; // 0x5b(0x01)
	char pad_5B_5 : 3; // 0x5b(0x01)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct FString NodeComment; // 0x60(0x10)
	int32_t ErrorType; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	struct FString ErrorMsg; // 0x78(0x10)
	struct FGuid NodeGUID; // 0x88(0x10)
};

// Class Engine.ActiveSoundUpdateInterface
// Size: 0x28 (Inherited: 0x28)
struct UActiveSoundUpdateInterface : UInterface {
};

// Class Engine.ActorChannel
// Size: 0x290 (Inherited: 0x68)
struct UActorChannel : UChannel {
	struct AActor* Actor; // 0x68(0x08)
	char pad_70[0xe8]; // 0x70(0xe8)
	struct TArray<struct UObject*> CreateSubObjects; // 0x158(0x10)
	char pad_168[0x128]; // 0x168(0x128)
};

// Class Engine.ActorDescContainer
// Size: 0x30 (Inherited: 0x28)
struct UActorDescContainer : UObject {
	struct UWorld* World; // 0x28(0x08)
};

// Class Engine.ActorElementAssetDataInterface
// Size: 0x30 (Inherited: 0x28)
struct UActorElementAssetDataInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ActorElementCounterInterface
// Size: 0x30 (Inherited: 0x28)
struct UActorElementCounterInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ActorElementHierarchyInterface
// Size: 0x30 (Inherited: 0x28)
struct UActorElementHierarchyInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ActorElementObjectInterface
// Size: 0x30 (Inherited: 0x28)
struct UActorElementObjectInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ActorElementSelectionInterface
// Size: 0x30 (Inherited: 0x28)
struct UActorElementSelectionInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ActorElementWorldInterface
// Size: 0x30 (Inherited: 0x28)
struct UActorElementWorldInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.Level
// Size: 0x310 (Inherited: 0x28)
struct ULevel : UObject {
	char pad_28[0x90]; // 0x28(0x90)
	struct UWorld* OwningWorld; // 0xb8(0x08)
	struct UModel* Model; // 0xc0(0x08)
	struct TArray<struct UModelComponent*> ModelComponents; // 0xc8(0x10)
	struct ULevelActorContainer* ActorCluster; // 0xd8(0x08)
	int32_t NumTextureStreamingUnbuiltComponents; // 0xe0(0x04)
	int32_t NumTextureStreamingDirtyResources; // 0xe4(0x04)
	struct ALevelScriptActor* LevelScriptActor; // 0xe8(0x08)
	struct ANavigationObjectBase* NavListStart; // 0xf0(0x08)
	struct ANavigationObjectBase* NavListEnd; // 0xf8(0x08)
	struct TArray<struct UNavigationDataChunk*> NavDataChunks; // 0x100(0x10)
	float LightmapTotalSize; // 0x110(0x04)
	float ShadowmapTotalSize; // 0x114(0x04)
	struct TArray<struct FVector> StaticNavigableGeometry; // 0x118(0x10)
	struct TArray<struct FGuid> StreamingTextureGuids; // 0x128(0x10)
	struct TArray<struct FName> StreamingTextures; // 0x138(0x10)
	uint32_t PackedTextureStreamingQualityLevelFeatureLevel; // 0x148(0x04)
	char pad_14C[0xc4]; // 0x14c(0xc4)
	struct FGuid LevelBuildDataId; // 0x210(0x10)
	struct UMapBuildDataRegistry* MapBuildData; // 0x220(0x08)
	struct FIntVector LightBuildLevelOffset; // 0x228(0x0c)
	char bIsLightingScenario : 1; // 0x234(0x01)
	char pad_234_1 : 2; // 0x234(0x01)
	char bTextureStreamingRotationChanged : 1; // 0x234(0x01)
	char bStaticComponentsRegisteredInStreamingManager : 1; // 0x234(0x01)
	char bIsVisible : 1; // 0x234(0x01)
	char pad_234_6 : 2; // 0x234(0x01)
	char pad_235[0x1]; // 0x235(0x01)
	char pad_236_0 : 6; // 0x236(0x01)
	char bIsPartitioned : 1; // 0x236(0x01)
	char pad_236_7 : 1; // 0x236(0x01)
	char pad_237[0x61]; // 0x237(0x61)
	struct AWorldSettings* WorldSettings; // 0x298(0x08)
	struct AWorldDataLayers* WorldDataLayers; // 0x2a0(0x08)
	struct TSoftObjectPtr<UWorldPartitionRuntimeCell> WorldPartitionRuntimeCell; // 0x2a8(0x28)
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x2d8(0x10)
	char pad_2E8[0x10]; // 0x2e8(0x10)
	struct TArray<struct FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors; // 0x2f8(0x10)
	char pad_308[0x8]; // 0x308(0x08)
};

// Class Engine.ActorFolder
// Size: 0x28 (Inherited: 0x28)
struct UActorFolder : UObject {
};

// Class Engine.ActorPartitionSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UActorPartitionSubsystem : UWorldSubsystem {
};

// Class Engine.ActorSoundParameterInterface
// Size: 0x28 (Inherited: 0x28)
struct UActorSoundParameterInterface : UInterface {

	void GetActorSoundParams(struct TArray<struct FAudioParameter>& Params); // Function Engine.ActorSoundParameterInterface.GetActorSoundParams // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0xd67374
};

// Class Engine.ActorTextureStreamingBuildDataComponent
// Size: 0xa0 (Inherited: 0xa0)
struct UActorTextureStreamingBuildDataComponent : UActorComponent {
};

// Class Engine.AnimationAsset
// Size: 0x80 (Inherited: 0x28)
struct UAnimationAsset : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct USkeleton* Skeleton; // 0x38(0x08)
	char pad_40[0x20]; // 0x40(0x20)
	struct TArray<struct UAnimMetaData*> MetaData; // 0x60(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x70(0x10)

	float GetPlayLength(); // Function Engine.AnimationAsset.GetPlayLength // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26bbdac
};

// Class Engine.BlendSpace
// Size: 0x1a0 (Inherited: 0x80)
struct UBlendSpace : UAnimationAsset {
	char pad_80[0x8]; // 0x80(0x08)
	bool bRotationBlendInMeshSpace; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	struct FInterpolationParameter InterpolationParam[0x3]; // 0x8c(0x30)
	float TargetWeightInterpolationSpeedPerSec; // 0xbc(0x04)
	bool bTargetWeightInterpolationEaseInOut; // 0xc0(0x01)
	bool bLoop; // 0xc1(0x01)
	char pad_C2[0x2]; // 0xc2(0x02)
	float AnimLength; // 0xc4(0x04)
	enum class ENotifyTriggerMode NotifyTriggerMode; // 0xc8(0x01)
	bool bInterpolateUsingGrid; // 0xc9(0x01)
	enum class EPreferredTriangulationDirection PreferredTriangulationDirection; // 0xca(0x01)
	char pad_CB[0x5]; // 0xcb(0x05)
	struct TArray<struct FPerBoneInterpolation> PerBoneBlend; // 0xd0(0x10)
	int32_t SampleIndexWithMarkers; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct TArray<struct FBlendSample> SampleData; // 0xe8(0x10)
	struct TArray<struct FEditorElement> GridSamples; // 0xf8(0x10)
	struct FBlendSpaceData BlendSpaceData; // 0x108(0x20)
	struct FBlendParameter BlendParameters[0x3]; // 0x128(0x60)
	enum class EBlendSpaceAxis AxisToScaleAnimation; // 0x188(0x01)
	char pad_189[0x7]; // 0x189(0x07)
	struct TArray<int32_t> DimensionIndices; // 0x190(0x10)
};

// Class Engine.AimOffsetBlendSpace
// Size: 0x1a0 (Inherited: 0x1a0)
struct UAimOffsetBlendSpace : UBlendSpace {
};

// Class Engine.BlendSpace1D
// Size: 0x1a8 (Inherited: 0x1a0)
struct UBlendSpace1D : UBlendSpace {
	bool bScaleAnimation; // 0x1a0(0x01)
	char pad_1A1[0x7]; // 0x1a1(0x07)
};

// Class Engine.AimOffsetBlendSpace1D
// Size: 0x1a8 (Inherited: 0x1a8)
struct UAimOffsetBlendSpace1D : UBlendSpace1D {
};

// Class Engine.AISystemBase
// Size: 0x58 (Inherited: 0x28)
struct UAISystemBase : UObject {
	struct FSoftClassPath AISystemClassName; // 0x28(0x18)
	struct FName AISystemModuleName; // 0x40(0x04)
	char pad_44[0xc]; // 0x44(0x0c)
	bool bInstantiateAISystemOnClient; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Engine.AmbientSound
// Size: 0x290 (Inherited: 0x288)
struct AAmbientSound : AActor {
	struct UAudioComponent* AudioComponent; // 0x288(0x08)

	void Stop(); // Function Engine.AmbientSound.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x927ca28
	void Play(float StartTime); // Function Engine.AmbientSound.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x927c714
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeOut // (Final|Native|Public|BlueprintCallable) // @ game+0x927c604
	void FadeIn(float FadeInDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeIn // (Final|Native|Public|BlueprintCallable) // @ game+0x927c530
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel); // Function Engine.AmbientSound.AdjustVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x927c460
};

// Class Engine.AnimationAssetExtensions
// Size: 0x28 (Inherited: 0x28)
struct UAnimationAssetExtensions : UBlueprintFunctionLibrary {
};

// Class Engine.AnimationSettings
// Size: 0x108 (Inherited: 0x30)
struct UAnimationSettings : UDeveloperSettings {
	int32_t CompressCommandletVersion; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct FString> KeyEndEffectorsMatchNameArray; // 0x38(0x10)
	bool ForceRecompression; // 0x48(0x01)
	bool bForceBelowThreshold; // 0x49(0x01)
	bool bFirstRecompressUsingCurrentOrDefault; // 0x4a(0x01)
	bool bRaiseMaxErrorToExisting; // 0x4b(0x01)
	bool bEnablePerformanceLog; // 0x4c(0x01)
	bool bStripAnimationDataOnDedicatedServer; // 0x4d(0x01)
	bool bTickAnimationOnSkeletalMeshInit; // 0x4e(0x01)
	char pad_4F[0x1]; // 0x4f(0x01)
	struct FTimecodeCustomAttributeNameSettings BoneTimecodeCustomAttributeNameSettings; // 0x50(0x1c)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct TArray<struct FCustomAttributeSetting> BoneCustomAttributesNames; // 0x70(0x10)
	struct TArray<struct FString> BoneNamesWithCustomAttributes; // 0x80(0x10)
	struct TMap<struct FName, enum class ECustomAttributeBlendType> AttributeBlendModes; // 0x90(0x50)
	enum class ECustomAttributeBlendType DefaultAttributeBlendMode; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
	struct TArray<struct FString> TransformAttributeNames; // 0xe8(0x10)
	struct TArray<struct FMirrorFindReplaceExpression> MirrorFindReplaceExpressions; // 0xf8(0x10)

	struct TArray<struct FString> GetBoneCustomAttributeNamesToImport(); // Function Engine.AnimationSettings.GetBoneCustomAttributeNamesToImport // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927d9f4
};

// Class Engine.AnimBlueprint
// Size: 0xd0 (Inherited: 0xa8)
struct UAnimBlueprint : UBlueprint {
	char pad_A8[0x8]; // 0xa8(0x08)
	struct USkeleton* TargetSkeleton; // 0xb0(0x08)
	struct TArray<struct FAnimGroupInfo> Groups; // 0xb8(0x10)
	bool bIsTemplate; // 0xc8(0x01)
	bool bUseMultiThreadedAnimationUpdate; // 0xc9(0x01)
	bool bWarnAboutBlueprintUsage; // 0xca(0x01)
	char pad_CB[0x5]; // 0xcb(0x05)
};

// Class Engine.AnimBlueprintClassSubsystem_PropertyAccess
// Size: 0x28 (Inherited: 0x28)
struct UAnimBlueprintClassSubsystem_PropertyAccess : UObject {
};

// Class Engine.AnimBlueprintGeneratedStruct
// Size: 0xc0 (Inherited: 0xc0)
struct UAnimBlueprintGeneratedStruct : UScriptStruct {
};

// Class Engine.AnimBlueprintGeneratedClass
// Size: 0x5e8 (Inherited: 0x380)
struct UAnimBlueprintGeneratedClass : UBlueprintGeneratedClass {
	char pad_380[0x8]; // 0x380(0x08)
	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines; // 0x388(0x10)
	struct USkeleton* TargetSkeleton; // 0x398(0x08)
	struct TArray<struct FAnimNotifyEvent> AnimNotifies; // 0x3a0(0x10)
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x3b0(0x50)
	char pad_400[0x80]; // 0x400(0x80)
	struct TArray<struct FName> SyncGroupNames; // 0x480(0x10)
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation; // 0x490(0x50)
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions; // 0x4e0(0x50)
	struct TArray<struct FAnimNodeData> AnimNodeData; // 0x530(0x10)
	struct TMap<struct UScriptStruct*, struct FAnimNodeStructData> NodeTypeMap; // 0x540(0x50)
	char pad_590[0x58]; // 0x590(0x58)
};

// Class Engine.AnimBoneCompressionSettings
// Size: 0x38 (Inherited: 0x28)
struct UAnimBoneCompressionSettings : UObject {
	struct TArray<struct UAnimBoneCompressionCodec*> Codecs; // 0x28(0x10)
};

// Class Engine.AnimClassData
// Size: 0x258 (Inherited: 0x28)
struct UAnimClassData : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines; // 0x30(0x10)
	struct USkeleton* TargetSkeleton; // 0x40(0x08)
	struct TArray<struct FAnimNotifyEvent> AnimNotifies; // 0x48(0x10)
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x58(0x50)
	struct TArray<struct FAnimBlueprintFunction> AnimBlueprintFunctions; // 0xa8(0x10)
	struct TArray<struct FAnimBlueprintFunctionData> AnimBlueprintFunctionData; // 0xb8(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> AnimNodeProperties; // 0xc8(0x10)
	char pad_D8[0x10]; // 0xd8(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> LinkedAnimGraphNodeProperties; // 0xe8(0x10)
	char pad_F8[0x10]; // 0xf8(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> LinkedAnimLayerNodeProperties; // 0x108(0x10)
	char pad_118[0x10]; // 0x118(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> PreUpdateNodeProperties; // 0x128(0x10)
	char pad_138[0x10]; // 0x138(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> DynamicResetNodeProperties; // 0x148(0x10)
	char pad_158[0x10]; // 0x158(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> StateMachineNodeProperties; // 0x168(0x10)
	char pad_178[0x10]; // 0x178(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> InitializationNodeProperties; // 0x188(0x10)
	char pad_198[0x10]; // 0x198(0x10)
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers; // 0x1a8(0x50)
	struct TArray<struct FName> SyncGroupNames; // 0x1f8(0x10)
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions; // 0x208(0x50)
};

// Class Engine.AnimClassInterface
// Size: 0x28 (Inherited: 0x28)
struct UAnimClassInterface : UInterface {
};

// Class Engine.AnimSequenceBase
// Size: 0xb0 (Inherited: 0x80)
struct UAnimSequenceBase : UAnimationAsset {
	struct TArray<struct FAnimNotifyEvent> Notifies; // 0x80(0x10)
	float SequenceLength; // 0x90(0x04)
	float RateScale; // 0x94(0x04)
	bool bLoop; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct FRawCurveTracks RawCurveData; // 0xa0(0x10)
};

// Class Engine.AnimCompositeBase
// Size: 0xb0 (Inherited: 0xb0)
struct UAnimCompositeBase : UAnimSequenceBase {
};

// Class Engine.AnimComposite
// Size: 0xc0 (Inherited: 0xb0)
struct UAnimComposite : UAnimCompositeBase {
	struct FAnimTrack AnimationTrack; // 0xb0(0x10)
};

// Class Engine.AnimCompress
// Size: 0x40 (Inherited: 0x38)
struct UAnimCompress : UAnimBoneCompressionCodec {
	char bNeedsSkeleton : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	enum class AnimationCompressionFormat TranslationCompressionFormat; // 0x3c(0x01)
	enum class AnimationCompressionFormat RotationCompressionFormat; // 0x3d(0x01)
	enum class AnimationCompressionFormat ScaleCompressionFormat; // 0x3e(0x01)
	char pad_3F[0x1]; // 0x3f(0x01)
};

// Class Engine.AnimCompress_BitwiseCompressOnly
// Size: 0x40 (Inherited: 0x40)
struct UAnimCompress_BitwiseCompressOnly : UAnimCompress {
};

// Class Engine.AnimCompress_LeastDestructive
// Size: 0x40 (Inherited: 0x40)
struct UAnimCompress_LeastDestructive : UAnimCompress_BitwiseCompressOnly {
};

// Class Engine.AnimCompress_RemoveLinearKeys
// Size: 0x60 (Inherited: 0x40)
struct UAnimCompress_RemoveLinearKeys : UAnimCompress {
	float MaxPosDiff; // 0x40(0x04)
	float MaxAngleDiff; // 0x44(0x04)
	float MaxScaleDiff; // 0x48(0x04)
	float MaxEffectorDiff; // 0x4c(0x04)
	float MinEffectorDiff; // 0x50(0x04)
	float EffectorDiffSocket; // 0x54(0x04)
	float ParentKeyScale; // 0x58(0x04)
	char bRetarget : 1; // 0x5c(0x01)
	char bActuallyFilterLinearKeys : 1; // 0x5c(0x01)
	char pad_5C_2 : 6; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
};

// Class Engine.AnimCompress_PerTrackCompression
// Size: 0xd8 (Inherited: 0x60)
struct UAnimCompress_PerTrackCompression : UAnimCompress_RemoveLinearKeys {
	float MaxZeroingThreshold; // 0x60(0x04)
	float MaxPosDiffBitwise; // 0x64(0x04)
	float MaxAngleDiffBitwise; // 0x68(0x04)
	float MaxScaleDiffBitwise; // 0x6c(0x04)
	struct TArray<enum class AnimationCompressionFormat> AllowedRotationFormats; // 0x70(0x10)
	struct TArray<enum class AnimationCompressionFormat> AllowedTranslationFormats; // 0x80(0x10)
	struct TArray<enum class AnimationCompressionFormat> AllowedScaleFormats; // 0x90(0x10)
	char bResampleAnimation : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	float ResampledFramerate; // 0xa4(0x04)
	int32_t MinKeysForResampling; // 0xa8(0x04)
	char bUseAdaptiveError : 1; // 0xac(0x01)
	char bUseOverrideForEndEffectors : 1; // 0xac(0x01)
	char pad_AC_2 : 6; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
	int32_t TrackHeightBias; // 0xb0(0x04)
	float ParentingDivisor; // 0xb4(0x04)
	float ParentingDivisorExponent; // 0xb8(0x04)
	char bUseAdaptiveError2 : 1; // 0xbc(0x01)
	char pad_BC_1 : 7; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
	float RotationErrorSourceRatio; // 0xc0(0x04)
	float TranslationErrorSourceRatio; // 0xc4(0x04)
	float ScaleErrorSourceRatio; // 0xc8(0x04)
	float MaxErrorPerTrackRatio; // 0xcc(0x04)
	float PerturbationProbeSize; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
};

// Class Engine.AnimCompress_RemoveEverySecondKey
// Size: 0x48 (Inherited: 0x40)
struct UAnimCompress_RemoveEverySecondKey : UAnimCompress {
	int32_t MinKeys; // 0x40(0x04)
	char bStartAtSecondKey : 1; // 0x44(0x01)
	char pad_44_1 : 7; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
};

// Class Engine.AnimCompress_RemoveTrivialKeys
// Size: 0x50 (Inherited: 0x40)
struct UAnimCompress_RemoveTrivialKeys : UAnimCompress {
	float MaxPosDiff; // 0x40(0x04)
	float MaxAngleDiff; // 0x44(0x04)
	float MaxScaleDiff; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec_CompressedRichCurve : UAnimCurveCompressionCodec {
};

// Class Engine.AnimCurveCompressionCodec_UniformIndexable
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec_UniformIndexable : UAnimCurveCompressionCodec {
};

// Class Engine.AnimCurveCompressionCodec_UniformlySampled
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec_UniformlySampled : UAnimCurveCompressionCodec {
};

// Class Engine.AnimCurveCompressionSettings
// Size: 0x30 (Inherited: 0x28)
struct UAnimCurveCompressionSettings : UObject {
	struct UAnimCurveCompressionCodec* Codec; // 0x28(0x08)
};

// Class Engine.AnimDataModel
// Size: 0xb0 (Inherited: 0x28)
struct UAnimDataModel : UObject {
	int32_t BracketCounter; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct FMulticastInlineDelegate ModifiedEventDynamic; // 0x30(0x10)
	char pad_40[0x18]; // 0x40(0x18)
	struct TArray<struct FBoneAnimationTrack> BoneAnimationTracks; // 0x58(0x10)
	float PlayLength; // 0x68(0x04)
	struct FFrameRate FrameRate; // 0x6c(0x08)
	int32_t NumberOfFrames; // 0x74(0x04)
	int32_t NumberOfKeys; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FAnimationCurveData CurveData; // 0x80(0x20)
	struct TArray<struct FAnimatedBoneAttribute> AnimatedBoneAttributes; // 0xa0(0x10)

	bool IsValidBoneTrackIndex(int32_t TrackIndex); // Function Engine.AnimDataModel.IsValidBoneTrackIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9280b64
	float GetPlayLength(); // Function Engine.AnimDataModel.GetPlayLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92802a0
	int32_t GetNumBoneTracks(); // Function Engine.AnimDataModel.GetNumBoneTracks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9280260
	int32_t GetNumberOfTransformCurves(); // Function Engine.AnimDataModel.GetNumberOfTransformCurves // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x656019c
	int32_t GetNumberOfKeys(); // Function Engine.AnimDataModel.GetNumberOfKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x686ef84
	int32_t GetNumberOfFrames(); // Function Engine.AnimDataModel.GetNumberOfFrames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9280274
	int32_t GetNumberOfFloatCurves(); // Function Engine.AnimDataModel.GetNumberOfFloatCurves // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x922a860
	struct FFrameRate GetFrameRate(); // Function Engine.AnimDataModel.GetFrameRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927f5c8
	void GetBoneTrackNames(struct TArray<struct FName>& OutNames); // Function Engine.AnimDataModel.GetBoneTrackNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x927f38c
	int32_t GetBoneTrackIndexByName(struct FName TrackName); // Function Engine.AnimDataModel.GetBoneTrackIndexByName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927f2dc
	int32_t GetBoneTrackIndex(struct FBoneAnimationTrack& Track); // Function Engine.AnimDataModel.GetBoneTrackIndex // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x927f214
	struct FBoneAnimationTrack GetBoneTrackByName(struct FName TrackName); // Function Engine.AnimDataModel.GetBoneTrackByName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927f160
	struct FBoneAnimationTrack GetBoneTrackByIndex(int32_t TrackIndex); // Function Engine.AnimDataModel.GetBoneTrackByIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927f0bc
	struct TArray<struct FBoneAnimationTrack> GetBoneAnimationTracks(); // Function Engine.AnimDataModel.GetBoneAnimationTracks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927f048
	struct UAnimSequence* GetAnimationSequence(); // Function Engine.AnimDataModel.GetAnimationSequence // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x927f008
};

// Class Engine.AnimationDataModelNotifiesExtensions
// Size: 0x28 (Inherited: 0x28)
struct UAnimationDataModelNotifiesExtensions : UBlueprintFunctionLibrary {
};

// Class Engine.AnimLayerInterface
// Size: 0x28 (Inherited: 0x28)
struct UAnimLayerInterface : UInterface {
};

// Class Engine.AnimMontage
// Size: 0x1f0 (Inherited: 0xb0)
struct UAnimMontage : UAnimCompositeBase {
	enum class EMontageBlendMode BlendModeIn; // 0xb0(0x01)
	enum class EMontageBlendMode BlendModeOut; // 0xb1(0x01)
	char pad_B2[0x6]; // 0xb2(0x06)
	struct FAlphaBlend BlendIn; // 0xb8(0x30)
	float BlendInTime; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct FAlphaBlend BlendOut; // 0xf0(0x30)
	float BlendOutTime; // 0x120(0x04)
	float BlendOutTriggerTime; // 0x124(0x04)
	struct FName SyncGroup; // 0x128(0x04)
	int32_t SyncSlotIndex; // 0x12c(0x04)
	struct FMarkerSyncData MarkerData; // 0x130(0x20)
	struct TArray<struct FCompositeSection> CompositeSections; // 0x150(0x10)
	struct TArray<struct FSlotAnimationTrack> SlotAnimTracks; // 0x160(0x10)
	struct TArray<struct FBranchingPoint> BranchingPoints; // 0x170(0x10)
	bool bEnableRootMotionTranslation; // 0x180(0x01)
	bool bEnableRootMotionRotation; // 0x181(0x01)
	bool bEnableAutoBlendOut; // 0x182(0x01)
	char pad_183[0x5]; // 0x183(0x05)
	struct UBlendProfile* BlendProfileIn; // 0x188(0x08)
	struct UBlendProfile* BlendProfileOut; // 0x190(0x08)
	enum class ERootMotionRootLock RootMotionRootLock; // 0x198(0x01)
	char pad_199[0x7]; // 0x199(0x07)
	struct TArray<struct FBranchingPointMarker> BranchingPointMarkers; // 0x1a0(0x10)
	struct TArray<int32_t> BranchingPointStateNotifyIndices; // 0x1b0(0x10)
	struct FTimeStretchCurve TimeStretchCurve; // 0x1c0(0x28)
	struct FName TimeStretchCurveName; // 0x1e8(0x04)
	char pad_1EC[0x4]; // 0x1ec(0x04)

	bool IsValidSectionName(struct FName InSectionName); // Function Engine.AnimMontage.IsValidSectionName // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92859a0
	struct FName GetSectionName(int32_t SectionIndex); // Function Engine.AnimMontage.GetSectionName // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x928591c
	int32_t GetSectionIndex(struct FName InSectionName); // Function Engine.AnimMontage.GetSectionIndex // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9285890
	int32_t GetNumSections(); // Function Engine.AnimMontage.GetNumSections // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x69f5e4c
	float GetDefaultBlendOutTime(); // Function Engine.AnimMontage.GetDefaultBlendOutTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x733b318
	float GetDefaultBlendInTime(); // Function Engine.AnimMontage.GetDefaultBlendInTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x63d8708
	struct FAlphaBlendArgs GetBlendOutArgs(); // Function Engine.AnimMontage.GetBlendOutArgs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x928584c
	struct FAlphaBlendArgs GetBlendInArgs(); // Function Engine.AnimMontage.GetBlendInArgs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9285808
	struct UAnimMontage* CreateSlotAnimationAsDynamicMontage_WithBlendSettings(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, struct FMontageBlendSettings& BlendInSettings, struct FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32_t LoopCount, float InBlendOutTriggerTime); // Function Engine.AnimMontage.CreateSlotAnimationAsDynamicMontage_WithBlendSettings // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92855b8
};

// Class Engine.AnimNotifyLibrary
// Size: 0x28 (Inherited: 0x28)
struct UAnimNotifyLibrary : UBlueprintFunctionLibrary {

	bool NotifyStateReachedEnd(struct FAnimNotifyEventReference& EventReference); // Function Engine.AnimNotifyLibrary.NotifyStateReachedEnd // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9286f50
};

// Class Engine.AnimNotifyMirrorInspectionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UAnimNotifyMirrorInspectionLibrary : UBlueprintFunctionLibrary {

	bool IsTriggeredByMirroredAnimation(struct FAnimNotifyEventReference& EventReference); // Function Engine.AnimNotifyMirrorInspectionLibrary.IsTriggeredByMirroredAnimation // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9286908
	struct UMirrorDataTable* GetMirrorDataTable(struct FAnimNotifyEventReference& EventReference); // Function Engine.AnimNotifyMirrorInspectionLibrary.GetMirrorDataTable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9286768
};

// Class Engine.AnimNotifyStateMachineInspectionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UAnimNotifyStateMachineInspectionLibrary : UBlueprintFunctionLibrary {

	bool IsTriggeredByStateMachine(struct FAnimNotifyEventReference& EventReference, struct UAnimInstance* AnimInstance, struct FName StateMachineName); // Function Engine.AnimNotifyStateMachineInspectionLibrary.IsTriggeredByStateMachine // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9286dd8
	bool IsTriggeredByStateInStateMachine(struct FAnimNotifyEventReference& EventReference, struct UAnimInstance* AnimInstance, struct FName StateMachineName, struct FName StateName); // Function Engine.AnimNotifyStateMachineInspectionLibrary.IsTriggeredByStateInStateMachine // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9286c10
	bool IsTriggeredByState(struct FAnimNotifyEventReference& EventReference, struct UAnimInstance* AnimInstance, struct FName StateName); // Function Engine.AnimNotifyStateMachineInspectionLibrary.IsTriggeredByState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92869e0
};

// Class Engine.AnimNotifyState_DisableRootMotion
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_DisableRootMotion : UAnimNotifyState {
};

// Class Engine.AnimNotifyState_TimedParticleEffect
// Size: 0x78 (Inherited: 0x30)
struct UAnimNotifyState_TimedParticleEffect : UAnimNotifyState {
	struct UParticleSystem* PSTemplate; // 0x30(0x08)
	struct FName SocketName; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FVector LocationOffset; // 0x40(0x18)
	struct FRotator RotationOffset; // 0x58(0x18)
	bool bDestroyAtEnd; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Engine.AnimNotifyState_Trail
// Size: 0x50 (Inherited: 0x30)
struct UAnimNotifyState_Trail : UAnimNotifyState {
	struct UParticleSystem* PSTemplate; // 0x30(0x08)
	struct FName FirstSocketName; // 0x38(0x04)
	struct FName SecondSocketName; // 0x3c(0x04)
	enum class ETrailWidthMode WidthScaleMode; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FName WidthScaleCurve; // 0x44(0x04)
	char bRecycleSpawnedSystems : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	struct UParticleSystem* OverridePSTemplate(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotifyState_Trail.OverridePSTemplate // (Event|Public|BlueprintEvent|Const) // @ game+0xd67374
};

// Class Engine.AnimNotify_PauseClothingSimulation
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_PauseClothingSimulation : UAnimNotify {
};

// Class Engine.AnimNotify_ResetClothingSimulation
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ResetClothingSimulation : UAnimNotify {
};

// Class Engine.AnimNotify_ResetDynamics
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ResetDynamics : UAnimNotify {
};

// Class Engine.AnimNotify_ResumeClothingSimulation
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ResumeClothingSimulation : UAnimNotify {
};

// Class Engine.AnimSequence
// Size: 0x1d8 (Inherited: 0xb0)
struct UAnimSequence : UAnimSequenceBase {
	struct UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xb0(0x08)
	struct UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xb8(0x08)
	char pad_C0[0x70]; // 0xc0(0x70)
	enum class EAdditiveAnimationType AdditiveAnimType; // 0x130(0x01)
	enum class EAdditiveBasePoseType RefPoseType; // 0x131(0x01)
	char pad_132[0x2]; // 0x132(0x02)
	int32_t RefFrameIndex; // 0x134(0x04)
	struct UAnimSequence* RefPoseSeq; // 0x138(0x08)
	struct FName RetargetSource; // 0x140(0x04)
	char pad_144[0x4]; // 0x144(0x04)
	struct TArray<struct FTransform> RetargetSourceAssetReferencePose; // 0x148(0x10)
	enum class EAnimInterpolationType Interpolation; // 0x158(0x01)
	bool bEnableRootMotion; // 0x159(0x01)
	enum class ERootMotionRootLock RootMotionRootLock; // 0x15a(0x01)
	bool bForceRootLock; // 0x15b(0x01)
	bool bUseNormalizedRootMotionScale; // 0x15c(0x01)
	bool bRootMotionSettingsCopiedFromMontage; // 0x15d(0x01)
	char pad_15E[0x2]; // 0x15e(0x02)
	struct TArray<struct FAnimSyncMarker> AuthoredSyncMarkers; // 0x160(0x10)
	char pad_170[0x10]; // 0x170(0x10)
	struct FFrameRate TargetFrameRate; // 0x180(0x08)
	struct TMap<struct FAnimationAttributeIdentifier, struct FAttributeCurve> AttributeCurves; // 0x188(0x50)
};

// Class Engine.AnimSet
// Size: 0xe8 (Inherited: 0x28)
struct UAnimSet : UObject {
	char bAnimRotationOnly : 1; // 0x28(0x01)
	char pad_28_1 : 7; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct TArray<struct FName> TrackBoneNames; // 0x30(0x10)
	struct TArray<struct FAnimSetMeshLinkup> LinkupCache; // 0x40(0x10)
	struct TArray<char> BoneUseAnimTranslation; // 0x50(0x10)
	struct TArray<char> ForceUseMeshTranslation; // 0x60(0x10)
	struct TArray<struct FName> UseTranslationBoneNames; // 0x70(0x10)
	struct TArray<struct FName> ForceMeshTranslationBoneNames; // 0x80(0x10)
	struct FName PreviewSkelMeshName; // 0x90(0x04)
	struct FName BestRatioSkelMeshName; // 0x94(0x04)
	char pad_98[0x50]; // 0x98(0x50)
};

// Class Engine.AnimSingleNodeInstance
// Size: 0x360 (Inherited: 0x350)
struct UAnimSingleNodeInstance : UAnimInstance {
	struct UAnimationAsset* CurrentAsset; // 0x348(0x08)
	struct FDelegate PostEvaluateAnimEvent; // 0x350(0x0c)

	void StopAnim(); // Function Engine.AnimSingleNodeInstance.StopAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x9288e54
	void SetReverse(bool bInReverse); // Function Engine.AnimSingleNodeInstance.SetReverse // (Final|Native|Public|BlueprintCallable) // @ game+0x9288dd4
	void SetPreviewCurveOverride(struct FName& PoseName, float Value, bool bRemoveIfZero); // Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9288cb8
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime // (Final|Native|Public|BlueprintCallable) // @ game+0x9288bbc
	void SetPosition(float InPosition, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x9288af0
	void SetPlayRate(float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x92889ec
	void SetPlaying(bool bIsPlaying); // Function Engine.AnimSingleNodeInstance.SetPlaying // (Final|Native|Public|BlueprintCallable) // @ game+0x9288a70
	void SetMirrorDataTable(struct UMirrorDataTable* MirrorDataTable); // Function Engine.AnimSingleNodeInstance.SetMirrorDataTable // (Final|Native|Public|BlueprintCallable) // @ game+0x9288918
	void SetLooping(bool bIsLooping); // Function Engine.AnimSingleNodeInstance.SetLooping // (Final|Native|Public|BlueprintCallable) // @ game+0x9288898
	void SetBlendSpacePosition(struct FVector& InPosition); // Function Engine.AnimSingleNodeInstance.SetBlendSpacePosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92887a8
	void SetAnimationAsset(struct UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetAnimationAsset // (Native|Public|BlueprintCallable) // @ game+0x92886a4
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition); // Function Engine.AnimSingleNodeInstance.PlayAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x9288598
	struct UMirrorDataTable* GetMirrorDataTable(); // Function Engine.AnimSingleNodeInstance.GetMirrorDataTable // (Final|Native|Public|BlueprintCallable) // @ game+0x9288228
	float GetLength(); // Function Engine.AnimSingleNodeInstance.GetLength // (Final|Native|Public|BlueprintCallable) // @ game+0x9288200
	struct UAnimationAsset* GetAnimationAsset(); // Function Engine.AnimSingleNodeInstance.GetAnimationAsset // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92881d8
};

// Class Engine.AnimStateMachineTypes
// Size: 0x28 (Inherited: 0x28)
struct UAnimStateMachineTypes : UObject {
};

// Class Engine.AnimStreamable
// Size: 0xe8 (Inherited: 0xb0)
struct UAnimStreamable : UAnimSequenceBase {
	int32_t NumberOfKeys; // 0xb0(0x04)
	enum class EAnimInterpolationType Interpolation; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	struct FName RetargetSource; // 0xb8(0x04)
	char pad_BC[0x14]; // 0xbc(0x14)
	struct UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xd0(0x08)
	struct UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xd8(0x08)
	bool bEnableRootMotion; // 0xe0(0x01)
	enum class ERootMotionRootLock RootMotionRootLock; // 0xe1(0x01)
	bool bForceRootLock; // 0xe2(0x01)
	bool bUseNormalizedRootMotionScale; // 0xe3(0x01)
	char pad_E4[0x4]; // 0xe4(0x04)
};

// Class Engine.RawAnimSequenceTrackExtensions
// Size: 0x28 (Inherited: 0x28)
struct URawAnimSequenceTrackExtensions : UBlueprintFunctionLibrary {

	struct TArray<struct FVector> GetScaleKeys(struct FRawAnimSequenceTrack& Track); // Function Engine.RawAnimSequenceTrackExtensions.GetScaleKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92884a4
	struct TArray<struct FQuat> GetRotationalKeys(struct FRawAnimSequenceTrack& Track); // Function Engine.RawAnimSequenceTrackExtensions.GetRotationalKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92883b0
	struct TArray<struct FVector> GetPositionalKeys(struct FRawAnimSequenceTrack& Track); // Function Engine.RawAnimSequenceTrackExtensions.GetPositionalKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92882bc
};

// Class Engine.ApplicationLifecycleComponent
// Size: 0x130 (Inherited: 0xa0)
struct UApplicationLifecycleComponent : UActorComponent {
	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0xa0(0x10)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0xb0(0x10)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0xc0(0x10)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0xd0(0x10)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0xe0(0x10)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0xf0(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x100(0x10)
	struct FMulticastInlineDelegate OnTemperatureChangeDelegate; // 0x110(0x10)
	struct FMulticastInlineDelegate OnLowPowerModeDelegate; // 0x120(0x10)
};

// Class Engine.ArrowComponent
// Size: 0x550 (Inherited: 0x530)
struct UArrowComponent : UPrimitiveComponent {
	struct FColor ArrowColor; // 0x530(0x04)
	float ArrowSize; // 0x534(0x04)
	float ArrowLength; // 0x538(0x04)
	float ScreenSize; // 0x53c(0x04)
	char bIsScreenSizeScaled : 1; // 0x540(0x01)
	char bTreatAsASprite : 1; // 0x540(0x01)
	char pad_540_2 : 6; // 0x540(0x01)
	char pad_541[0xf]; // 0x541(0x0f)

	void SetArrowColor(struct FLinearColor NewColor); // Function Engine.ArrowComponent.SetArrowColor // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9289eac
};

// Class Engine.AssetExportTask
// Size: 0x78 (Inherited: 0x28)
struct UAssetExportTask : UObject {
	struct UObject* Object; // 0x28(0x08)
	struct UExporter* Exporter; // 0x30(0x08)
	struct FString Filename; // 0x38(0x10)
	bool bSelected; // 0x48(0x01)
	bool bReplaceIdentical; // 0x49(0x01)
	bool bPrompt; // 0x4a(0x01)
	bool bAutomated; // 0x4b(0x01)
	bool bUseFileArchive; // 0x4c(0x01)
	bool bWriteEmptyFiles; // 0x4d(0x01)
	char pad_4E[0x2]; // 0x4e(0x02)
	struct TArray<struct UObject*> IgnoreObjectList; // 0x50(0x10)
	struct UObject* Options; // 0x60(0x08)
	struct TArray<struct FString> Errors; // 0x68(0x10)
};

// Class Engine.AssetImportData
// Size: 0x28 (Inherited: 0x28)
struct UAssetImportData : UObject {
};

// Class Engine.AssetManagerSettings
// Size: 0xf8 (Inherited: 0x30)
struct UAssetManagerSettings : UDeveloperSettings {
	struct TArray<struct FPrimaryAssetTypeInfo> PrimaryAssetTypesToScan; // 0x30(0x10)
	struct TArray<struct FDirectoryPath> DirectoriesToExclude; // 0x40(0x10)
	struct TArray<struct FPrimaryAssetRulesOverride> PrimaryAssetRules; // 0x50(0x10)
	struct TArray<struct FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules; // 0x60(0x10)
	bool bOnlyCookProductionAssets; // 0x70(0x01)
	bool bShouldManagerDetermineTypeAndName; // 0x71(0x01)
	bool bShouldGuessTypeAndNameInEditor; // 0x72(0x01)
	bool bShouldAcquireMissingChunksOnLoad; // 0x73(0x01)
	bool bShouldWarnAboutInvalidAssets; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetIdRedirects; // 0x78(0x10)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetTypeRedirects; // 0x88(0x10)
	struct TArray<struct FAssetManagerRedirect> AssetPathRedirects; // 0x98(0x10)
	struct TSet<struct FName> MetaDataTagsForAssetRegistry; // 0xa8(0x50)
};

// Class Engine.AssetMappingTable
// Size: 0x38 (Inherited: 0x28)
struct UAssetMappingTable : UObject {
	struct TArray<struct FAssetMapping> MappedAssets; // 0x28(0x10)
};

// Class Engine.AsyncActionHandleSaveGame
// Size: 0x68 (Inherited: 0x30)
struct UAsyncActionHandleSaveGame : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate Completed; // 0x30(0x10)
	char pad_40[0x20]; // 0x40(0x20)
	struct USaveGame* SaveGameObject; // 0x60(0x08)

	struct UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(struct UObject* WorldContextObject, struct USaveGame* SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9289ca4
	struct UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(struct UObject* WorldContextObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92895a4
};

// Class Engine.AsyncActionLoadPrimaryAssetBase
// Size: 0x78 (Inherited: 0x30)
struct UAsyncActionLoadPrimaryAssetBase : UBlueprintAsyncActionBase {
	char pad_30[0x48]; // 0x30(0x48)
};

// Class Engine.AsyncActionLoadPrimaryAsset
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAsset : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(struct UObject* WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x928976c
};

// Class Engine.AsyncActionLoadPrimaryAssetClass
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAssetClass : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(struct UObject* WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9289884
};

// Class Engine.AsyncActionLoadPrimaryAssetList
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAssetList : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9289b20
};

// Class Engine.AsyncActionLoadPrimaryAssetClassList
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAssetClassList : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x928999c
};

// Class Engine.AsyncActionChangePrimaryAssetBundles
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionChangePrimaryAssetBundles : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& AddBundles, struct TArray<struct FName>& RemoveBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92893a8
	struct UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(struct UObject* WorldContextObject, struct TArray<struct FName>& NewBundles, struct TArray<struct FName>& OldBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9289224
};

// Class Engine.AsyncPhysicsData
// Size: 0x30 (Inherited: 0x28)
struct UAsyncPhysicsData : UObject {
	int32_t ServerFrame; // 0x28(0x04)
	int32_t ReplicationRedundancy; // 0x2c(0x04)
};

// Class Engine.AsyncPhysicsInputComponent
// Size: 0xc8 (Inherited: 0xa0)
struct UAsyncPhysicsInputComponent : UActorComponent {
	struct UAsyncPhysicsData* DataClass; // 0xa0(0x08)
	struct TArray<struct UAsyncPhysicsData*> BufferedData; // 0xa8(0x10)
	struct UAsyncPhysicsData* DataToConsume; // 0xb8(0x08)
	struct UAsyncPhysicsData* DataToWrite; // 0xc0(0x08)

	void ServerRPCBufferInput(struct UAsyncPhysicsData* AsyncPhysicsData); // Function Engine.AsyncPhysicsInputComponent.ServerRPCBufferInput // (Net|Native|Event|Public|NetServer) // @ game+0x636963c
	struct UAsyncPhysicsData* GetDataToWrite(); // Function Engine.AsyncPhysicsInputComponent.GetDataToWrite // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x928a934
	struct UAsyncPhysicsData* GetDataToConsume(); // Function Engine.AsyncPhysicsInputComponent.GetDataToConsume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x928a910
};

// Class Engine.AtmosphericFog
// Size: 0x290 (Inherited: 0x288)
struct AAtmosphericFog : AInfo {
	struct UAtmosphericFogComponent* AtmosphericFogComponent; // 0x288(0x08)
};

// Class Engine.SkyAtmosphereComponent
// Size: 0x3a0 (Inherited: 0x2a0)
struct USkyAtmosphereComponent : USceneComponent {
	enum class ESkyAtmosphereTransformMode TransformMode; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	float BottomRadius; // 0x2a4(0x04)
	struct FColor GroundAlbedo; // 0x2a8(0x04)
	float AtmosphereHeight; // 0x2ac(0x04)
	float MultiScatteringFactor; // 0x2b0(0x04)
	float TraceSampleCountScale; // 0x2b4(0x04)
	float RayleighScatteringScale; // 0x2b8(0x04)
	struct FLinearColor RayleighScattering; // 0x2bc(0x10)
	float RayleighExponentialDistribution; // 0x2cc(0x04)
	float MieScatteringScale; // 0x2d0(0x04)
	struct FLinearColor MieScattering; // 0x2d4(0x10)
	float MieAbsorptionScale; // 0x2e4(0x04)
	struct FLinearColor MieAbsorption; // 0x2e8(0x10)
	float MieAnisotropy; // 0x2f8(0x04)
	float MieExponentialDistribution; // 0x2fc(0x04)
	float OtherAbsorptionScale; // 0x300(0x04)
	struct FLinearColor OtherAbsorption; // 0x304(0x10)
	struct FTentDistribution OtherTentDistribution; // 0x314(0x0c)
	struct FLinearColor SkyLuminanceFactor; // 0x320(0x10)
	float AerialPespectiveViewDistanceScale; // 0x330(0x04)
	float HeightFogContribution; // 0x334(0x04)
	float TransmittanceMinLightElevationAngle; // 0x338(0x04)
	float AerialPerspectiveStartDepth; // 0x33c(0x04)
	char pad_340[0x40]; // 0x340(0x40)
	struct FGuid bStaticLightingBuiltGUID; // 0x380(0x10)
	char pad_390[0x10]; // 0x390(0x10)

	void SetSkyLuminanceFactor(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93489c8
	void SetRayleighScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9348944
	void SetRayleighScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScattering // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93488bc
	void SetRayleighExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9348838
	void SetOtherAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x93487b4
	void SetOtherAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorption // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x934872c
	void SetMultiScatteringFactor(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMultiScatteringFactor // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9348518
	void SetMieScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScatteringScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9348410
	void SetMieScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScattering // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9348388
	void SetMieExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9348304
	void SetMieAnisotropy(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAnisotropy // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9348280
	void SetMieAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x93481fc
	void SetMieAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorption // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9348174
	void SetHeightFogContribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetHeightFogContribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9347e80
	void SetAtmosphereHeight(float NewValue); // Function Engine.SkyAtmosphereComponent.SetAtmosphereHeight // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9347c7c
	void SetAerialPespectiveViewDistanceScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9347bf8
	void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, struct FVector& LightDirection); // Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection // (Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9347b1c
	struct FLinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(struct UDirectionalLightComponent* DirectionalLight); // Function Engine.SkyAtmosphereComponent.GetAtmosphereTransmitanceOnGroundAtPlanetTop // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9347900
};

// Class Engine.AtmosphericFogComponent
// Size: 0x3a0 (Inherited: 0x3a0)
struct UAtmosphericFogComponent : USkyAtmosphereComponent {

	void SetSunMultiplier(float NewSunMultiplier); // Function Engine.AtmosphericFogComponent.SetSunMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x64a21bc
	void SetStartDistance(float NewStartDistance); // Function Engine.AtmosphericFogComponent.SetStartDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x64a21bc
	void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum); // Function Engine.AtmosphericFogComponent.SetPrecomputeParams // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x928ae80
	void SetFogMultiplier(float NewFogMultiplier); // Function Engine.AtmosphericFogComponent.SetFogMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x64a21bc
	void SetDistanceScale(float NewDistanceScale); // Function Engine.AtmosphericFogComponent.SetDistanceScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x64a21bc
	void SetDistanceOffset(float NewDistanceOffset); // Function Engine.AtmosphericFogComponent.SetDistanceOffset // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x64a21bc
	void SetDensityOffset(float NewDensityOffset); // Function Engine.AtmosphericFogComponent.SetDensityOffset // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x64a21bc
	void SetDensityMultiplier(float NewDensityMultiplier); // Function Engine.AtmosphericFogComponent.SetDensityMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x64a21bc
	void SetDefaultLightColor(struct FLinearColor NewLightColor); // Function Engine.AtmosphericFogComponent.SetDefaultLightColor // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x928ac1c
	void SetDefaultBrightness(float NewBrightness); // Function Engine.AtmosphericFogComponent.SetDefaultBrightness // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x64a21bc
	void SetAltitudeScale(float NewAltitudeScale); // Function Engine.AtmosphericFogComponent.SetAltitudeScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x64a21bc
	void DisableSunDisk(bool NewSunDisk); // Function Engine.AtmosphericFogComponent.DisableSunDisk // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x64a1f14
	void DisableGroundScattering(bool NewGroundScattering); // Function Engine.AtmosphericFogComponent.DisableGroundScattering // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x64a1f14
};

// Class Engine.AnimationAttributeIdentifierExtensions
// Size: 0x28 (Inherited: 0x28)
struct UAnimationAttributeIdentifierExtensions : UBlueprintFunctionLibrary {

	bool IsValid(struct FAnimationAttributeIdentifier& Identifier); // Function Engine.AnimationAttributeIdentifierExtensions.IsValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x928a9b8
};

// Class Engine.AudioBus
// Size: 0x30 (Inherited: 0x28)
struct UAudioBus : UObject {
	enum class EAudioBusChannels AudioBusChannels; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class Engine.InitialActiveSoundParams
// Size: 0x38 (Inherited: 0x28)
struct UInitialActiveSoundParams : UObject {
	struct TArray<struct FAudioParameter> AudioParams; // 0x28(0x10)
};

// Class Engine.AudioSubsystemCollectionRoot
// Size: 0x30 (Inherited: 0x28)
struct UAudioSubsystemCollectionRoot : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.AudioPanelWidgetInterface
// Size: 0x28 (Inherited: 0x28)
struct UAudioPanelWidgetInterface : UInterface {

	struct FName GetIconBrushName(); // Function Engine.AudioPanelWidgetInterface.GetIconBrushName // (Event|Public|BlueprintEvent) // @ game+0xd67374
	struct FText GetEditorName(); // Function Engine.AudioPanelWidgetInterface.GetEditorName // (Event|Public|BlueprintEvent) // @ game+0xd67374
};

// Class Engine.AudioSettings
// Size: 0x190 (Inherited: 0x30)
struct UAudioSettings : UDeveloperSettings {
	struct FSoftObjectPath DefaultSoundClassName; // 0x30(0x18)
	struct FSoftObjectPath DefaultMediaSoundClassName; // 0x48(0x18)
	struct FSoftObjectPath DefaultSoundConcurrencyName; // 0x60(0x18)
	struct FSoftObjectPath DefaultBaseSoundMix; // 0x78(0x18)
	struct FSoftObjectPath VoiPSoundClass; // 0x90(0x18)
	struct FSoftObjectPath MasterSubmix; // 0xa8(0x18)
	struct FSoftObjectPath BaseDefaultSubmix; // 0xc0(0x18)
	struct FSoftObjectPath ReverbSubmix; // 0xd8(0x18)
	struct FSoftObjectPath EQSubmix; // 0xf0(0x18)
	enum class EVoiceSampleRate VoiPSampleRate; // 0x108(0x04)
	enum class EDefaultAudioCompressionType DefaultAudioCompressionType; // 0x10c(0x01)
	char pad_10D[0x3]; // 0x10d(0x03)
	float DefaultReverbSendLevel; // 0x110(0x04)
	int32_t MaximumConcurrentStreams; // 0x114(0x04)
	float GlobalMinPitchScale; // 0x118(0x04)
	float GlobalMaxPitchScale; // 0x11c(0x04)
	struct TArray<struct FAudioQualitySettings> QualityLevels; // 0x120(0x10)
	char bAllowPlayWhenSilent : 1; // 0x130(0x01)
	char bDisableMasterEQ : 1; // 0x130(0x01)
	char bAllowCenterChannel3DPanning : 1; // 0x130(0x01)
	char pad_130_3 : 5; // 0x130(0x01)
	char pad_131[0x3]; // 0x131(0x03)
	uint32_t NumStoppingSources; // 0x134(0x04)
	enum class EPanningMethod PanningMethod; // 0x138(0x01)
	enum class EMonoChannelUpmixMethod MonoChannelUpmixMethod; // 0x139(0x01)
	char pad_13A[0x6]; // 0x13a(0x06)
	struct FString DialogueFilenameFormat; // 0x140(0x10)
	struct TArray<struct FSoundDebugEntry> DebugSounds; // 0x150(0x10)
	struct TArray<struct FDefaultAudioBusSettings> DefaultAudioBuses; // 0x160(0x10)
	struct USoundClass* DefaultSoundClass; // 0x170(0x08)
	struct USoundClass* DefaultMediaSoundClass; // 0x178(0x08)
	struct USoundConcurrency* DefaultSoundConcurrency; // 0x180(0x08)
	char pad_188[0x8]; // 0x188(0x08)
};

// Class Engine.AudioVolume
// Size: 0x330 (Inherited: 0x2c0)
struct AAudioVolume : AVolume {
	float Priority; // 0x2c0(0x04)
	char bEnabled : 1; // 0x2c4(0x01)
	char pad_2C4_1 : 7; // 0x2c4(0x01)
	char pad_2C5[0x3]; // 0x2c5(0x03)
	struct FReverbSettings Settings; // 0x2c8(0x20)
	struct FInteriorSettings AmbientZoneSettings; // 0x2e8(0x24)
	char pad_30C[0x4]; // 0x30c(0x04)
	struct TArray<struct FAudioVolumeSubmixSendSettings> SubmixSendSettings; // 0x310(0x10)
	struct TArray<struct FAudioVolumeSubmixOverrideSettings> SubmixOverrideSettings; // 0x320(0x10)

	void SetSubmixSendSettings(struct TArray<struct FAudioVolumeSubmixSendSettings>& NewSubmixSendSettings); // Function Engine.AudioVolume.SetSubmixSendSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x928c458
	void SetSubmixOverrideSettings(struct TArray<struct FAudioVolumeSubmixOverrideSettings>& NewSubmixOverrideSettings); // Function Engine.AudioVolume.SetSubmixOverrideSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x928c3a8
	void SetReverbSettings(struct FReverbSettings& NewReverbSettings); // Function Engine.AudioVolume.SetReverbSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x928c2fc
	void SetPriority(float NewPriority); // Function Engine.AudioVolume.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x928c278
	void SetInteriorSettings(struct FInteriorSettings& NewInteriorSettings); // Function Engine.AudioVolume.SetInteriorSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x928c1dc
	void SetEnabled(bool bNewEnabled); // Function Engine.AudioVolume.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x928c134
	void OnRep_bEnabled(); // Function Engine.AudioVolume.OnRep_bEnabled // (Final|Native|Private) // @ game+0x1b960c0
};

// Class Engine.AudioWidgetSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UAudioWidgetSubsystem : UEngineSubsystem {
};

// Class Engine.AutoDestroySubsystem
// Size: 0x50 (Inherited: 0x40)
struct UAutoDestroySubsystem : UTickableWorldSubsystem {
	struct TArray<struct AActor*> ActorsToPoll; // 0x40(0x10)

	void OnActorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Engine.AutoDestroySubsystem.OnActorEndPlay // (Final|Native|Private) // @ game+0x928bef0
};

// Class Engine.AutomationTestSettings
// Size: 0x350 (Inherited: 0x28)
struct UAutomationTestSettings : UObject {
	struct TArray<struct FString> EngineTestModules; // 0x28(0x10)
	struct TArray<struct FString> EditorTestModules; // 0x38(0x10)
	struct FSoftObjectPath AutomationTestmap; // 0x48(0x18)
	struct TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps; // 0x60(0x10)
	struct TArray<struct FString> AssetsToOpen; // 0x70(0x10)
	struct TArray<struct FString> MapsToPIETest; // 0x80(0x10)
	bool bUseAllProjectMapsToPlayInPIE; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct FBuildPromotionTestSettings BuildPromotionTest; // 0x98(0x1f0)
	struct FMaterialEditorPromotionSettings MaterialEditorPromotionTest; // 0x288(0x30)
	struct FParticleEditorPromotionSettings ParticleEditorPromotionTest; // 0x2b8(0x10)
	struct FBlueprintEditorPromotionSettings BlueprintEditorPromotionTest; // 0x2c8(0x30)
	struct TArray<struct FString> TestLevelFolders; // 0x2f8(0x10)
	struct TArray<struct FExternalToolDefinition> ExternalTools; // 0x308(0x10)
	struct TArray<struct FEditorImportExportTestDefinition> ImportExportTestDefinitions; // 0x318(0x10)
	struct TArray<struct FLaunchOnTestSettings> LaunchOnSettings; // 0x328(0x10)
	struct FIntPoint DefaultScreenshotResolution; // 0x338(0x08)
	float PIETestDuration; // 0x340(0x04)
	float DefaultInteractiveFramerate; // 0x344(0x04)
	float DefaultInteractiveFramerateWaitTime; // 0x348(0x04)
	float DefaultInteractiveFramerateDuration; // 0x34c(0x04)
};

// Class Engine.AvoidanceManager
// Size: 0xe0 (Inherited: 0x28)
struct UAvoidanceManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	float DefaultTimeToLive; // 0x30(0x04)
	float LockTimeAfterAvoid; // 0x34(0x04)
	float LockTimeAfterClean; // 0x38(0x04)
	float DeltaTimeToPredict; // 0x3c(0x04)
	float ArtificialRadiusExpansion; // 0x40(0x04)
	float TestHeightDifference; // 0x44(0x04)
	float HeightCheckMargin; // 0x48(0x04)
	char pad_4C[0x94]; // 0x4c(0x94)

	bool RegisterMovementComponent(struct UMovementComponent* MovementComp, float AvoidanceWeight); // Function Engine.AvoidanceManager.RegisterMovementComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x928bfd4
	int32_t GetObjectCount(); // Function Engine.AvoidanceManager.GetObjectCount // (Final|Native|Public|BlueprintCallable) // @ game+0x928bed4
	int32_t GetNewAvoidanceUID(); // Function Engine.AvoidanceManager.GetNewAvoidanceUID // (Final|Native|Public|BlueprintCallable) // @ game+0x928beb0
	struct FVector GetAvoidanceVelocityForComponent(struct UMovementComponent* MovementComp); // Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x928bd9c
};

// Class Engine.BandwidthTestActor
// Size: 0x2a8 (Inherited: 0x288)
struct ABandwidthTestActor : AActor {
	struct FBandwidthTestGenerator BandwidthGenerator; // 0x288(0x20)
};

// Class Engine.BillboardComponent
// Size: 0x560 (Inherited: 0x530)
struct UBillboardComponent : UPrimitiveComponent {
	struct UTexture2D* Sprite; // 0x530(0x08)
	char bIsScreenSizeScaled : 1; // 0x538(0x01)
	char pad_538_1 : 7; // 0x538(0x01)
	char pad_539[0x3]; // 0x539(0x03)
	float ScreenSize; // 0x53c(0x04)
	float U; // 0x540(0x04)
	float UL; // 0x544(0x04)
	float V; // 0x548(0x04)
	float vL; // 0x54c(0x04)
	float OpacityMaskRefVal; // 0x550(0x04)
	char pad_554[0xc]; // 0x554(0x0c)

	void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetUV // (Native|Public|BlueprintCallable) // @ game+0x928d560
	void SetSpriteAndUV(struct UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetSpriteAndUV // (Native|Public|BlueprintCallable) // @ game+0x928d3e0
	void SetSprite(struct UTexture2D* NewSprite); // Function Engine.BillboardComponent.SetSprite // (Native|Public|BlueprintCallable) // @ game+0x654d6e8
	void SetOpacityMaskRefVal(float RefVal); // Function Engine.BillboardComponent.SetOpacityMaskRefVal // (Final|Native|Public|BlueprintCallable) // @ game+0x928d354
};

// Class Engine.BlendableInterface
// Size: 0x28 (Inherited: 0x28)
struct UBlendableInterface : UInterface {
};

// Class Engine.Skeleton
// Size: 0x470 (Inherited: 0x28)
struct USkeleton : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TArray<struct FBoneNode> BoneTree; // 0x38(0x10)
	struct TArray<struct FTransform> RefLocalPoses; // 0x48(0x10)
	char pad_58[0x118]; // 0x58(0x118)
	struct FGuid VirtualBoneGuid; // 0x170(0x10)
	struct TArray<struct FVirtualBone> VirtualBones; // 0x180(0x10)
	struct TArray<struct TSoftObjectPtr<USkeleton>> CompatibleSkeletons; // 0x190(0x10)
	struct TArray<struct USkeletalMeshSocket*> Sockets; // 0x1a0(0x10)
	char pad_1B0[0x50]; // 0x1b0(0x50)
	struct FSmartNameContainer SmartNames; // 0x200(0x50)
	char pad_250[0x30]; // 0x250(0x30)
	struct TArray<struct UBlendProfile*> BlendProfiles; // 0x280(0x10)
	struct TArray<struct FAnimSlotGroup> SlotGroups; // 0x290(0x10)
	char pad_2A0[0x1c0]; // 0x2a0(0x1c0)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x460(0x10)

	struct UBlendProfile* GetBlendProfile(struct FName& InProfileName); // Function Engine.Skeleton.GetBlendProfile // (Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x93456b4
	void AddCompatibleSkeleton(struct USkeleton* SourceSkeleton); // Function Engine.Skeleton.AddCompatibleSkeleton // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9345290
};

// Class Engine.BlendProfile
// Size: 0x50 (Inherited: 0x28)
struct UBlendProfile : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USkeleton* OwningSkeleton; // 0x30(0x08)
	struct TArray<struct FBlendProfileBoneEntry> ProfileEntries; // 0x38(0x10)
	enum class EBlendProfileMode Mode; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.AnalysisProperties
// Size: 0x38 (Inherited: 0x28)
struct UAnalysisProperties : UObject {
	struct FString Function; // 0x28(0x10)
};

// Class Engine.BlockingVolume
// Size: 0x2c0 (Inherited: 0x2c0)
struct ABlockingVolume : AVolume {
};

// Class Engine.Breakpoint
// Size: 0x28 (Inherited: 0x28)
struct UBreakpoint : UObject {
};

// Class Engine.BlueprintExtension
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintExtension : UObject {
};

// Class Engine.BlueprintMapLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintMapLibrary : UBlueprintFunctionLibrary {

	void SetMapPropertyByName(struct UObject* Object, struct FName PropertyName, struct TMap<int32_t, int32_t>& Value); // Function Engine.BlueprintMapLibrary.SetMapPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92942b4
	void Map_Values(struct TMap<int32_t, int32_t>& TargetMap, struct TArray<int32_t>& Values); // Function Engine.BlueprintMapLibrary.Map_Values // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9292a40
	bool Map_Remove(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Function Engine.BlueprintMapLibrary.Map_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x21411a4
	int32_t Map_Length(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9292988
	void Map_Keys(struct TMap<int32_t, int32_t>& TargetMap, struct TArray<int32_t>& Keys); // Function Engine.BlueprintMapLibrary.Map_Keys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1616454
	bool Map_IsNotEmpty(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_IsNotEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92928c8
	bool Map_IsEmpty(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_IsEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x929280c
	bool Map_Find(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Function Engine.BlueprintMapLibrary.Map_Find // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x14b7e44
	bool Map_Contains(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Function Engine.BlueprintMapLibrary.Map_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x24c8b14
	void Map_Clear(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x244a0a0
	void Map_Add(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Function Engine.BlueprintMapLibrary.Map_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x14b6008
};

// Class Engine.BlueprintPathsLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintPathsLibrary : UBlueprintFunctionLibrary {

	struct FString VideoCaptureDir(); // Function Engine.BlueprintPathsLibrary.VideoCaptureDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9294d84
	void ValidatePath(struct FString InPath, bool& bDidSucceed, struct FText& OutReason); // Function Engine.BlueprintPathsLibrary.ValidatePath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9294b58
	void Split(struct FString InPath, struct FString& PathPart, struct FString& FilenamePart, struct FString& ExtensionPart); // Function Engine.BlueprintPathsLibrary.Split // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92946b8
	struct FString SourceConfigDir(); // Function Engine.BlueprintPathsLibrary.SourceConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92930ac
	bool ShouldSaveToUserDir(); // Function Engine.BlueprintPathsLibrary.ShouldSaveToUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9294694
	struct FString ShaderWorkingDir(); // Function Engine.BlueprintPathsLibrary.ShaderWorkingDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9294560
	void SetProjectFilePath(struct FString NewGameProjectFilePath); // Function Engine.BlueprintPathsLibrary.SetProjectFilePath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9294410
	struct FString SetExtension(struct FString InPath, struct FString InNewExtension); // Function Engine.BlueprintPathsLibrary.SetExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x929402c
	struct FString ScreenShotDir(); // Function Engine.BlueprintPathsLibrary.ScreenShotDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9293ef8
	struct FString SandboxesDir(); // Function Engine.BlueprintPathsLibrary.SandboxesDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9293dc4
	struct FString RootDir(); // Function Engine.BlueprintPathsLibrary.RootDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9293c90
	void RemoveDuplicateSlashes(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92939dc
	struct FString ProjectUserDir(); // Function Engine.BlueprintPathsLibrary.ProjectUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9293998
	struct FString ProjectSavedDir(); // Function Engine.BlueprintPathsLibrary.ProjectSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x929386c
	struct FString ProjectPluginsDir(); // Function Engine.BlueprintPathsLibrary.ProjectPluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9293738
	struct FString ProjectPersistentDownloadDir(); // Function Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9293604
	struct FString ProjectModsDir(); // Function Engine.BlueprintPathsLibrary.ProjectModsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92934d0
	struct FString ProjectLogDir(); // Function Engine.BlueprintPathsLibrary.ProjectLogDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x929348c
	struct FString ProjectIntermediateDir(); // Function Engine.BlueprintPathsLibrary.ProjectIntermediateDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9293448
	struct FString ProjectDir(); // Function Engine.BlueprintPathsLibrary.ProjectDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9293314
	struct FString ProjectContentDir(); // Function Engine.BlueprintPathsLibrary.ProjectContentDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92931e0
	struct FString ProjectConfigDir(); // Function Engine.BlueprintPathsLibrary.ProjectConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92930ac
	struct FString ProfilingDir(); // Function Engine.BlueprintPathsLibrary.ProfilingDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9293068
	void NormalizeFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.NormalizeFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9292df8
	void NormalizeDirectoryName(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.NormalizeDirectoryName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9292b44
	struct FString MakeValidFileName(struct FString InString, struct FString InReplacementChar); // Function Engine.BlueprintPathsLibrary.MakeValidFileName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x929256c
	void MakeStandardFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakeStandardFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92922b8
	void MakePlatformFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakePlatformFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9292004
	bool MakePathRelativeTo(struct FString InPath, struct FString InRelativeTo, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakePathRelativeTo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9291c2c
	struct FString LaunchDir(); // Function Engine.BlueprintPathsLibrary.LaunchDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9291af8
	bool IsSamePath(struct FString PathA, struct FString PathB); // Function Engine.BlueprintPathsLibrary.IsSamePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x929188c
	bool IsRestrictedPath(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsRestrictedPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9291738
	bool IsRelative(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsRelative // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92915e4
	bool IsProjectFilePathSet(); // Function Engine.BlueprintPathsLibrary.IsProjectFilePathSet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92915c0
	bool IsDrive(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsDrive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x929146c
	bool HasProjectPersistentDownloadDir(); // Function Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2524684
	struct TArray<struct FString> GetToolTipLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9291440
	struct TArray<struct FString> GetRestrictedFolderNames(); // Function Engine.BlueprintPathsLibrary.GetRestrictedFolderNames // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9291414
	struct FString GetRelativePathToRoot(); // Function Engine.BlueprintPathsLibrary.GetRelativePathToRoot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92913a4
	struct TArray<struct FString> GetPropertyNameLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9291378
	struct FString GetProjectFilePath(); // Function Engine.BlueprintPathsLibrary.GetProjectFilePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9291244
	struct FString GetPath(struct FString InPath); // Function Engine.BlueprintPathsLibrary.GetPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92910d0
	struct FString GetInvalidFileSystemChars(); // Function Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9290f24
	struct TArray<struct FString> GetGameLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetGameLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9290ef8
	struct FString GetExtension(struct FString InPath, bool bIncludeDot); // Function Engine.BlueprintPathsLibrary.GetExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9290d40
	struct TArray<struct FString> GetEngineLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9290d14
	struct TArray<struct FString> GetEditorLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9290ce8
	struct FString GetCleanFilename(struct FString InPath); // Function Engine.BlueprintPathsLibrary.GetCleanFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9290b74
	struct FString GetBaseFilename(struct FString InPath, bool bRemovePath); // Function Engine.BlueprintPathsLibrary.GetBaseFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92909bc
	struct FString GeneratedConfigDir(); // Function Engine.BlueprintPathsLibrary.GeneratedConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9290978
	struct FString GameUserDeveloperDir(); // Function Engine.BlueprintPathsLibrary.GameUserDeveloperDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9290844
	struct FString GameSourceDir(); // Function Engine.BlueprintPathsLibrary.GameSourceDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9290710
	struct FString GameDevelopersDir(); // Function Engine.BlueprintPathsLibrary.GameDevelopersDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92905dc
	struct FString GameAgnosticSavedDir(); // Function Engine.BlueprintPathsLibrary.GameAgnosticSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9290598
	bool FileExists(struct FString InPath); // Function Engine.BlueprintPathsLibrary.FileExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9290444
	struct FString FeaturePackDir(); // Function Engine.BlueprintPathsLibrary.FeaturePackDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9290310
	struct FString EnterprisePluginsDir(); // Function Engine.BlueprintPathsLibrary.EnterprisePluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92901dc
	struct FString EnterpriseFeaturePackDir(); // Function Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92900a8
	struct FString EnterpriseDir(); // Function Engine.BlueprintPathsLibrary.EnterpriseDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928ff74
	struct FString EngineVersionAgnosticUserDir(); // Function Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928fe40
	struct FString EngineUserDir(); // Function Engine.BlueprintPathsLibrary.EngineUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928fd0c
	struct FString EngineSourceDir(); // Function Engine.BlueprintPathsLibrary.EngineSourceDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928fbd8
	struct FString EngineSavedDir(); // Function Engine.BlueprintPathsLibrary.EngineSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928faa4
	struct FString EnginePluginsDir(); // Function Engine.BlueprintPathsLibrary.EnginePluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928fa60
	struct FString EngineIntermediateDir(); // Function Engine.BlueprintPathsLibrary.EngineIntermediateDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928f92c
	struct FString EngineDir(); // Function Engine.BlueprintPathsLibrary.EngineDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928f7f8
	struct FString EngineContentDir(); // Function Engine.BlueprintPathsLibrary.EngineContentDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928f6c4
	struct FString EngineConfigDir(); // Function Engine.BlueprintPathsLibrary.EngineConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928f590
	bool DirectoryExists(struct FString InPath); // Function Engine.BlueprintPathsLibrary.DirectoryExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928f43c
	struct FString DiffDir(); // Function Engine.BlueprintPathsLibrary.DiffDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928f3f8
	struct FString CreateTempFilename(struct FString Path, struct FString Prefix, struct FString Extension); // Function Engine.BlueprintPathsLibrary.CreateTempFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928f054
	struct FString ConvertToSandboxPath(struct FString InPath, struct FString InSandboxName); // Function Engine.BlueprintPathsLibrary.ConvertToSandboxPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928edc4
	struct FString ConvertRelativePathToFull(struct FString InPath, struct FString InBasePath); // Function Engine.BlueprintPathsLibrary.ConvertRelativePathToFull // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928eb20
	struct FString ConvertFromSandboxPath(struct FString InPath, struct FString InSandboxName); // Function Engine.BlueprintPathsLibrary.ConvertFromSandboxPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928e890
	struct FString Combine(struct TArray<struct FString>& InPaths); // Function Engine.BlueprintPathsLibrary.Combine // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x928e7b4
	bool CollapseRelativeDirectories(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.CollapseRelativeDirectories // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x928e4fc
	struct FString CloudDir(); // Function Engine.BlueprintPathsLibrary.CloudDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928e4b8
	struct FString ChangeExtension(struct FString InPath, struct FString InNewExtension); // Function Engine.BlueprintPathsLibrary.ChangeExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928e230
	struct FString BugItDir(); // Function Engine.BlueprintPathsLibrary.BugItDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928e0fc
	struct FString AutomationTransientDir(); // Function Engine.BlueprintPathsLibrary.AutomationTransientDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928dfc8
	struct FString AutomationLogDir(); // Function Engine.BlueprintPathsLibrary.AutomationLogDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928de94
	struct FString AutomationDir(); // Function Engine.BlueprintPathsLibrary.AutomationDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x928de50
};

// Class Engine.PlatformGameInstance
// Size: 0x290 (Inherited: 0x1c0)
struct UPlatformGameInstance : UGameInstance {
	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0x1c0(0x10)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0x1d0(0x10)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0x1e0(0x10)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0x1f0(0x10)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0x200(0x10)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x210(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x220(0x10)
	struct FMulticastInlineDelegate ApplicationRegisteredForRemoteNotificationsDelegate; // 0x230(0x10)
	struct FMulticastInlineDelegate ApplicationRegisteredForUserNotificationsDelegate; // 0x240(0x10)
	struct FMulticastInlineDelegate ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x250(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedRemoteNotificationDelegate; // 0x260(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedLocalNotificationDelegate; // 0x270(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x280(0x10)
};

// Class Engine.BlueprintPlatformLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintPlatformLibrary : UBlueprintFunctionLibrary {

	void SetAllowedDeviceOrientation(enum class EScreenOrientation NewAllowedDeviceOrientation); // Function Engine.BlueprintPlatformLibrary.SetAllowedDeviceOrientation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9295ca4
	int32_t ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92959e0
	void ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x929584c
	int32_t ScheduleLocalNotificationBadgeAtTime(struct FDateTime& FireDateTime, bool LocalTime, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9295660
	int32_t ScheduleLocalNotificationAtTime(struct FDateTime& FireDateTime, bool LocalTime, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9295344
	void GetLaunchNotification(bool& NotificationLaunchedApp, struct FString& ActivationEvent, int32_t& FireDate); // Function Engine.BlueprintPlatformLibrary.GetLaunchNotification // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x929512c
	enum class EScreenOrientation GetDeviceOrientation(); // Function Engine.BlueprintPlatformLibrary.GetDeviceOrientation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x929510c
	enum class EScreenOrientation GetAllowedDeviceOrientation(); // Function Engine.BlueprintPlatformLibrary.GetAllowedDeviceOrientation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92950e8
	void ClearAllLocalNotifications(); // Function Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92950ac
	void CancelLocalNotificationById(int32_t NotificationId); // Function Engine.BlueprintPlatformLibrary.CancelLocalNotificationById // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9295008
	void CancelLocalNotification(struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.CancelLocalNotification // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9294e6c
};

// Class Engine.BlueprintSetLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintSetLibrary : UBlueprintFunctionLibrary {

	void SetSetPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSet<int32_t>& Value); // Function Engine.BlueprintSetLibrary.SetSetPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9295d64
	void Set_Union(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Union // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92969bc
	void Set_ToArray(struct TSet<int32_t>& A, struct TArray<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_ToArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1720d70
	void Set_RemoveItems(struct TSet<int32_t>& TargetSet, struct TArray<int32_t>& Items); // Function Engine.BlueprintSetLibrary.Set_RemoveItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92968b8
	bool Set_Remove(struct TSet<int32_t>& TargetSet, int32_t& Item); // Function Engine.BlueprintSetLibrary.Set_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9296708
	int32_t Set_Length(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9296660
	bool Set_IsNotEmpty(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_IsNotEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92965b4
	bool Set_IsEmpty(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_IsEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9296510
	void Set_Intersection(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Intersection // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9296398
	void Set_Difference(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Difference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9296220
	bool Set_Contains(struct TSet<int32_t>& TargetSet, int32_t& ItemToFind); // Function Engine.BlueprintSetLibrary.Set_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x929606c
	void Set_Clear(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1720e80
	void Set_AddItems(struct TSet<int32_t>& TargetSet, struct TArray<int32_t>& NewItems); // Function Engine.BlueprintSetLibrary.Set_AddItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1720f5c
	void Set_Add(struct TSet<int32_t>& TargetSet, int32_t& NewItem); // Function Engine.BlueprintSetLibrary.Set_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9295ec0
};

// Class Engine.BlueprintTypeConversions
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintTypeConversions : UObject {

	struct TSet<int32_t> ConvertSetType(struct TSet<int32_t>& InSet); // Function Engine.BlueprintTypeConversions.ConvertSetType // (Final|Native|Static|Public|HasOutParms) // @ game+0x9502c44
	struct TMap<int32_t, int32_t> ConvertMapType(struct TMap<int32_t, int32_t>& InMap); // Function Engine.BlueprintTypeConversions.ConvertMapType // (Final|Native|Static|Public|HasOutParms) // @ game+0x9502918
	int32_t ConvertFVector3fToFVector3d(int32_t InFromData); // Function Engine.BlueprintTypeConversions.ConvertFVector3fToFVector3d // (Final|Native|Static|Public) // @ game+0x9502884
	int32_t ConvertFVector3dToFVector3f(int32_t InFromData); // Function Engine.BlueprintTypeConversions.ConvertFVector3dToFVector3f // (Final|Native|Static|Public) // @ game+0x95027f0
	struct TArray<int32_t> ConvertArrayType(struct TArray<int32_t>& inArray); // Function Engine.BlueprintTypeConversions.ConvertArrayType // (Final|Native|Static|Public|HasOutParms) // @ game+0x1616a00
};

// Class Engine.BodySetup
// Size: 0x2e0 (Inherited: 0x30)
struct UBodySetup : UBodySetupCore {
	struct FKAggregateGeom AggGeom; // 0x30(0x68)
	char bAlwaysFullAnimWeight : 1; // 0x98(0x01)
	char bConsiderForBounds : 1; // 0x98(0x01)
	char bMeshCollideAll : 1; // 0x98(0x01)
	char bDoubleSidedGeometry : 1; // 0x98(0x01)
	char bGenerateNonMirroredCollision : 1; // 0x98(0x01)
	char bSharedCookedData : 1; // 0x98(0x01)
	char bGenerateMirroredCollision : 1; // 0x98(0x01)
	char bSupportUVsAndFaceRemap : 1; // 0x98(0x01)
	char pad_99_0 : 3; // 0x99(0x01)
	char bNeverNeedsCookedCollisionData : 1; // 0x99(0x01)
	char pad_99_4 : 4; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)
	struct UPhysicalMaterial* PhysMaterial; // 0xa0(0x08)
	struct FWalkableSlopeOverride WalkableSlopeOverride; // 0xa8(0x10)
	char pad_B8[0x70]; // 0xb8(0x70)
	struct FBodyInstance DefaultInstance; // 0x128(0x188)
	char pad_2B0[0x8]; // 0x2b0(0x08)
	struct FVector BuildScale3D; // 0x2b8(0x18)
	char pad_2D0[0x10]; // 0x2d0(0x10)
};

// Class Engine.BoneMaskFilter
// Size: 0x38 (Inherited: 0x28)
struct UBoneMaskFilter : UObject {
	struct TArray<struct FInputBlendPose> BlendPoses; // 0x28(0x10)
};

// Class Engine.BookmarkBase
// Size: 0x28 (Inherited: 0x28)
struct UBookmarkBase : UObject {
};

// Class Engine.BookMark
// Size: 0x68 (Inherited: 0x28)
struct UBookMark : UBookmarkBase {
	struct FVector Location; // 0x28(0x18)
	struct FRotator Rotation; // 0x40(0x18)
	struct TArray<struct FString> HiddenLevels; // 0x58(0x10)
};

// Class Engine.BookMark2D
// Size: 0x38 (Inherited: 0x28)
struct UBookMark2D : UBookmarkBase {
	float Zoom2D; // 0x28(0x04)
	struct FIntPoint Location; // 0x2c(0x08)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.BoundsCopyComponent
// Size: 0x140 (Inherited: 0xa0)
struct UBoundsCopyComponent : UActorComponent {
	struct TSoftObjectPtr<AActor> BoundsSourceActor; // 0xa0(0x28)
	bool bUseCollidingComponentsForSourceBounds; // 0xc8(0x01)
	bool bKeepOwnBoundsScale; // 0xc9(0x01)
	bool bUseCollidingComponentsForOwnBounds; // 0xca(0x01)
	char pad_CB[0x5]; // 0xcb(0x05)
	struct FTransform PostTransform; // 0xd0(0x60)
	bool bCopyXBounds; // 0x130(0x01)
	bool bCopyYBounds; // 0x131(0x01)
	bool bCopyZBounds; // 0x132(0x01)
	char pad_133[0xd]; // 0x133(0x0d)
};

// Class Engine.ReflectionCapture
// Size: 0x290 (Inherited: 0x288)
struct AReflectionCapture : AActor {
	struct UReflectionCaptureComponent* CaptureComponent; // 0x288(0x08)
};

// Class Engine.BoxReflectionCapture
// Size: 0x290 (Inherited: 0x290)
struct ABoxReflectionCapture : AReflectionCapture {
};

// Class Engine.ReflectionCaptureComponent
// Size: 0x320 (Inherited: 0x2a0)
struct UReflectionCaptureComponent : USceneComponent {
	struct UBillboardComponent* CaptureOffsetComponent; // 0x2a0(0x08)
	enum class EReflectionSourceType ReflectionSourceType; // 0x2a8(0x01)
	enum class EMobileReflectionCompression MobileReflectionCompression; // 0x2a9(0x01)
	char pad_2AA[0x6]; // 0x2aa(0x06)
	struct UTextureCube* Cubemap; // 0x2b0(0x08)
	float SourceCubemapAngle; // 0x2b8(0x04)
	float Brightness; // 0x2bc(0x04)
	bool bModifyMaxValueRGBM; // 0x2c0(0x01)
	char pad_2C1[0x3]; // 0x2c1(0x03)
	float MaxValueRGBM; // 0x2c4(0x04)
	struct FVector CaptureOffset; // 0x2c8(0x18)
	struct FGuid MapBuildDataId; // 0x2e0(0x10)
	struct UTextureCube* CachedEncodedHDRCubemap; // 0x2f0(0x08)
	char pad_2F8[0x28]; // 0x2f8(0x28)
};

// Class Engine.BoxReflectionCaptureComponent
// Size: 0x330 (Inherited: 0x320)
struct UBoxReflectionCaptureComponent : UReflectionCaptureComponent {
	float BoxTransitionDistance; // 0x318(0x04)
	struct UBoxComponent* PreviewInfluenceBox; // 0x320(0x08)
	struct UBoxComponent* PreviewCaptureBox; // 0x328(0x08)
};

// Class Engine.BrushBuilder
// Size: 0x78 (Inherited: 0x28)
struct UBrushBuilder : UObject {
	struct FString BitmapFilename; // 0x28(0x10)
	struct FString ToolTip; // 0x38(0x10)
	char NotifyBadParams : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct TArray<struct FVector> Vertices; // 0x50(0x10)
	struct TArray<struct FBuilderPoly> Polys; // 0x60(0x10)
	struct FName Layer; // 0x70(0x04)
	char MergeCoplanars : 1; // 0x74(0x01)
	char pad_74_1 : 7; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
};

// Class Engine.BrushComponent
// Size: 0x540 (Inherited: 0x530)
struct UBrushComponent : UPrimitiveComponent {
	struct UModel* Brush; // 0x530(0x08)
	struct UBodySetup* BrushBodySetup; // 0x538(0x08)
};

// Class Engine.BrushShape
// Size: 0x2c0 (Inherited: 0x2c0)
struct ABrushShape : ABrush {
};

// Class Engine.BuiltInAttributesExtensions
// Size: 0x28 (Inherited: 0x28)
struct UBuiltInAttributesExtensions : UBlueprintFunctionLibrary {
};

// Class Engine.ButtonStyleAsset
// Size: 0x3e0 (Inherited: 0x28)
struct UButtonStyleAsset : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FButtonStyle ButtonStyle; // 0x30(0x3b0)
};

// Class Engine.CachedAnimDataLibrary
// Size: 0x28 (Inherited: 0x28)
struct UCachedAnimDataLibrary : UBlueprintFunctionLibrary {

	bool StateMachine_IsStateRelevant(struct UAnimInstance* InAnimInstance, struct FCachedAnimStateData& CachedAnimStateData); // Function Engine.CachedAnimDataLibrary.StateMachine_IsStateRelevant // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x929770c
	float StateMachine_GetLocalWeight(struct UAnimInstance* InAnimInstance, struct FCachedAnimStateData& CachedAnimStateData); // Function Engine.CachedAnimDataLibrary.StateMachine_GetLocalWeight // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9297620
	float StateMachine_GetGlobalWeight(struct UAnimInstance* InAnimInstance, struct FCachedAnimStateData& CachedAnimStateData); // Function Engine.CachedAnimDataLibrary.StateMachine_GetGlobalWeight // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9297534
};

// Class Engine.CameraBlockingVolume
// Size: 0x2c0 (Inherited: 0x2c0)
struct ACameraBlockingVolume : AVolume {
};

// Class Engine.CameraLensEffectInterface
// Size: 0x28 (Inherited: 0x28)
struct UCameraLensEffectInterface : UInterface {

	struct UFXSystemComponent* GetPrimaryParticleComponent(); // Function Engine.CameraLensEffectInterface.GetPrimaryParticleComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x75e4900
	struct TArray<struct UFXSystemComponent*> GetParticleComponents(); // Function Engine.CameraLensEffectInterface.GetParticleComponents // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9297c20
};

// Class Engine.CameraLensEffectInterfaceClassSupportLibrary
// Size: 0x28 (Inherited: 0x28)
struct UCameraLensEffectInterfaceClassSupportLibrary : UBlueprintFunctionLibrary {

	void SetInterfaceClass(struct AActor* Class, struct FCameraLensInterfaceClassSupport& Var, enum class EInterfaceValidResult& Result); // Function Engine.CameraLensEffectInterfaceClassSupportLibrary.SetInterfaceClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x929a024
	void IsInterfaceValid(struct TScriptInterface<ICameraLensEffectInterface>& CameraLens, enum class EInterfaceValidResult& Result); // Function Engine.CameraLensEffectInterfaceClassSupportLibrary.IsInterfaceValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9297d7c
	void IsInterfaceClassValid(struct FCameraLensInterfaceClassSupport& CameraLens, enum class EInterfaceValidResult& Result); // Function Engine.CameraLensEffectInterfaceClassSupportLibrary.IsInterfaceClassValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9297c94
	struct AActor* GetInterfaceClass(struct FCameraLensInterfaceClassSupport& CameraLens); // Function Engine.CameraLensEffectInterfaceClassSupportLibrary.GetInterfaceClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9297b8c
};

// Class Engine.CameraModifier_CameraShake
// Size: 0xb0 (Inherited: 0x48)
struct UCameraModifier_CameraShake : UCameraModifier {
	struct TArray<struct FActiveCameraShakeInfo> ActiveShakes; // 0x48(0x10)
	struct TMap<struct UCameraShakeBase*, struct FPooledCameraShakes> ExpiredPooledShakesMap; // 0x58(0x50)
	float SplitScreenShakeScale; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Engine.CameraShakeSourceActor
// Size: 0x290 (Inherited: 0x288)
struct ACameraShakeSourceActor : AActor {
	struct UCameraShakeSourceComponent* CameraShakeSourceComponent; // 0x288(0x08)
};

// Class Engine.CameraShakeSourceComponent
// Size: 0x2c0 (Inherited: 0x2a0)
struct UCameraShakeSourceComponent : USceneComponent {
	enum class ECameraShakeAttenuation Attenuation; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	float InnerAttenuationRadius; // 0x2a4(0x04)
	float OuterAttenuationRadius; // 0x2a8(0x04)
	char pad_2AC[0x4]; // 0x2ac(0x04)
	struct UCameraShakeBase* CameraShake; // 0x2b0(0x08)
	bool bAutoStart; // 0x2b8(0x01)
	char pad_2B9[0x7]; // 0x2b9(0x07)

	void StopAllCameraShakesOfType(struct UCameraShakeBase* InCameraShake, bool bImmediately); // Function Engine.CameraShakeSourceComponent.StopAllCameraShakesOfType // (Final|Native|Public|BlueprintCallable) // @ game+0x929a82c
	void StopAllCameraShakes(bool bImmediately); // Function Engine.CameraShakeSourceComponent.StopAllCameraShakes // (Final|Native|Public|BlueprintCallable) // @ game+0x929a7ac
	void StartCameraShake(struct UCameraShakeBase* InCameraShake, float Scale, enum class ECameraShakePlaySpace Playspace, struct FRotator UserPlaySpaceRot); // Function Engine.CameraShakeSourceComponent.StartCameraShake // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x929a658
	void Start(); // Function Engine.CameraShakeSourceComponent.Start // (Final|Native|Public|BlueprintCallable) // @ game+0x929a644
	float GetAttenuationFactor(struct FVector& Location); // Function Engine.CameraShakeSourceComponent.GetAttenuationFactor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9297af4
};

// Class Engine.Canvas
// Size: 0x390 (Inherited: 0x28)
struct UCanvas : UObject {
	float OrgX; // 0x28(0x04)
	float OrgY; // 0x2c(0x04)
	float ClipX; // 0x30(0x04)
	float ClipY; // 0x34(0x04)
	struct FColor DrawColor; // 0x38(0x04)
	char bCenterX : 1; // 0x3c(0x01)
	char bCenterY : 1; // 0x3c(0x01)
	char bNoSmooth : 1; // 0x3c(0x01)
	char pad_3C_3 : 5; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	int32_t SizeX; // 0x40(0x04)
	int32_t SizeY; // 0x44(0x04)
	char pad_48[0x8]; // 0x48(0x08)
	struct FPlane ColorModulate; // 0x50(0x20)
	struct UTexture2D* DefaultTexture; // 0x70(0x08)
	struct UTexture2D* GradientTexture0; // 0x78(0x08)
	struct UReporterGraph* ReporterGraph; // 0x80(0x08)
	char pad_88[0x308]; // 0x88(0x308)

	struct FVector2D K2_TextSize(struct UFont* RenderFont, struct FString RenderText, struct FVector2D Scale); // Function Engine.Canvas.K2_TextSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9299d8c
	struct FVector2D K2_StrLen(struct UFont* RenderFont, struct FString RenderText); // Function Engine.Canvas.K2_StrLen // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9299b70
	struct FVector K2_Project(struct FVector WorldLocation); // Function Engine.Canvas.K2_Project // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9299ab0
	void K2_DrawTriangle(struct UTexture* RenderTexture, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawTriangle // (Final|Native|Public|BlueprintCallable) // @ game+0x92998fc
	void K2_DrawTexture(struct UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, enum class EBlendMode BlendMode, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawTexture // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x929962c
	void K2_DrawText(struct UFont* RenderFont, struct FString RenderText, struct FVector2D ScreenPosition, struct FVector2D Scale, struct FLinearColor RenderColor, float Kerning, struct FLinearColor ShadowColor, struct FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, struct FLinearColor OutlineColor); // Function Engine.Canvas.K2_DrawText // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92990c4
	void K2_DrawPolygon(struct UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D Radius, int32_t NumberOfSides, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawPolygon // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9298ea4
	void K2_DrawMaterialTriangle(struct UMaterialInterface* RenderMaterial, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawMaterialTriangle // (Final|Native|Public|BlueprintCallable) // @ game+0x9298bb4
	void K2_DrawMaterial(struct UMaterialInterface* RenderMaterial, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawMaterial // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x929886c
	void K2_DrawLine(struct FVector2D ScreenPositionA, struct FVector2D ScreenPositionB, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9298700
	void K2_DrawBox(struct FVector2D ScreenPosition, struct FVector2D ScreenSize, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawBox // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9298594
	void K2_DrawBorder(struct UTexture* BorderTexture, struct UTexture* BackgroundTexture, struct UTexture* LeftBorderTexture, struct UTexture* RightBorderTexture, struct UTexture* TopBorderTexture, struct UTexture* BottomBorderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, struct FVector2D BorderScale, struct FVector2D BackgroundScale, float Rotation, struct FVector2D PivotPoint, struct FVector2D CornerSize); // Function Engine.Canvas.K2_DrawBorder // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9297f70
	void K2_Deproject(struct FVector2D ScreenPosition, struct FVector& WorldOrigin, struct FVector& WorldDirection); // Function Engine.Canvas.K2_Deproject // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9297e3c
};

// Class Engine.TextureRenderTarget
// Size: 0x160 (Inherited: 0x158)
struct UTextureRenderTarget : UTexture {
	float TargetGamma; // 0x158(0x04)
	char pad_15C[0x4]; // 0x15c(0x04)
};

// Class Engine.TextureRenderTarget2D
// Size: 0x188 (Inherited: 0x160)
struct UTextureRenderTarget2D : UTextureRenderTarget {
	int32_t SizeX; // 0x160(0x04)
	int32_t SizeY; // 0x164(0x04)
	struct FLinearColor ClearColor; // 0x168(0x10)
	enum class TextureAddress AddressX; // 0x178(0x01)
	enum class TextureAddress AddressY; // 0x179(0x01)
	char bForceLinearGamma : 1; // 0x17a(0x01)
	char bHDR : 1; // 0x17a(0x01)
	char bGPUSharedFlag : 1; // 0x17a(0x01)
	char pad_17A_3 : 5; // 0x17a(0x01)
	enum class ETextureRenderTargetFormat RenderTargetFormat; // 0x17b(0x01)
	char bAutoGenerateMips : 1; // 0x17c(0x01)
	char pad_17C_1 : 7; // 0x17c(0x01)
	enum class TextureFilter MipsSamplerFilter; // 0x17d(0x01)
	enum class TextureAddress MipsAddressU; // 0x17e(0x01)
	enum class TextureAddress MipsAddressV; // 0x17f(0x01)
	enum class EPixelFormat OverrideFormat; // 0x180(0x01)
	char pad_181[0x7]; // 0x181(0x07)
};

// Class Engine.CanvasRenderTarget2D
// Size: 0x1a8 (Inherited: 0x188)
struct UCanvasRenderTarget2D : UTextureRenderTarget2D {
	struct FMulticastInlineDelegate OnCanvasRenderTargetUpdate; // 0x188(0x10)
	struct TWeakObjectPtr<struct UWorld> World; // 0x198(0x08)
	bool bShouldClearRenderTargetOnReceiveUpdate; // 0x1a0(0x01)
	char pad_1A1[0x7]; // 0x1a1(0x07)

	void UpdateResource(); // Function Engine.CanvasRenderTarget2D.UpdateResource // (Native|Public|BlueprintCallable) // @ game+0x735253c
	void ReceiveUpdate(struct UCanvas* Canvas, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.ReceiveUpdate // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void GetSize(int32_t& Width, int32_t& Height); // Function Engine.CanvasRenderTarget2D.GetSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x929d700
	struct UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(struct UObject* WorldContextObject, struct UCanvasRenderTarget2D* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x929d0e8
};

// Class Engine.CheckBoxStyleAsset
// Size: 0xa40 (Inherited: 0x28)
struct UCheckBoxStyleAsset : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FCheckBoxStyle CheckBoxStyle; // 0x30(0xa10)
};

// Class Engine.ChildConnection
// Size: 0x32c0 (Inherited: 0x32c0)
struct UChildConnection : UNetConnection {
	struct UNetConnection* Parent; // 0x32b8(0x08)
};

// Class Engine.PlatformInterfaceBase
// Size: 0x38 (Inherited: 0x28)
struct UPlatformInterfaceBase : UObject {
	struct TArray<struct FDelegateArray> AllDelegates; // 0x28(0x10)
};

// Class Engine.CloudStorageBase
// Size: 0x50 (Inherited: 0x38)
struct UCloudStorageBase : UPlatformInterfaceBase {
	struct TArray<struct FString> LocalCloudFiles; // 0x38(0x10)
	char bSuppressDelegateCalls : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.CollisionProfile
// Size: 0x168 (Inherited: 0x30)
struct UCollisionProfile : UDeveloperSettings {
	struct TArray<struct FCollisionResponseTemplate> Profiles; // 0x30(0x10)
	struct TArray<struct FCustomChannelSetup> DefaultChannelResponses; // 0x40(0x10)
	struct TArray<struct FCustomProfile> EditProfiles; // 0x50(0x10)
	struct TArray<struct FRedirector> ProfileRedirects; // 0x60(0x10)
	struct TArray<struct FRedirector> CollisionChannelRedirects; // 0x70(0x10)
	char pad_80[0xe8]; // 0x80(0xe8)
};

// Class Engine.ComponentDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UComponentDelegateBinding : UDynamicBlueprintBinding {
	struct TArray<struct FBlueprintComponentDelegateBinding> ComponentDelegateBindings; // 0x28(0x10)
};

// Class Engine.ComponentElementCounterInterface
// Size: 0x30 (Inherited: 0x28)
struct UComponentElementCounterInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ComponentElementHierarchyInterface
// Size: 0x30 (Inherited: 0x28)
struct UComponentElementHierarchyInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ComponentElementObjectInterface
// Size: 0x30 (Inherited: 0x28)
struct UComponentElementObjectInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ComponentElementSelectionInterface
// Size: 0x30 (Inherited: 0x28)
struct UComponentElementSelectionInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ComponentElementWorldInterface
// Size: 0x30 (Inherited: 0x28)
struct UComponentElementWorldInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ActorComponentInstanceDataTransientOuter
// Size: 0x28 (Inherited: 0x28)
struct UActorComponentInstanceDataTransientOuter : UObject {
};

// Class Engine.CurveTable
// Size: 0xa0 (Inherited: 0x28)
struct UCurveTable : UObject {
	char pad_28[0x78]; // 0x28(0x78)
};

// Class Engine.CompositeCurveTable
// Size: 0xc8 (Inherited: 0xa0)
struct UCompositeCurveTable : UCurveTable {
	struct TArray<struct UCurveTable*> ParentTables; // 0xa0(0x10)
	struct TArray<struct UCurveTable*> OldParentTables; // 0xb0(0x10)
	char pad_C0[0x8]; // 0xc0(0x08)
};

// Class Engine.CompositeDataTable
// Size: 0xd8 (Inherited: 0xb0)
struct UCompositeDataTable : UDataTable {
	struct TArray<struct UDataTable*> ParentTables; // 0xb0(0x10)
	struct TArray<struct UDataTable*> OldParentTables; // 0xc0(0x10)
	char pad_D0[0x8]; // 0xd0(0x08)
};

// Class Engine.ConstraintInstanceBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UConstraintInstanceBlueprintLibrary : UBlueprintFunctionLibrary {

	void SetProjectionParams(struct FConstraintInstanceAccessor& Accessor, bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha); // Function Engine.ConstraintInstanceBlueprintLibrary.SetProjectionParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a6e64
	void SetParentDominates(struct FConstraintInstanceAccessor& Accessor, bool bParentDominates); // Function Engine.ConstraintInstanceBlueprintLibrary.SetParentDominates // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a6d34
	void SetOrientationDriveTwistAndSwing(struct FConstraintInstanceAccessor& Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.ConstraintInstanceBlueprintLibrary.SetOrientationDriveTwistAndSwing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a6c08
	void SetOrientationDriveSLERP(struct FConstraintInstanceAccessor& Accessor, bool bEnableSLERP); // Function Engine.ConstraintInstanceBlueprintLibrary.SetOrientationDriveSLERP // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a6b1c
	void SetLinearVelocityTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector& InVelTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearVelocityTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92a6a2c
	void SetLinearVelocityDrive(struct FConstraintInstanceAccessor& Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearVelocityDrive // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a68ac
	void SetLinearSoftLimitParams(struct FConstraintInstanceAccessor& Accessor, bool bSoftLinearLimit, float LinearLimitStiffness, float LinearLimitDamping, float LinearLimitRestitution, float LinearLimitContactDistance); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearSoftLimitParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a66c8
	void SetLinearPositionTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector& InPosTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearPositionTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92a65d8
	void SetLinearPositionDrive(struct FConstraintInstanceAccessor& Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearPositionDrive // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a6458
	void SetLinearPlasticity(struct FConstraintInstanceAccessor& Accessor, bool bLinearPlasticity, float LinearPlasticityThreshold, enum class EConstraintPlasticityType PlasticityType); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearPlasticity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a62fc
	void SetLinearLimits(struct FConstraintInstanceAccessor& Accessor, enum class ELinearConstraintMotion XMotion, enum class ELinearConstraintMotion YMotion, enum class ELinearConstraintMotion ZMotion, float Limit); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearLimits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a616c
	void SetLinearDriveParams(struct FConstraintInstanceAccessor& Accessor, float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearDriveParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a6028
	void SetLinearBreakable(struct FConstraintInstanceAccessor& Accessor, bool bLinearBreakable, float LinearBreakThreshold); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearBreakable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a5f0c
	void SetDisableCollision(struct FConstraintInstanceAccessor& Accessor, bool bDisableCollision); // Function Engine.ConstraintInstanceBlueprintLibrary.SetDisableCollision // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a5e20
	void SetContactTransferScale(struct FConstraintInstanceAccessor& Accessor, float ContactTransferScale); // Function Engine.ConstraintInstanceBlueprintLibrary.SetContactTransferScale // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a5d2c
	void SetAngularVelocityTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector& InVelTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularVelocityTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92a5c3c
	void SetAngularVelocityDriveTwistAndSwing(struct FConstraintInstanceAccessor& Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularVelocityDriveTwistAndSwing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a5b10
	void SetAngularVelocityDriveSLERP(struct FConstraintInstanceAccessor& Accessor, bool bEnableSLERP); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularVelocityDriveSLERP // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a5a24
	void SetAngularSoftTwistLimitParams(struct FConstraintInstanceAccessor& Accessor, bool bSoftTwistLimit, float TwistLimitStiffness, float TwistLimitDamping, float TwistLimitRestitution, float TwistLimitContactDistance); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularSoftTwistLimitParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a5840
	void SetAngularSoftSwingLimitParams(struct FConstraintInstanceAccessor& Accessor, bool bSoftSwingLimit, float SwingLimitStiffness, float SwingLimitDamping, float SwingLimitRestitution, float SwingLimitContactDistance); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularSoftSwingLimitParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a565c
	void SetAngularPlasticity(struct FConstraintInstanceAccessor& Accessor, bool bAngularPlasticity, float AngularPlasticityThreshold); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularPlasticity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a5540
	void SetAngularOrientationTarget(struct FConstraintInstanceAccessor& Accessor, struct FRotator& InPosTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularOrientationTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92a543c
	void SetAngularLimits(struct FConstraintInstanceAccessor& Accessor, enum class EAngularConstraintMotion Swing1MotionType, float Swing1LimitAngle, enum class EAngularConstraintMotion Swing2MotionType, float Swing2LimitAngle, enum class EAngularConstraintMotion TwistMotionType, float TwistLimitAngle); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularLimits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a5224
	void SetAngularDriveParams(struct FConstraintInstanceAccessor& Accessor, float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularDriveParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a50e0
	void SetAngularDriveMode(struct FConstraintInstanceAccessor& Accessor, enum class EAngularDriveMode DriveMode); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularDriveMode // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a5000
	void SetAngularBreakable(struct FConstraintInstanceAccessor& Accessor, bool bAngularBreakable, float AngularBreakThreshold); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularBreakable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a4ee4
	void GetProjectionParams(struct FConstraintInstanceAccessor& Accessor, bool& bEnableProjection, float& ProjectionLinearAlpha, float& ProjectionAngularAlpha); // Function Engine.ConstraintInstanceBlueprintLibrary.GetProjectionParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a4d70
	bool GetParentDominates(struct FConstraintInstanceAccessor& Accessor); // Function Engine.ConstraintInstanceBlueprintLibrary.GetParentDominates // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a4cd0
	void GetOrientationDriveTwistAndSwing(struct FConstraintInstanceAccessor& Accessor, bool& bOutEnableTwistDrive, bool& bOutEnableSwingDrive); // Function Engine.ConstraintInstanceBlueprintLibrary.GetOrientationDriveTwistAndSwing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a4b84
	void GetOrientationDriveSLERP(struct FConstraintInstanceAccessor& Accessor, bool& bOutEnableSLERP); // Function Engine.ConstraintInstanceBlueprintLibrary.GetOrientationDriveSLERP // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a4a8c
	void GetLinearVelocityTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector& OutVelTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearVelocityTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92a497c
	void GetLinearVelocityDrive(struct FConstraintInstanceAccessor& Accessor, bool& bOutEnableDriveX, bool& bOutEnableDriveY, bool& bOutEnableDriveZ); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearVelocityDrive // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a47c4
	void GetLinearSoftLimitParams(struct FConstraintInstanceAccessor& Accessor, bool& bSoftLinearLimit, float& LinearLimitStiffness, float& LinearLimitDamping, float& LinearLimitRestitution, float& LinearLimitContactDistance); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearSoftLimitParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a45a0
	void GetLinearPositionTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector& OutPosTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearPositionTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92a4490
	void GetLinearPositionDrive(struct FConstraintInstanceAccessor& Accessor, bool& bOutEnableDriveX, bool& bOutEnableDriveY, bool& bOutEnableDriveZ); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearPositionDrive // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a42dc
	void GetLinearPlasticity(struct FConstraintInstanceAccessor& Accessor, bool& bLinearPlasticity, float& LinearPlasticityThreshold, enum class EConstraintPlasticityType& PlasticityType); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearPlasticity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a4160
	void GetLinearLimits(struct FConstraintInstanceAccessor& Accessor, enum class ELinearConstraintMotion& XMotion, enum class ELinearConstraintMotion& YMotion, enum class ELinearConstraintMotion& ZMotion, float& Limit); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearLimits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a3f84
	void GetLinearDriveParams(struct FConstraintInstanceAccessor& Accessor, float& OutPositionStrength, float& OutVelocityStrength, float& OutForceLimit); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearDriveParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a3e10
	void GetLinearBreakable(struct FConstraintInstanceAccessor& Accessor, bool& bLinearBreakable, float& LinearBreakThreshold); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearBreakable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a3ce0
	bool GetDisableCollsion(struct FConstraintInstanceAccessor& Accessor); // Function Engine.ConstraintInstanceBlueprintLibrary.GetDisableCollsion // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a3c44
	void GetContactTransferScale(struct FConstraintInstanceAccessor& Accessor, float& ContactTransferScale); // Function Engine.ConstraintInstanceBlueprintLibrary.GetContactTransferScale // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a3b40
	void GetAttachedBodyNames(struct FConstraintInstanceAccessor& Accessor, struct FName& ParentBody, struct FName& ChildBody); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAttachedBodyNames // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a3a08
	void GetAngularVelocityTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector& OutVelTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularVelocityTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92a38f8
	void GetAngularVelocityDriveTwistAndSwing(struct FConstraintInstanceAccessor& Accessor, bool& bOutEnableTwistDrive, bool& bOutEnableSwingDrive); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularVelocityDriveTwistAndSwing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a37b0
	void GetAngularVelocityDriveSLERP(struct FConstraintInstanceAccessor& Accessor, bool& bOutEnableSLERP); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularVelocityDriveSLERP // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a36b4
	void GetAngularSoftTwistLimitParams(struct FConstraintInstanceAccessor& Accessor, bool& bSoftTwistLimit, float& TwistLimitStiffness, float& TwistLimitDamping, float& TwistLimitRestitution, float& TwistLimitContactDistance); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularSoftTwistLimitParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a3490
	void GetAngularSoftSwingLimitParams(struct FConstraintInstanceAccessor& Accessor, bool& bSoftSwingLimit, float& SwingLimitStiffness, float& SwingLimitDamping, float& SwingLimitRestitution, float& SwingLimitContactDistance); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularSoftSwingLimitParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a326c
	void GetAngularPlasticity(struct FConstraintInstanceAccessor& Accessor, bool& bAngularPlasticity, float& AngularPlasticityThreshold); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularPlasticity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a313c
	void GetAngularOrientationTarget(struct FConstraintInstanceAccessor& Accessor, struct FRotator& OutPosTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularOrientationTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92a302c
	void GetAngularLimits(struct FConstraintInstanceAccessor& Accessor, enum class EAngularConstraintMotion& Swing1MotionType, float& Swing1LimitAngle, enum class EAngularConstraintMotion& Swing2MotionType, float& Swing2LimitAngle, enum class EAngularConstraintMotion& TwistMotionType, float& TwistLimitAngle); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularLimits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a2db0
	void GetAngularDriveParams(struct FConstraintInstanceAccessor& Accessor, float& OutPositionStrength, float& OutVelocityStrength, float& OutForceLimit); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularDriveParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a2c3c
	void GetAngularDriveMode(struct FConstraintInstanceAccessor& Accessor, enum class EAngularDriveMode& OutDriveMode); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularDriveMode // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a2b44
	void GetAngularBreakable(struct FConstraintInstanceAccessor& Accessor, bool& bAngularBreakable, float& AngularBreakThreshold); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularBreakable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a2a14
	void CopyParams(struct FConstraintInstanceAccessor& Accessor, struct FConstraintInstanceAccessor& SourceAccessor, bool bKeepPosition, bool bKeepRotation); // Function Engine.ConstraintInstanceBlueprintLibrary.CopyParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92a2878
};

// Class Engine.ContentBundleDescriptor
// Size: 0x58 (Inherited: 0x28)
struct UContentBundleDescriptor : UObject {
	struct FString DisplayName; // 0x28(0x10)
	struct FGuid Guid; // 0x38(0x10)
	struct FString PackageRoot; // 0x48(0x10)
};

// Class Engine.ContentBundleUnsavedActorMonitor
// Size: 0x28 (Inherited: 0x28)
struct UContentBundleUnsavedActorMonitor : UObject {
};

// Class Engine.ContentBundleEngineSubsystem
// Size: 0xa0 (Inherited: 0x30)
struct UContentBundleEngineSubsystem : UEngineSubsystem {
	char pad_30[0x70]; // 0x30(0x70)
};

// Class Engine.ContentBundleManager
// Size: 0x38 (Inherited: 0x28)
struct UContentBundleManager : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Engine.ContentBundleDuplicateForPIEHelper
// Size: 0x28 (Inherited: 0x28)
struct UContentBundleDuplicateForPIEHelper : UObject {
};

// Class Engine.ControlChannel
// Size: 0x80 (Inherited: 0x68)
struct UControlChannel : UChannel {
	char pad_68[0x18]; // 0x68(0x18)
};

// Class Engine.EnumCookedMetaData
// Size: 0x78 (Inherited: 0x28)
struct UEnumCookedMetaData : UObject {
	struct FObjectCookedMetaDataStore EnumMetaData; // 0x28(0x50)
};

// Class Engine.StructCookedMetaData
// Size: 0xc8 (Inherited: 0x28)
struct UStructCookedMetaData : UObject {
	struct FStructCookedMetaDataStore StructMetaData; // 0x28(0xa0)
};

// Class Engine.ClassCookedMetaData
// Size: 0x118 (Inherited: 0x28)
struct UClassCookedMetaData : UObject {
	struct FStructCookedMetaDataStore ClassMetaData; // 0x28(0xa0)
	struct TMap<struct FName, struct FStructCookedMetaDataStore> FunctionsMetaData; // 0xc8(0x50)
};

// Class Engine.StreamingSettings
// Size: 0x68 (Inherited: 0x30)
struct UStreamingSettings : UDeveloperSettings {
	char AsyncLoadingThreadEnabled : 1; // 0x30(0x01)
	char WarnIfTimeLimitExceeded : 1; // 0x30(0x01)
	char pad_30_2 : 6; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float TimeLimitExceededMultiplier; // 0x34(0x04)
	float TimeLimitExceededMinTime; // 0x38(0x04)
	int32_t MinBulkDataSizeForAsyncLoading; // 0x3c(0x04)
	char UseBackgroundLevelStreaming : 1; // 0x40(0x01)
	char AsyncLoadingUseFullTimeLimit : 1; // 0x40(0x01)
	char pad_40_2 : 6; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float AsyncLoadingTimeLimit; // 0x44(0x04)
	float PriorityAsyncLoadingExtraTime; // 0x48(0x04)
	float LevelStreamingActorsUpdateTimeLimit; // 0x4c(0x04)
	float PriorityLevelStreamingActorsUpdateExtraTime; // 0x50(0x04)
	int32_t LevelStreamingComponentsRegistrationGranularity; // 0x54(0x04)
	int32_t LevelStreamingAddPrimitiveGranularity; // 0x58(0x04)
	float LevelStreamingUnregisterComponentsTimeLimit; // 0x5c(0x04)
	int32_t LevelStreamingComponentsUnregistrationGranularity; // 0x60(0x04)
	char FlushStreamingOnExit : 1; // 0x64(0x01)
	char EventDrivenLoaderEnabled : 1; // 0x64(0x01)
	char pad_64_2 : 6; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.GarbageCollectionSettings
// Size: 0x50 (Inherited: 0x30)
struct UGarbageCollectionSettings : UDeveloperSettings {
	float TimeBetweenPurgingPendingKillObjects; // 0x30(0x04)
	char FlushStreamingOnGC : 1; // 0x34(0x01)
	char AllowParallelGC : 1; // 0x34(0x01)
	char IncrementalBeginDestroyEnabled : 1; // 0x34(0x01)
	char MultithreadedDestructionEnabled : 1; // 0x34(0x01)
	char CreateGCClusters : 1; // 0x34(0x01)
	char AssetClusteringEnabled : 1; // 0x34(0x01)
	char ActorClusteringEnabled : 1; // 0x34(0x01)
	char BlueprintClusteringEnabled : 1; // 0x34(0x01)
	char UseDisregardForGCOnDedicatedServers : 1; // 0x35(0x01)
	char VerifyGCObjectNames : 1; // 0x35(0x01)
	char VerifyUObjectsAreNotFGCObjects : 1; // 0x35(0x01)
	char PendingKillEnabled : 1; // 0x35(0x01)
	char pad_35_4 : 4; // 0x35(0x01)
	char pad_36[0x2]; // 0x36(0x02)
	int32_t MinGCClusterSize; // 0x38(0x04)
	int32_t NumRetriesBeforeForcingGC; // 0x3c(0x04)
	int32_t MaxObjectsNotConsideredByGC; // 0x40(0x04)
	int32_t SizeOfPermanentObjectPool; // 0x44(0x04)
	int32_t MaxObjectsInGame; // 0x48(0x04)
	int32_t MaxObjectsInEditor; // 0x4c(0x04)
};

// Class Engine.CullDistanceVolume
// Size: 0x2d8 (Inherited: 0x2c0)
struct ACullDistanceVolume : AVolume {
	struct TArray<struct FCullDistanceSizePair> CullDistances; // 0x2c0(0x10)
	char bEnabled : 1; // 0x2d0(0x01)
	char pad_2D0_1 : 7; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)
};

// Class Engine.CurveEdPresetCurve
// Size: 0x28 (Inherited: 0x28)
struct UCurveEdPresetCurve : UObject {
};

// Class Engine.CurveFloat
// Size: 0xb8 (Inherited: 0x30)
struct UCurveFloat : UCurveBase {
	struct FRichCurve FloatCurve; // 0x30(0x80)
	bool bIsEventCurve; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)

	float GetFloatValue(float InTime); // Function Engine.CurveFloat.GetFloatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ad8644
};

// Class Engine.AnimationCurveIdentifierExtensions
// Size: 0x28 (Inherited: 0x28)
struct UAnimationCurveIdentifierExtensions : UBlueprintFunctionLibrary {

	bool IsValid(struct FAnimationCurveIdentifier& Identifier); // Function Engine.AnimationCurveIdentifierExtensions.IsValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92a7dc4
	enum class ERawCurveTrackTypes GetType(struct FAnimationCurveIdentifier& Identifier); // Function Engine.AnimationCurveIdentifierExtensions.GetType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92a7bb8
	struct FName GetName(struct FAnimationCurveIdentifier& Identifier); // Function Engine.AnimationCurveIdentifierExtensions.GetName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92a7960
};

// Class Engine.CurveLinearColor
// Size: 0x250 (Inherited: 0x30)
struct UCurveLinearColor : UCurveBase {
	struct FRichCurve FloatCurves[0x4]; // 0x30(0x200)
	float AdjustHue; // 0x230(0x04)
	float AdjustSaturation; // 0x234(0x04)
	float AdjustBrightness; // 0x238(0x04)
	float AdjustBrightnessCurve; // 0x23c(0x04)
	float AdjustVibrance; // 0x240(0x04)
	float AdjustMinAlpha; // 0x244(0x04)
	float AdjustMaxAlpha; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)

	struct FLinearColor GetUnadjustedLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetUnadjustedLinearColorValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a8f7c
	struct FLinearColor GetLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetLinearColorValue // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x23ee3c8
	struct FLinearColor GetClampedLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetClampedLinearColorValue // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a8ba8
};

// Class Engine.Texture2D
// Size: 0x178 (Inherited: 0x158)
struct UTexture2D : UTexture {
	int32_t FirstResourceMemMip; // 0x158(0x04)
	char bTemporarilyDisableStreaming : 1; // 0x15c(0x01)
	char pad_15C_1 : 7; // 0x15c(0x01)
	enum class TextureAddress AddressX; // 0x15d(0x01)
	enum class TextureAddress AddressY; // 0x15e(0x01)
	char pad_15F[0x1]; // 0x15f(0x01)
	struct FIntPoint ImportedSize; // 0x160(0x08)
	char pad_168[0x10]; // 0x168(0x10)

	int32_t Blueprint_GetSizeY(); // Function Engine.Texture2D.Blueprint_GetSizeY // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9355be4
	int32_t Blueprint_GetSizeX(); // Function Engine.Texture2D.Blueprint_GetSizeX // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9355bc0
};

// Class Engine.CurveLinearColorAtlas
// Size: 0x198 (Inherited: 0x178)
struct UCurveLinearColorAtlas : UTexture2D {
	uint32_t TextureSize; // 0x178(0x04)
	char bSquareResolution : 1; // 0x17c(0x01)
	char pad_17C_1 : 7; // 0x17c(0x01)
	char pad_17D[0x3]; // 0x17d(0x03)
	uint32_t TextureHeight; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct TArray<struct UCurveLinearColor*> GradientCurves; // 0x188(0x10)

	bool GetCurvePosition(struct UCurveLinearColor* InCurve, float& Position); // Function Engine.CurveLinearColorAtlas.GetCurvePosition // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92a8c48
};

// Class Engine.CurveSourceInterface
// Size: 0x28 (Inherited: 0x28)
struct UCurveSourceInterface : UInterface {

	float GetCurveValue(struct FName CurveName); // Function Engine.CurveSourceInterface.GetCurveValue // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x92a8d1c
	void GetCurves(struct TArray<struct FNamedCurveValue>& OutValues); // Function Engine.CurveSourceInterface.GetCurves // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x92a8dac
	struct FName GetBindingName(); // Function Engine.CurveSourceInterface.GetBindingName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x92a8b7c
};

// Class Engine.DamageType
// Size: 0x40 (Inherited: 0x28)
struct UDamageType : UObject {
	char bCausedByWorld : 1; // 0x28(0x01)
	char bScaleMomentumByMass : 1; // 0x28(0x01)
	char bRadialDamageVelChange : 1; // 0x28(0x01)
	char pad_28_3 : 5; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float DamageImpulse; // 0x2c(0x04)
	float DestructibleImpulse; // 0x30(0x04)
	float DestructibleDamageSpreadScale; // 0x34(0x04)
	float DamageFalloff; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.DataDrivenCVarEngineSubsystem
// Size: 0x40 (Inherited: 0x30)
struct UDataDrivenCVarEngineSubsystem : UEngineSubsystem {
	struct FMulticastInlineDelegate OnDataDrivenCVarDelegate; // 0x30(0x10)
};

// Class Engine.DataDrivenConsoleVariableSettings
// Size: 0x68 (Inherited: 0x30)
struct UDataDrivenConsoleVariableSettings : UDeveloperSettings {
	char pad_30[0x18]; // 0x30(0x18)
	struct TArray<struct FDataDrivenConsoleVariable> CVarsArray; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.WorldDataLayers
// Size: 0x5b0 (Inherited: 0x288)
struct AWorldDataLayers : AInfo {
	char pad_288[0xa0]; // 0x288(0xa0)
	struct TSet<struct UDataLayerInstance*> DataLayerInstances; // 0x328(0x50)
	struct TMap<struct FName, struct TWeakObjectPtr<struct UDataLayerInstance>> DeprecatedDataLayerNameToDataLayerInstance; // 0x378(0x50)
	struct TSet<struct UDataLayer*> WorldDataLayers; // 0x3c8(0x50)
	struct TArray<struct FName> RepActiveDataLayerNames; // 0x418(0x10)
	struct TArray<struct FName> RepLoadedDataLayerNames; // 0x428(0x10)
	char pad_438[0xa0]; // 0x438(0xa0)
	struct TArray<struct FName> RepEffectiveActiveDataLayerNames; // 0x4d8(0x10)
	struct TArray<struct FName> RepEffectiveLoadedDataLayerNames; // 0x4e8(0x10)
	char pad_4F8[0xb8]; // 0x4f8(0xb8)

	void OnRep_LoadedDataLayerNames(); // Function Engine.WorldDataLayers.OnRep_LoadedDataLayerNames // (Final|Native|Protected) // @ game+0x935c104
	void OnRep_EffectiveLoadedDataLayerNames(); // Function Engine.WorldDataLayers.OnRep_EffectiveLoadedDataLayerNames // (Final|Native|Protected) // @ game+0x935c0c0
	void OnRep_EffectiveActiveDataLayerNames(); // Function Engine.WorldDataLayers.OnRep_EffectiveActiveDataLayerNames // (Final|Native|Protected) // @ game+0x935c07c
	void OnRep_ActiveDataLayerNames(); // Function Engine.WorldDataLayers.OnRep_ActiveDataLayerNames // (Final|Native|Protected) // @ game+0x935c038
	void OnDataLayerRuntimeStateChanged(struct UDataLayerInstance* InDataLayer, enum class EDataLayerRuntimeState InState); // Function Engine.WorldDataLayers.OnDataLayerRuntimeStateChanged // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x935bf48
};

// Class Engine.DataLayer
// Size: 0x50 (Inherited: 0x28)
struct UDataLayer : UObject {
	struct FName DataLayerLabel; // 0x28(0x04)
	char bIsRuntime : 1; // 0x2c(0x01)
	char pad_2C_1 : 7; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
	enum class EDataLayerRuntimeState InitialRuntimeState; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FColor DebugColor; // 0x34(0x04)
	struct UDataLayer* Parent; // 0x38(0x08)
	struct TArray<struct UDataLayer*> Children; // 0x40(0x10)

	bool IsVisible(); // Function Engine.DataLayer.IsVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22fb320
	bool IsRuntime(); // Function Engine.DataLayer.IsRuntime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a90c0
	bool IsInitiallyVisible(); // Function Engine.DataLayer.IsInitiallyVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22fb320
	bool IsInitiallyActive(); // Function Engine.DataLayer.IsInitiallyActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a90d8
	bool IsEffectiveVisible(); // Function Engine.DataLayer.IsEffectiveVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22fb320
	bool IsDynamicallyLoaded(); // Function Engine.DataLayer.IsDynamicallyLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a90c0
	enum class EDataLayerState GetInitialState(); // Function Engine.DataLayer.GetInitialState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a8f38
	enum class EDataLayerRuntimeState GetInitialRuntimeState(); // Function Engine.DataLayer.GetInitialRuntimeState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a8f38
	struct FColor GetDebugColor(); // Function Engine.DataLayer.GetDebugColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x29ee8bc
	struct FName GetDataLayerLabel(); // Function Engine.DataLayer.GetDataLayerLabel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x686ef70
	bool Equals(struct FActorDataLayer& ActorDataLayer); // Function Engine.DataLayer.Equals // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a8ae4
};

// Class Engine.DataLayerAsset
// Size: 0x30 (Inherited: 0x28)
struct UDataLayerAsset : UObject {
	enum class EDataLayerType DataLayerType; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	struct FColor DebugColor; // 0x2c(0x04)

	bool IsRuntime(); // Function Engine.DataLayerAsset.IsRuntime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a90f8
	enum class EDataLayerType GetType(); // Function Engine.DataLayerAsset.GetType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29ee890
	struct FColor GetDebugColor(); // Function Engine.DataLayerAsset.GetDebugColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x8de221c
};

// Class Engine.DataLayerInstance
// Size: 0x48 (Inherited: 0x28)
struct UDataLayerInstance : UObject {
	enum class EDataLayerRuntimeState InitialRuntimeState; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct UDataLayerInstance* Parent; // 0x30(0x08)
	struct TArray<struct UDataLayerInstance*> Children; // 0x38(0x10)

	bool IsVisible(); // Function Engine.DataLayerInstance.IsVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22fb320
	bool IsRuntime(); // Function Engine.DataLayerInstance.IsRuntime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ad6f68
	bool IsInitiallyVisible(); // Function Engine.DataLayerInstance.IsInitiallyVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22fb320
	bool IsEffectiveVisible(); // Function Engine.DataLayerInstance.IsEffectiveVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22fb320
	enum class EDataLayerType GetType(); // Function Engine.DataLayerInstance.GetType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ad8cc0
	enum class EDataLayerRuntimeState GetInitialRuntimeState(); // Function Engine.DataLayerInstance.GetInitialRuntimeState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a8f58
	struct FColor GetDebugColor(); // Function Engine.DataLayerInstance.GetDebugColor // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a8f08
};

// Class Engine.DataLayerInstanceWithAsset
// Size: 0x50 (Inherited: 0x48)
struct UDataLayerInstanceWithAsset : UDataLayerInstance {
	struct UDataLayerAsset* DataLayerAsset; // 0x48(0x08)
};

// Class Engine.DataLayerSubsystem
// Size: 0xa0 (Inherited: 0x30)
struct UDataLayerSubsystem : UWorldSubsystem {
	struct FMulticastInlineDelegate OnDataLayerRuntimeStateChanged; // 0x30(0x10)
	char pad_40[0x60]; // 0x40(0x60)

	void SetDataLayerStateByLabel(struct FName& InDataLayerLabel, enum class EDataLayerState InState); // Function Engine.DataLayerSubsystem.SetDataLayerStateByLabel // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92aa7b0
	void SetDataLayerState(struct FActorDataLayer& InDataLayer, enum class EDataLayerState InState); // Function Engine.DataLayerSubsystem.SetDataLayerState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92aa6e0
	void SetDataLayerRuntimeStateByLabel(struct FName& InDataLayerLabel, enum class EDataLayerRuntimeState InState, bool bInIsRecursive); // Function Engine.DataLayerSubsystem.SetDataLayerRuntimeStateByLabel // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92aa5cc
	void SetDataLayerRuntimeState(struct FActorDataLayer& InDataLayer, enum class EDataLayerRuntimeState InState, bool bInIsRecursive); // Function Engine.DataLayerSubsystem.SetDataLayerRuntimeState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92aa4b8
	void SetDataLayerInstanceRuntimeState(struct UDataLayerAsset* InDataLayerAsset, enum class EDataLayerRuntimeState InState, bool bInIsRecursive); // Function Engine.DataLayerSubsystem.SetDataLayerInstanceRuntimeState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x92aa3bc
	struct TSet<struct FName> GetLoadedDataLayerNames(); // Function Engine.DataLayerSubsystem.GetLoadedDataLayerNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92aa324
	enum class EDataLayerState GetDataLayerStateByLabel(struct FName& InDataLayerLabel); // Function Engine.DataLayerSubsystem.GetDataLayerStateByLabel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a9f70
	enum class EDataLayerState GetDataLayerState(struct FActorDataLayer& InDataLayer); // Function Engine.DataLayerSubsystem.GetDataLayerState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a9e9c
	enum class EDataLayerRuntimeState GetDataLayerRuntimeStateByLabel(struct FName& InDataLayerLabel); // Function Engine.DataLayerSubsystem.GetDataLayerRuntimeStateByLabel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a9f70
	enum class EDataLayerRuntimeState GetDataLayerRuntimeState(struct FActorDataLayer& InDataLayer); // Function Engine.DataLayerSubsystem.GetDataLayerRuntimeState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a9e9c
	enum class EDataLayerRuntimeState GetDataLayerInstanceRuntimeState(struct UDataLayerAsset* InDataLayerAsset); // Function Engine.DataLayerSubsystem.GetDataLayerInstanceRuntimeState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a9de0
	struct UDataLayerInstance* GetDataLayerInstanceFromAsset(struct UDataLayerAsset* InDataLayerAsset); // Function Engine.DataLayerSubsystem.GetDataLayerInstanceFromAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a9d50
	enum class EDataLayerRuntimeState GetDataLayerInstanceEffectiveRuntimeState(struct UDataLayerAsset* InDataLayerAsset); // Function Engine.DataLayerSubsystem.GetDataLayerInstanceEffectiveRuntimeState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a9c94
	struct UDataLayerInstance* GetDataLayerFromName(struct FName InDataLayerName); // Function Engine.DataLayerSubsystem.GetDataLayerFromName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a9c08
	struct UDataLayerInstance* GetDataLayerFromLabel(struct FName InDataLayerLabel); // Function Engine.DataLayerSubsystem.GetDataLayerFromLabel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a9b7c
	enum class EDataLayerRuntimeState GetDataLayerEffectiveRuntimeStateByLabel(struct FName& InDataLayerLabel); // Function Engine.DataLayerSubsystem.GetDataLayerEffectiveRuntimeStateByLabel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a9ad8
	enum class EDataLayerRuntimeState GetDataLayerEffectiveRuntimeState(struct FActorDataLayer& InDataLayer); // Function Engine.DataLayerSubsystem.GetDataLayerEffectiveRuntimeState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a9a40
	struct UDataLayerInstance* GetDataLayer(struct FActorDataLayer& InDataLayer); // Function Engine.DataLayerSubsystem.GetDataLayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a9978
	struct TSet<struct FName> GetActiveDataLayerNames(); // Function Engine.DataLayerSubsystem.GetActiveDataLayerNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92a994c
};

// Class Engine.DataTableFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UDataTableFunctionLibrary : UBlueprintFunctionLibrary {

	void GetDataTableRowNames(struct UDataTable* Table, struct TArray<struct FName>& OutRowNames); // Function Engine.DataTableFunctionLibrary.GetDataTableRowNames // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x25737c0
	bool GetDataTableRowFromName(struct UDataTable* Table, struct FName RowName, struct FTableRowBase& OutRow); // Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x13e7d74
	struct TArray<struct FString> GetDataTableColumnAsString(struct UDataTable* DataTable, struct FName PropertyName); // Function Engine.DataTableFunctionLibrary.GetDataTableColumnAsString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92aa014
	void EvaluateCurveTableRow(struct UCurveTable* CurveTable, struct FName RowName, float InXY, enum class EEvaluateCurveTableResult& OutResult, float& OutXY, struct FString ContextString); // Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x13dfd54
	bool DoesDataTableRowExist(struct UDataTable* Table, struct FName RowName); // Function Engine.DataTableFunctionLibrary.DoesDataTableRowExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92a9840
};

// Class Engine.DebugCameraControllerSettings
// Size: 0x40 (Inherited: 0x30)
struct UDebugCameraControllerSettings : UDeveloperSettings {
	struct TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes; // 0x30(0x10)
};

// Class Engine.DebugCameraHUD
// Size: 0x378 (Inherited: 0x378)
struct ADebugCameraHUD : AHUD {
};

// Class Engine.DebugDrawService
// Size: 0x28 (Inherited: 0x28)
struct UDebugDrawService : UBlueprintFunctionLibrary {
};

// Class Engine.DecalActor
// Size: 0x290 (Inherited: 0x288)
struct ADecalActor : AActor {
	struct UDecalComponent* Decal; // 0x288(0x08)

	void SetDecalMaterial(struct UMaterialInterface* NewDecalMaterial); // Function Engine.DecalActor.SetDecalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x92aa880
	struct UMaterialInterface* GetDecalMaterial(); // Function Engine.DecalActor.GetDecalMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92aa2cc
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(); // Function Engine.DecalActor.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x11ab814
};

// Class Engine.DecalComponent
// Size: 0x2f0 (Inherited: 0x2a0)
struct UDecalComponent : USceneComponent {
	struct UMaterialInterface* DecalMaterial; // 0x2a0(0x08)
	int32_t SortOrder; // 0x2a8(0x04)
	float FadeScreenSize; // 0x2ac(0x04)
	float FadeStartDelay; // 0x2b0(0x04)
	float FadeDuration; // 0x2b4(0x04)
	float FadeInDuration; // 0x2b8(0x04)
	float FadeInStartDelay; // 0x2bc(0x04)
	char bDestroyOwnerAfterFade : 1; // 0x2c0(0x01)
	char pad_2C0_1 : 7; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)
	struct FVector DecalSize; // 0x2c8(0x18)
	char pad_2E0[0x10]; // 0x2e0(0x10)

	void SetSortOrder(int32_t Value); // Function Engine.DecalComponent.SetSortOrder // (Final|Native|Public|BlueprintCallable) // @ game+0x92aaae8
	void SetFadeScreenSize(float NewFadeScreenSize); // Function Engine.DecalComponent.SetFadeScreenSize // (Final|Native|Public|BlueprintCallable) // @ game+0x92aa9cc
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade); // Function Engine.DecalComponent.SetFadeOut // (Final|Native|Public|BlueprintCallable) // @ game+0x21aaae4
	void SetFadeIn(float StartDelay, float Duaration); // Function Engine.DecalComponent.SetFadeIn // (Final|Native|Public|BlueprintCallable) // @ game+0x92aa908
	void SetDecalMaterial(struct UMaterialInterface* NewDecalMaterial); // Function Engine.DecalComponent.SetDecalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x2d5d5c4
	float GetFadeStartDelay(); // Function Engine.DecalComponent.GetFadeStartDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29eed94
	float GetFadeInStartDelay(); // Function Engine.DecalComponent.GetFadeInStartDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92aa30c
	float GetFadeInDuration(); // Function Engine.DecalComponent.GetFadeInDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x64c2748
	float GetFadeDuration(); // Function Engine.DecalComponent.GetFadeDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x92aa2f4
	struct UMaterialInterface* GetDecalMaterial(); // Function Engine.DecalComponent.GetDecalMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2605140
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(); // Function Engine.DecalComponent.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x92a9818
};

// Class Engine.DefaultPhysicsVolume
// Size: 0x2d0 (Inherited: 0x2d0)
struct ADefaultPhysicsVolume : APhysicsVolume {
};

// Class Engine.DemoNetConnection
// Size: 0x3310 (Inherited: 0x32c0)
struct UDemoNetConnection : UNetConnection {
	char pad_32C0[0x50]; // 0x32c0(0x50)
};

// Class Engine.DemoNetDriver
// Size: 0x1410 (Inherited: 0x770)
struct UDemoNetDriver : UNetDriver {
	char pad_770[0x38]; // 0x770(0x38)
	struct TMap<struct FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors; // 0x7a8(0x50)
	char pad_7F8[0xdc]; // 0x7f8(0xdc)
	float CheckpointSaveMaxMSPerFrame; // 0x8d4(0x04)
	char pad_8D8[0x18]; // 0x8d8(0x18)
	struct TArray<struct FMulticastRecordOptions> MulticastRecordOptions; // 0x8f0(0x10)
	struct TArray<struct APlayerController*> SpectatorControllers; // 0x900(0x10)
	char pad_910[0xb00]; // 0x910(0xb00)
};

// Class Engine.PendingNetGame
// Size: 0xc0 (Inherited: 0x28)
struct UPendingNetGame : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UNetDriver* NetDriver; // 0x30(0x08)
	struct UDemoNetDriver* DemoNetDriver; // 0x38(0x08)
	char pad_40[0x80]; // 0x40(0x80)
};

// Class Engine.DemoPendingNetGame
// Size: 0xc0 (Inherited: 0xc0)
struct UDemoPendingNetGame : UPendingNetGame {
};

// Class Engine.DeprecatedDataLayerInstance
// Size: 0x58 (Inherited: 0x48)
struct UDeprecatedDataLayerInstance : UDataLayerInstance {
	struct FName Label; // 0x48(0x04)
	struct FName DeprecatedDataLayerFName; // 0x4c(0x04)
	enum class EDataLayerType DataLayerType; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	struct FColor DebugColor; // 0x54(0x04)
};

// Class Engine.DestructibleInterface
// Size: 0x28 (Inherited: 0x28)
struct UDestructibleInterface : UInterface {
};

// Class Engine.TextureLODSettings
// Size: 0x38 (Inherited: 0x28)
struct UTextureLODSettings : UObject {
	struct TArray<struct FTextureLODGroup> TextureLODGroups; // 0x28(0x10)
};

// Class Engine.DeviceProfile
// Size: 0xd0 (Inherited: 0x38)
struct UDeviceProfile : UTextureLODSettings {
	struct FString DeviceType; // 0x38(0x10)
	struct FString BaseProfileName; // 0x48(0x10)
	char bIsVisibleForAssets : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct UDeviceProfile* Parent; // 0x60(0x08)
	char pad_68[0x28]; // 0x68(0x28)
	struct TArray<struct FString> CVars; // 0x90(0x10)
	struct TArray<struct FDPMatchingRulestruct> MatchingRules; // 0xa0(0x10)
	char pad_B0[0x20]; // 0xb0(0x20)
};

// Class Engine.DeviceProfileFragment
// Size: 0x38 (Inherited: 0x28)
struct UDeviceProfileFragment : UObject {
	struct TArray<struct FString> CVars; // 0x28(0x10)
};

// Class Engine.DeviceProfileManager
// Size: 0x90 (Inherited: 0x28)
struct UDeviceProfileManager : UObject {
	struct TArray<struct UDeviceProfile*> Profiles; // 0x28(0x10)
	struct TArray<struct UDeviceProfile*> BackupProfiles; // 0x38(0x10)
	char pad_48[0x48]; // 0x48(0x48)
};

// Class Engine.DialogueSoundWaveProxy
// Size: 0x180 (Inherited: 0x168)
struct UDialogueSoundWaveProxy : USoundBase {
	char pad_168[0x18]; // 0x168(0x18)
};

// Class Engine.DialogueVoice
// Size: 0x40 (Inherited: 0x28)
struct UDialogueVoice : UObject {
	enum class EGrammaticalGender Gender; // 0x28(0x01)
	enum class EGrammaticalNumber Plurality; // 0x29(0x01)
	char pad_2A[0x2]; // 0x2a(0x02)
	struct FGuid LocalizationGUID; // 0x2c(0x10)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.DialogueWave
// Size: 0x70 (Inherited: 0x28)
struct UDialogueWave : UObject {
	char bMature : 1; // 0x28(0x01)
	char bOverride_SubtitleOverride : 1; // 0x28(0x01)
	char pad_28_2 : 6; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct FString SpokenText; // 0x30(0x10)
	struct FString SubtitleOverride; // 0x40(0x10)
	struct TArray<struct FDialogueContextMapping> ContextMappings; // 0x50(0x10)
	struct FGuid LocalizationGUID; // 0x60(0x10)
};

// Class Engine.Light
// Size: 0x298 (Inherited: 0x288)
struct ALight : AActor {
	struct ULightComponent* LightComponent; // 0x288(0x08)
	char bEnabled : 1; // 0x290(0x01)
	char pad_290_1 : 7; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)

	void ToggleEnabled(); // Function Engine.Light.ToggleEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x9314ec4
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.Light.SetLightFunctionScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93146c8
	void SetLightFunctionMaterial(struct UMaterialInterface* NewLightFunctionMaterial); // Function Engine.Light.SetLightFunctionMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x93145c4
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.Light.SetLightFunctionFadeDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x93144b8
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.Light.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9314330
	void SetEnabled(bool bSetEnabled); // Function Engine.Light.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x9314004
	void SetCastShadows(bool bNewValue); // Function Engine.Light.SetCastShadows // (Final|Native|Public|BlueprintCallable) // @ game+0x9313d1c
	void SetBrightness(float NewBrightness); // Function Engine.Light.SetBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x9313c98
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.Light.SetAffectTranslucentLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x9313970
	void OnRep_bEnabled(); // Function Engine.Light.OnRep_bEnabled // (Native|Public) // @ game+0x230a2e8
	bool IsEnabled(); // Function Engine.Light.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9312d94
	struct FLinearColor GetLightColor(); // Function Engine.Light.GetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9312d38
	float GetBrightness(); // Function Engine.Light.GetBrightness // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9312cd0
};

// Class Engine.DirectionalLight
// Size: 0x298 (Inherited: 0x298)
struct ADirectionalLight : ALight {
};

// Class Engine.DirectionalLightComponent
// Size: 0x4b0 (Inherited: 0x3e0)
struct UDirectionalLightComponent : ULightComponent {
	float ShadowCascadeBiasDistribution; // 0x3e0(0x04)
	char bEnableLightShaftOcclusion : 1; // 0x3e4(0x01)
	char pad_3E4_1 : 7; // 0x3e4(0x01)
	char pad_3E5[0x3]; // 0x3e5(0x03)
	float OcclusionMaskDarkness; // 0x3e8(0x04)
	float OcclusionDepthRange; // 0x3ec(0x04)
	struct FVector LightShaftOverrideDirection; // 0x3f0(0x18)
	float WholeSceneDynamicShadowRadius; // 0x408(0x04)
	float DynamicShadowDistanceMovableLight; // 0x40c(0x04)
	float DynamicShadowDistanceStationaryLight; // 0x410(0x04)
	int32_t DynamicShadowCascades; // 0x414(0x04)
	float CascadeDistributionExponent; // 0x418(0x04)
	float CascadeTransitionFraction; // 0x41c(0x04)
	float ShadowDistanceFadeoutFraction; // 0x420(0x04)
	char bUseInsetShadowsForMovableObjects : 1; // 0x424(0x01)
	char pad_424_1 : 7; // 0x424(0x01)
	char pad_425[0x3]; // 0x425(0x03)
	int32_t FarShadowCascadeCount; // 0x428(0x04)
	float FarShadowDistance; // 0x42c(0x04)
	float DistanceFieldShadowDistance; // 0x430(0x04)
	int32_t ForwardShadingPriority; // 0x434(0x04)
	float LightSourceAngle; // 0x438(0x04)
	float LightSourceSoftAngle; // 0x43c(0x04)
	float ShadowSourceAngleFactor; // 0x440(0x04)
	float TraceDistance; // 0x444(0x04)
	char bUsedAsAtmosphereSunLight : 1; // 0x448(0x01)
	char bAtmosphereSunLight : 1; // 0x448(0x01)
	char pad_448_2 : 6; // 0x448(0x01)
	char pad_449[0x3]; // 0x449(0x03)
	int32_t AtmosphereSunLightIndex; // 0x44c(0x04)
	struct FLinearColor AtmosphereSunDiskColorScale; // 0x450(0x10)
	char bPerPixelAtmosphereTransmittance : 1; // 0x460(0x01)
	char bCastShadowsOnClouds : 1; // 0x460(0x01)
	char bCastShadowsOnAtmosphere : 1; // 0x460(0x01)
	char bCastCloudShadows : 1; // 0x460(0x01)
	char pad_460_4 : 4; // 0x460(0x01)
	char pad_461[0x3]; // 0x461(0x03)
	float CloudShadowStrength; // 0x464(0x04)
	float CloudShadowOnAtmosphereStrength; // 0x468(0x04)
	float CloudShadowOnSurfaceStrength; // 0x46c(0x04)
	float CloudShadowDepthBias; // 0x470(0x04)
	float CloudShadowExtent; // 0x474(0x04)
	float CloudShadowMapResolutionScale; // 0x478(0x04)
	float CloudShadowRaySampleCountScale; // 0x47c(0x04)
	struct FLinearColor CloudScatteredLuminanceScale; // 0x480(0x10)
	struct FLightmassDirectionalLightSettings LightmassSettings; // 0x490(0x10)
	char bCastModulatedShadows : 1; // 0x4a0(0x01)
	char pad_4A0_1 : 7; // 0x4a0(0x01)
	char pad_4A1[0x3]; // 0x4a1(0x03)
	struct FColor ModulatedShadowColor; // 0x4a4(0x04)
	float ShadowAmount; // 0x4a8(0x04)
	char pad_4AC[0x4]; // 0x4ac(0x04)

	void SetShadowSourceAngleFactor(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowSourceAngleFactor // (Final|Native|Public|BlueprintCallable) // @ game+0x92ad0c4
	void SetShadowDistanceFadeoutFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction // (Final|Native|Public|BlueprintCallable) // @ game+0x92ad02c
	void SetShadowCascadeBiasDistribution(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowCascadeBiasDistribution // (Final|Native|Public|BlueprintCallable) // @ game+0x92acf94
	void SetShadowAmount(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x92acf10
	void SetOcclusionMaskDarkness(float NewValue); // Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness // (Final|Native|Public|BlueprintCallable) // @ game+0x92ace8c
	void SetOcclusionDepthRange(float NewValue); // Function Engine.DirectionalLightComponent.SetOcclusionDepthRange // (Final|Native|Public|BlueprintCallable) // @ game+0x92ace08
	void SetLightSourceSoftAngle(float NewValue); // Function Engine.DirectionalLightComponent.SetLightSourceSoftAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x92acd84
	void SetLightSourceAngle(float NewValue); // Function Engine.DirectionalLightComponent.SetLightSourceAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x92acd00
	void SetLightShaftOverrideDirection(struct FVector NewValue); // Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92acc70
	void SetEnableLightShaftOcclusion(bool bNewValue); // Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion // (Final|Native|Public|BlueprintCallable) // @ game+0x92acbb8
	void SetDynamicShadowDistanceStationaryLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight // (Final|Native|Public|BlueprintCallable) // @ game+0x92acb20
	void SetDynamicShadowDistanceMovableLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight // (Final|Native|Public|BlueprintCallable) // @ game+0x92aca88
	void SetDynamicShadowCascades(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowCascades // (Final|Native|Public|BlueprintCallable) // @ game+0x92ac9fc
	void SetCascadeTransitionFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction // (Final|Native|Public|BlueprintCallable) // @ game+0x92ac964
	void SetCascadeDistributionExponent(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x92ac8cc
	void SetAtmosphereSunLightIndex(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetAtmosphereSunLightIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x92ac81c
	void SetAtmosphereSunLight(bool bNewValue); // Function Engine.DirectionalLightComponent.SetAtmosphereSunLight // (Final|Native|Public|BlueprintCallable) // @ game+0x92ac79c
};

// Class Engine.Distribution
// Size: 0x30 (Inherited: 0x28)
struct UDistribution : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.DistributionFloat
// Size: 0x38 (Inherited: 0x30)
struct UDistributionFloat : UDistribution {
	char bCanBeBaked : 1; // 0x30(0x01)
	char pad_30_1 : 1; // 0x30(0x01)
	char bBakedDataSuccesfully : 1; // 0x30(0x01)
	char pad_30_3 : 5; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.DistributionFloatConstant
// Size: 0x40 (Inherited: 0x38)
struct UDistributionFloatConstant : UDistributionFloat {
	float Constant; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.DistributionFloatConstantCurve
// Size: 0x50 (Inherited: 0x38)
struct UDistributionFloatConstantCurve : UDistributionFloat {
	struct FInterpCurveFloat ConstantCurve; // 0x38(0x18)
};

// Class Engine.DistributionFloatParameterBase
// Size: 0x58 (Inherited: 0x40)
struct UDistributionFloatParameterBase : UDistributionFloatConstant {
	struct FName ParameterName; // 0x40(0x04)
	float MinInput; // 0x44(0x04)
	float MaxInput; // 0x48(0x04)
	float MinOutput; // 0x4c(0x04)
	float MaxOutput; // 0x50(0x04)
	enum class DistributionParamMode ParamMode; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.DistributionFloatParticleParameter
// Size: 0x58 (Inherited: 0x58)
struct UDistributionFloatParticleParameter : UDistributionFloatParameterBase {
};

// Class Engine.DistributionFloatUniform
// Size: 0x40 (Inherited: 0x38)
struct UDistributionFloatUniform : UDistributionFloat {
	float min; // 0x38(0x04)
	float max; // 0x3c(0x04)
};

// Class Engine.DistributionFloatUniformCurve
// Size: 0x50 (Inherited: 0x38)
struct UDistributionFloatUniformCurve : UDistributionFloat {
	struct FInterpCurveVector2D ConstantCurve; // 0x38(0x18)
};

// Class Engine.DistributionVector
// Size: 0x38 (Inherited: 0x30)
struct UDistributionVector : UDistribution {
	char bCanBeBaked : 1; // 0x30(0x01)
	char bIsDirty : 1; // 0x30(0x01)
	char bBakedDataSuccesfully : 1; // 0x30(0x01)
	char pad_30_3 : 5; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.DistributionVectorConstant
// Size: 0x58 (Inherited: 0x38)
struct UDistributionVectorConstant : UDistributionVector {
	struct FVector Constant; // 0x38(0x18)
	char bLockAxes : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.DistributionVectorConstantCurve
// Size: 0x58 (Inherited: 0x38)
struct UDistributionVectorConstantCurve : UDistributionVector {
	struct FInterpCurveVector ConstantCurve; // 0x38(0x18)
	char bLockAxes : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.DistributionVectorParameterBase
// Size: 0xc8 (Inherited: 0x58)
struct UDistributionVectorParameterBase : UDistributionVectorConstant {
	struct FName ParameterName; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct FVector MinInput; // 0x60(0x18)
	struct FVector MaxInput; // 0x78(0x18)
	struct FVector MinOutput; // 0x90(0x18)
	struct FVector MaxOutput; // 0xa8(0x18)
	enum class DistributionParamMode ParamModes[0x3]; // 0xc0(0x03)
	char pad_C3[0x5]; // 0xc3(0x05)
};

// Class Engine.DistributionVectorParticleParameter
// Size: 0xc8 (Inherited: 0xc8)
struct UDistributionVectorParticleParameter : UDistributionVectorParameterBase {
};

// Class Engine.DistributionVectorUniform
// Size: 0x78 (Inherited: 0x38)
struct UDistributionVectorUniform : UDistributionVector {
	struct FVector max; // 0x38(0x18)
	struct FVector min; // 0x50(0x18)
	char bLockAxes : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x3]; // 0x69(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x6c(0x01)
	enum class EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x6d(0x03)
	char bUseExtremes : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Engine.DistributionVectorUniformCurve
// Size: 0x60 (Inherited: 0x38)
struct UDistributionVectorUniformCurve : UDistributionVector {
	struct FInterpCurveTwoVectors ConstantCurve; // 0x38(0x18)
	char bLockAxes1 : 1; // 0x50(0x01)
	char bLockAxes2 : 1; // 0x50(0x01)
	char pad_50_2 : 6; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	enum class EDistributionVectorLockFlags LockedAxes[0x2]; // 0x54(0x02)
	enum class EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x56(0x03)
	char pad_59[0x3]; // 0x59(0x03)
	char bUseExtremes : 1; // 0x5c(0x01)
	char pad_5C_1 : 7; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
};

// Class Engine.DocumentationActor
// Size: 0x290 (Inherited: 0x288)
struct ADocumentationActor : AActor {
	char pad_288[0x8]; // 0x288(0x08)
};

// Class Engine.DPICustomScalingRule
// Size: 0x28 (Inherited: 0x28)
struct UDPICustomScalingRule : UObject {
};

// Class Engine.DrawFrustumComponent
// Size: 0x550 (Inherited: 0x530)
struct UDrawFrustumComponent : UPrimitiveComponent {
	bool bFrustumEnabled; // 0x530(0x01)
	char pad_531[0x3]; // 0x531(0x03)
	struct FColor FrustumColor; // 0x534(0x04)
	float FrustumAngle; // 0x538(0x04)
	float FrustumAspectRatio; // 0x53c(0x04)
	float FrustumStartDist; // 0x540(0x04)
	float FrustumEndDist; // 0x544(0x04)
	struct UTexture* Texture; // 0x548(0x08)
};

// Class Engine.SphereComponent
// Size: 0x560 (Inherited: 0x550)
struct USphereComponent : UShapeComponent {
	float SphereRadius; // 0x550(0x04)
	char pad_554[0xc]; // 0x554(0x0c)

	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps); // Function Engine.SphereComponent.SetSphereRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x9350c18
	float GetUnscaledSphereRadius(); // Function Engine.SphereComponent.GetUnscaledSphereRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d800
	float GetShapeScale(); // Function Engine.SphereComponent.GetShapeScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x929d694
	float GetScaledSphereRadius(); // Function Engine.SphereComponent.GetScaledSphereRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x934ea00
};

// Class Engine.DrawSphereComponent
// Size: 0x560 (Inherited: 0x560)
struct UDrawSphereComponent : USphereComponent {
};

// Class Engine.GraphNodeContextMenuContext
// Size: 0x50 (Inherited: 0x28)
struct UGraphNodeContextMenuContext : UObject {
	struct UBlueprint* Blueprint; // 0x28(0x08)
	struct UEdGraph* Graph; // 0x30(0x08)
	struct UEdGraphNode* Node; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)
	bool bIsDebugging; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.EdGraphNode_Documentation
// Size: 0xb8 (Inherited: 0x98)
struct UEdGraphNode_Documentation : UEdGraphNode {
	struct FString Link; // 0x98(0x10)
	struct FString Excerpt; // 0xa8(0x10)
};

// Class Engine.EdGraphPin_Deprecated
// Size: 0x108 (Inherited: 0x28)
struct UEdGraphPin_Deprecated : UObject {
	struct FString PinName; // 0x28(0x10)
	struct FString PinToolTip; // 0x38(0x10)
	enum class EEdGraphPinDirection Direction; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct FEdGraphPinType PinType; // 0x50(0x48)
	struct FString DefaultValue; // 0x98(0x10)
	struct FString AutogeneratedDefaultValue; // 0xa8(0x10)
	struct UObject* DefaultObject; // 0xb8(0x08)
	struct FText DefaultTextValue; // 0xc0(0x18)
	struct TArray<struct UEdGraphPin_Deprecated*> LinkedTo; // 0xd8(0x10)
	struct TArray<struct UEdGraphPin_Deprecated*> SubPins; // 0xe8(0x10)
	struct UEdGraphPin_Deprecated* ParentPin; // 0xf8(0x08)
	struct UEdGraphPin_Deprecated* ReferencePassThroughConnection; // 0x100(0x08)
};

// Class Engine.EdGraphSchema
// Size: 0x28 (Inherited: 0x28)
struct UEdGraphSchema : UObject {
};

// Class Engine.ViewModeUtils
// Size: 0x28 (Inherited: 0x28)
struct UViewModeUtils : UObject {
};

// Class Engine.EngineBaseTypes
// Size: 0x28 (Inherited: 0x28)
struct UEngineBaseTypes : UObject {
};

// Class Engine.EngineElementsLibrary
// Size: 0x28 (Inherited: 0x28)
struct UEngineElementsLibrary : UBlueprintFunctionLibrary {
};

// Class Engine.EngineHandlerComponentFactory
// Size: 0x28 (Inherited: 0x28)
struct UEngineHandlerComponentFactory : UHandlerComponentFactory {
};

// Class Engine.EngineMessage
// Size: 0xa8 (Inherited: 0x28)
struct UEngineMessage : ULocalMessage {
	struct FString FailedPlaceMessage; // 0x28(0x10)
	struct FString MaxedOutMessage; // 0x38(0x10)
	struct FString EnteredMessage; // 0x48(0x10)
	struct FString LeftMessage; // 0x58(0x10)
	struct FString GlobalNameChange; // 0x68(0x10)
	struct FString SpecEnteredMessage; // 0x78(0x10)
	struct FString NewPlayerMessage; // 0x88(0x10)
	struct FString NewSpecMessage; // 0x98(0x10)
};

// Class Engine.EngineTypes
// Size: 0x28 (Inherited: 0x28)
struct UEngineTypes : UObject {
};

// Class Engine.ExponentialHeightFog
// Size: 0x298 (Inherited: 0x288)
struct AExponentialHeightFog : AInfo {
	struct UExponentialHeightFogComponent* Component; // 0x288(0x08)
	char bEnabled : 1; // 0x290(0x01)
	char pad_290_1 : 7; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)

	void OnRep_bEnabled(); // Function Engine.ExponentialHeightFog.OnRep_bEnabled // (Native|Public) // @ game+0x230a2e8
};

// Class Engine.ExponentialHeightFogComponent
// Size: 0x380 (Inherited: 0x2a0)
struct UExponentialHeightFogComponent : USceneComponent {
	float FogDensity; // 0x2a0(0x04)
	float FogHeightFalloff; // 0x2a4(0x04)
	struct FExponentialHeightFogData SecondFogData; // 0x2a8(0x0c)
	struct FLinearColor FogInscatteringColor; // 0x2b4(0x10)
	struct FLinearColor FogInscatteringLuminance; // 0x2c4(0x10)
	struct FLinearColor SkyAtmosphereAmbientContributionColorScale; // 0x2d4(0x10)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct UTextureCube* InscatteringColorCubemap; // 0x2e8(0x08)
	float InscatteringColorCubemapAngle; // 0x2f0(0x04)
	struct FLinearColor InscatteringTextureTint; // 0x2f4(0x10)
	float FullyDirectionalInscatteringColorDistance; // 0x304(0x04)
	float NonDirectionalInscatteringColorDistance; // 0x308(0x04)
	float DirectionalInscatteringExponent; // 0x30c(0x04)
	float DirectionalInscatteringStartDistance; // 0x310(0x04)
	struct FLinearColor DirectionalInscatteringColor; // 0x314(0x10)
	struct FLinearColor DirectionalInscatteringLuminance; // 0x324(0x10)
	float FogMaxOpacity; // 0x334(0x04)
	float StartDistance; // 0x338(0x04)
	float FogCutoffDistance; // 0x33c(0x04)
	bool bEnableVolumetricFog; // 0x340(0x01)
	char pad_341[0x3]; // 0x341(0x03)
	float VolumetricFogScatteringDistribution; // 0x344(0x04)
	struct FColor VolumetricFogAlbedo; // 0x348(0x04)
	struct FLinearColor VolumetricFogEmissive; // 0x34c(0x10)
	float VolumetricFogExtinctionScale; // 0x35c(0x04)
	float VolumetricFogDistance; // 0x360(0x04)
	float VolumetricFogStartDistance; // 0x364(0x04)
	float VolumetricFogNearFadeInDistance; // 0x368(0x04)
	float VolumetricFogStaticLightingScatteringIntensity; // 0x36c(0x04)
	bool bOverrideLightColorsWithFogInscatteringColors; // 0x370(0x01)
	char pad_371[0xf]; // 0x371(0x0f)

	void SetVolumetricFogScatteringDistribution(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution // (Final|Native|Public|BlueprintCallable) // @ game+0x92b0d70
	void SetVolumetricFogExtinctionScale(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale // (Final|Native|Public|BlueprintCallable) // @ game+0x92b0cd8
	void SetVolumetricFogEmissive(struct FLinearColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92b0c1c
	void SetVolumetricFogDistance(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x92b0b84
	void SetVolumetricFogAlbedo(struct FColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92b0afc
	void SetVolumetricFog(bool bNewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFog // (Final|Native|Public|BlueprintCallable) // @ game+0x92b0a6c
	void SetStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetStartDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x92b09d4
	void SetSecondFogHeightOffset(float Value); // Function Engine.ExponentialHeightFogComponent.SetSecondFogHeightOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x92b093c
	void SetSecondFogHeightFalloff(float Value); // Function Engine.ExponentialHeightFogComponent.SetSecondFogHeightFalloff // (Final|Native|Public|BlueprintCallable) // @ game+0x92b08a4
	void SetSecondFogDensity(float Value); // Function Engine.ExponentialHeightFogComponent.SetSecondFogDensity // (Final|Native|Public|BlueprintCallable) // @ game+0x92b080c
	void SetSecondFogData(struct FExponentialHeightFogData NewValue); // Function Engine.ExponentialHeightFogComponent.SetSecondFogData // (Final|Native|Public|BlueprintCallable) // @ game+0x92b0758
	void SetNonDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x92b06c0
	void SetInscatteringTextureTint(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92b0604
	void SetInscatteringColorCubemapAngle(float Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x92b056c
	void SetInscatteringColorCubemap(struct UTextureCube* Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap // (Final|Native|Public|BlueprintCallable) // @ game+0x92b04dc
	void SetFullyDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x92b0444
	void SetFogMaxOpacity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x92b02d8
	void SetFogInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92b021c
	void SetFogHeightFalloff(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff // (Final|Native|Public|BlueprintCallable) // @ game+0x92b0184
	void SetFogDensity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogDensity // (Final|Native|Public|BlueprintCallable) // @ game+0x92b00ec
	void SetFogCutoffDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x92b0054
	void SetDirectionalInscatteringStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x92affbc
	void SetDirectionalInscatteringExponent(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x92aff24
	void SetDirectionalInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92afe68
};

// Class Engine.Exporter
// Size: 0x78 (Inherited: 0x28)
struct UExporter : UObject {
	struct UObject* SupportedClass; // 0x28(0x08)
	struct UObject* ExportRootScope; // 0x30(0x08)
	struct TArray<struct FString> FormatExtension; // 0x38(0x10)
	struct TArray<struct FString> FormatDescription; // 0x48(0x10)
	int32_t PreferredFormatIndex; // 0x58(0x04)
	int32_t TextIndent; // 0x5c(0x04)
	char bText : 1; // 0x60(0x01)
	char bSelectedOnly : 1; // 0x60(0x01)
	char bForceFileOperations : 1; // 0x60(0x01)
	char pad_60_3 : 5; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct UAssetExportTask* ExportTask; // 0x68(0x08)
	char pad_70[0x8]; // 0x70(0x08)

	bool ScriptRunAssetExportTask(struct UAssetExportTask* Task); // Function Engine.Exporter.ScriptRunAssetExportTask // (Event|Public|BlueprintEvent) // @ game+0xd67374
	bool RunAssetExportTasks(struct TArray<struct UAssetExportTask*>& ExportTasks); // Function Engine.Exporter.RunAssetExportTasks // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x730d450
	bool RunAssetExportTask(struct UAssetExportTask* Task); // Function Engine.Exporter.RunAssetExportTask // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x651d1d4
};

// Class Engine.Font
// Size: 0x1d0 (Inherited: 0x28)
struct UFont : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	enum class EFontCacheType FontCacheType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct FFontCharacter> Characters; // 0x38(0x10)
	struct TArray<struct UTexture2D*> Textures; // 0x48(0x10)
	int32_t IsRemapped; // 0x58(0x04)
	float EmScale; // 0x5c(0x04)
	float Ascent; // 0x60(0x04)
	float Descent; // 0x64(0x04)
	float Leading; // 0x68(0x04)
	int32_t Kerning; // 0x6c(0x04)
	struct FFontImportOptionsData ImportOptions; // 0x70(0xb0)
	int32_t NumCharacters; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct TArray<int32_t> MaxCharHeight; // 0x128(0x10)
	float ScalingFactor; // 0x138(0x04)
	int32_t LegacyFontSize; // 0x13c(0x04)
	struct FName LegacyFontName; // 0x140(0x04)
	char pad_144[0x4]; // 0x144(0x04)
	struct FCompositeFont CompositeFont; // 0x148(0x38)
	char pad_180[0x50]; // 0x180(0x50)
};

// Class Engine.FontFace
// Size: 0x58 (Inherited: 0x28)
struct UFontFace : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FString SourceFilename; // 0x30(0x10)
	enum class EFontHinting Hinting; // 0x40(0x01)
	enum class EFontLoadingPolicy LoadingPolicy; // 0x41(0x01)
	enum class EFontLayoutMethod LayoutMethod; // 0x42(0x01)
	char pad_43[0x15]; // 0x43(0x15)
};

// Class Engine.FontImportOptions
// Size: 0xd8 (Inherited: 0x28)
struct UFontImportOptions : UObject {
	struct FFontImportOptionsData Data; // 0x28(0xb0)
};

// Class Engine.ForceFeedbackAttenuation
// Size: 0xe8 (Inherited: 0x28)
struct UForceFeedbackAttenuation : UObject {
	struct FForceFeedbackAttenuationSettings Attenuation; // 0x28(0xc0)
};

// Class Engine.ForceFeedbackComponent
// Size: 0x390 (Inherited: 0x2a0)
struct UForceFeedbackComponent : USceneComponent {
	struct UForceFeedbackEffect* ForceFeedbackEffect; // 0x2a0(0x08)
	char bAutoDestroy : 1; // 0x2a8(0x01)
	char bStopWhenOwnerDestroyed : 1; // 0x2a8(0x01)
	char bLooping : 1; // 0x2a8(0x01)
	char bIgnoreTimeDilation : 1; // 0x2a8(0x01)
	char bOverrideAttenuation : 1; // 0x2a8(0x01)
	char pad_2A8_5 : 3; // 0x2a8(0x01)
	char pad_2A9[0x3]; // 0x2a9(0x03)
	float IntensityMultiplier; // 0x2ac(0x04)
	struct UForceFeedbackAttenuation* AttenuationSettings; // 0x2b0(0x08)
	struct FForceFeedbackAttenuationSettings AttenuationOverrides; // 0x2b8(0xc0)
	struct FMulticastInlineDelegate OnForceFeedbackFinished; // 0x378(0x10)
	char pad_388[0x8]; // 0x388(0x08)

	void Stop(); // Function Engine.ForceFeedbackComponent.Stop // (Native|Public|BlueprintCallable) // @ game+0x73eda5c
	void SetIntensityMultiplier(float NewIntensityMultiplier); // Function Engine.ForceFeedbackComponent.SetIntensityMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x929721c
	void SetForceFeedbackEffect(struct UForceFeedbackEffect* NewForceFeedbackEffect); // Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x92b0370
	void Play(float StartTime); // Function Engine.ForceFeedbackComponent.Play // (Native|Public|BlueprintCallable) // @ game+0x761d99c
	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings& OutAttenuationSettings); // Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92afd40
	void AdjustAttenuation(struct FForceFeedbackAttenuationSettings& InAttenuationSettings); // Function Engine.ForceFeedbackComponent.AdjustAttenuation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92afc24
};

// Class Engine.ForceFeedbackEffect
// Size: 0x40 (Inherited: 0x28)
struct UForceFeedbackEffect : UObject {
	struct TArray<struct FForceFeedbackChannelDetails> ChannelDetails; // 0x28(0x10)
	float Duration; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.GameNetworkManager
// Size: 0x330 (Inherited: 0x288)
struct AGameNetworkManager : AInfo {
	float BadPacketLossThreshold; // 0x288(0x04)
	float SeverePacketLossThreshold; // 0x28c(0x04)
	int32_t BadPingThreshold; // 0x290(0x04)
	int32_t SeverePingThreshold; // 0x294(0x04)
	int32_t AdjustedNetSpeed; // 0x298(0x04)
	float LastNetSpeedUpdateTime; // 0x29c(0x04)
	int32_t TotalNetBandwidth; // 0x2a0(0x04)
	int32_t MinDynamicBandwidth; // 0x2a4(0x04)
	int32_t MaxDynamicBandwidth; // 0x2a8(0x04)
	char bIsStandbyCheckingEnabled : 1; // 0x2ac(0x01)
	char bHasStandbyCheatTriggered : 1; // 0x2ac(0x01)
	char pad_2AC_2 : 6; // 0x2ac(0x01)
	char pad_2AD[0x3]; // 0x2ad(0x03)
	float StandbyRxCheatTime; // 0x2b0(0x04)
	float StandbyTxCheatTime; // 0x2b4(0x04)
	float PercentMissingForRxStandby; // 0x2b8(0x04)
	float PercentMissingForTxStandby; // 0x2bc(0x04)
	float PercentForBadPing; // 0x2c0(0x04)
	float JoinInProgressStandbyWaitTime; // 0x2c4(0x04)
	float MoveRepSize; // 0x2c8(0x04)
	float MAXPOSITIONERRORSQUARED; // 0x2cc(0x04)
	float MAXNEARZEROVELOCITYSQUARED; // 0x2d0(0x04)
	float CLIENTADJUSTUPDATECOST; // 0x2d4(0x04)
	float MAXCLIENTUPDATEINTERVAL; // 0x2d8(0x04)
	float MaxClientForcedUpdateDuration; // 0x2dc(0x04)
	float ServerForcedUpdateHitchThreshold; // 0x2e0(0x04)
	float ServerForcedUpdateHitchCooldown; // 0x2e4(0x04)
	float MaxMoveDeltaTime; // 0x2e8(0x04)
	float MaxClientSmoothingDeltaTime; // 0x2ec(0x04)
	float ClientNetSendMoveDeltaTime; // 0x2f0(0x04)
	float ClientNetSendMoveDeltaTimeThrottled; // 0x2f4(0x04)
	float ClientNetSendMoveDeltaTimeStationary; // 0x2f8(0x04)
	int32_t ClientNetSendMoveThrottleAtNetSpeed; // 0x2fc(0x04)
	int32_t ClientNetSendMoveThrottleOverPlayerCount; // 0x300(0x04)
	float ClientErrorUpdateRateLimit; // 0x304(0x04)
	float ClientNetCamUpdateDeltaTime; // 0x308(0x04)
	float ClientNetCamUpdatePositionLimit; // 0x30c(0x04)
	bool ClientAuthorativePosition; // 0x310(0x01)
	bool bMovementTimeDiscrepancyDetection; // 0x311(0x01)
	bool bMovementTimeDiscrepancyResolution; // 0x312(0x01)
	char pad_313[0x1]; // 0x313(0x01)
	float MovementTimeDiscrepancyMaxTimeMargin; // 0x314(0x04)
	float MovementTimeDiscrepancyMinTimeMargin; // 0x318(0x04)
	float MovementTimeDiscrepancyResolutionRate; // 0x31c(0x04)
	float MovementTimeDiscrepancyDriftAllowance; // 0x320(0x04)
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x324(0x01)
	bool bUseDistanceBasedRelevancy; // 0x325(0x01)
	char pad_326[0xa]; // 0x326(0x0a)
};

// Class Engine.GameplayStatics
// Size: 0x28 (Inherited: 0x28)
struct UGameplayStatics : UBlueprintFunctionLibrary {

	void UnRetainAllSoundsInSoundClass(struct USoundClass* InSoundClass); // Function Engine.GameplayStatics.UnRetainAllSoundsInSoundClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92bbbdc
	void UnloadStreamLevelBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, struct FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Function Engine.GameplayStatics.UnloadStreamLevelBySoftObjectPtr // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92bbda4
	void UnloadStreamLevel(struct UObject* WorldContextObject, struct FName LevelName, struct FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Function Engine.GameplayStatics.UnloadStreamLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92bbc4c
	bool SuggestProjectileVelocity_CustomArc(struct UObject* WorldContextObject, struct FVector& OutLaunchVelocity, struct FVector StartPos, struct FVector EndPos, float OverrideGravityZ, float ArcParam); // Function Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92bb9ec
	struct UAudioComponent* SpawnSoundAttached(struct USoundBase* sound, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSoundAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x201c9c4
	struct UAudioComponent* SpawnSoundAtLocation(struct UObject* WorldContextObject, struct USoundBase* sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSoundAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x20fc674
	struct UAudioComponent* SpawnSound2D(struct UObject* WorldContextObject, struct USoundBase* sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x20fc104
	struct UObject* SpawnObject(struct UObject* ObjectClass, struct UObject* Outer); // Function Engine.GameplayStatics.SpawnObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x12a72cc
	struct UForceFeedbackComponent* SpawnForceFeedbackAttached(struct UForceFeedbackEffect* ForceFeedbackEffect, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, struct UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnForceFeedbackAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2225b8c
	struct UForceFeedbackComponent* SpawnForceFeedbackAtLocation(struct UObject* WorldContextObject, struct UForceFeedbackEffect* ForceFeedbackEffect, struct FVector Location, struct FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, struct UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnForceFeedbackAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x222613c
	struct UParticleSystemComponent* SpawnEmitterAttached(struct UParticleSystem* EmitterTemplate, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivate); // Function Engine.GameplayStatics.SpawnEmitterAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x221e418
	struct UParticleSystemComponent* SpawnEmitterAtLocation(struct UObject* WorldContextObject, struct UParticleSystem* EmitterTemplate, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem); // Function Engine.GameplayStatics.SpawnEmitterAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x22091ec
	struct UAudioComponent* SpawnDialogueAttached(struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogueAttached // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92bb548
	struct UAudioComponent* SpawnDialogueAtLocation(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogueAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92bb17c
	struct UAudioComponent* SpawnDialogue2D(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogue2D // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92baf00
	struct UDecalComponent* SpawnDecalAttached(struct UMaterialInterface* DecalMaterial, struct FVector DecalSize, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, float LifeSpan); // Function Engine.GameplayStatics.SpawnDecalAttached // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x92ba9bc
	struct UDecalComponent* SpawnDecalAtLocation(struct UObject* WorldContextObject, struct UMaterialInterface* DecalMaterial, struct FVector DecalSize, struct FVector Location, struct FRotator Rotation, float LifeSpan); // Function Engine.GameplayStatics.SpawnDecalAtLocation // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1f41aac
	void SetWorldOriginLocation(struct UObject* WorldContextObject, struct FIntVector NewLocation); // Function Engine.GameplayStatics.SetWorldOriginLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x92ba854
	void SetViewportMouseCaptureMode(struct UObject* WorldContextObject, enum class EMouseCaptureMode MouseCaptureMode); // Function Engine.GameplayStatics.SetViewportMouseCaptureMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92ba784
	void SetSubtitlesEnabled(bool bEnabled); // Function Engine.GameplayStatics.SetSubtitlesEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92ba714
	void SetSoundMixClassOverride(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren); // Function Engine.GameplayStatics.SetSoundMixClassOverride // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92ba26c
	void SetSoundClassDistanceScale(struct UObject* WorldContextObject, struct USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec); // Function Engine.GameplayStatics.SetSoundClassDistanceScale // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x92ba134
	void SetPlayerPlatformUserId(struct APlayerController* PlayerController, struct FPlatformUserId UserId); // Function Engine.GameplayStatics.SetPlayerPlatformUserId // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92ba050
	void SetPlayerControllerID(struct APlayerController* Player, int32_t ControllerId); // Function Engine.GameplayStatics.SetPlayerControllerID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b9f6c
	void SetMaxAudioChannelsScaled(struct UObject* WorldContextObject, float MaxChannelCountScale); // Function Engine.GameplayStatics.SetMaxAudioChannelsScaled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b9eb4
	void SetGlobalTimeDilation(struct UObject* WorldContextObject, float TimeDilation); // Function Engine.GameplayStatics.SetGlobalTimeDilation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b9dfc
	void SetGlobalPitchModulation(struct UObject* WorldContextObject, float PitchModulation, float TimeSec); // Function Engine.GameplayStatics.SetGlobalPitchModulation // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x92b9d04
	void SetGlobalListenerFocusParameters(struct UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // Function Engine.GameplayStatics.SetGlobalListenerFocusParameters // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x92b9a6c
	bool SetGamePaused(struct UObject* WorldContextObject, bool bPaused); // Function Engine.GameplayStatics.SetGamePaused // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b9974
	void SetForceDisableSplitscreen(struct UObject* WorldContextObject, bool bDisable); // Function Engine.GameplayStatics.SetForceDisableSplitscreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b9890
	void SetEnableWorldRendering(struct UObject* WorldContextObject, bool bEnable); // Function Engine.GameplayStatics.SetEnableWorldRendering // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b97dc
	void SetBaseSoundMix(struct UObject* WorldContextObject, struct USoundMix* InSoundMix); // Function Engine.GameplayStatics.SetBaseSoundMix // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b96c8
	bool SaveGameToSlot(struct USaveGame* SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.SaveGameToSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b93a8
	void RemovePlayer(struct APlayerController* Player, bool bDestroyPawn); // Function Engine.GameplayStatics.RemovePlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b9004
	struct FVector RebaseZeroOriginOntoLocal(struct UObject* WorldContextObject, struct FVector WorldLocation); // Function Engine.GameplayStatics.RebaseZeroOriginOntoLocal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92b8f08
	struct FVector RebaseLocalOriginOntoZero(struct UObject* WorldContextObject, struct FVector WorldLocation); // Function Engine.GameplayStatics.RebaseLocalOriginOntoZero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92b8e0c
	void PushSoundMixModifier(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier); // Function Engine.GameplayStatics.PushSoundMixModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ac0298
	bool ProjectWorldToScreen(struct APlayerController* Player, struct FVector& WorldPosition, struct FVector2D& ScreenPosition, bool bPlayerViewportRelative); // Function Engine.GameplayStatics.ProjectWorldToScreen // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92b8cb0
	void PrimeSound(struct USoundBase* InSound); // Function Engine.GameplayStatics.PrimeSound // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b8b40
	void PrimeAllSoundsInSoundClass(struct USoundClass* InSoundClass); // Function Engine.GameplayStatics.PrimeAllSoundsInSoundClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b8ad0
	void PopSoundMixModifier(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier); // Function Engine.GameplayStatics.PopSoundMixModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ac066c
	void PlayWorldCameraShake(struct UObject* WorldContextObject, struct UCameraShakeBase* Shake, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter); // Function Engine.GameplayStatics.PlayWorldCameraShake // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2292194
	void PlaySoundAtLocation(struct UObject* WorldContextObject, struct USoundBase* sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, struct AActor* OwningActor, struct UInitialActiveSoundParams* InitialParams); // Function Engine.GameplayStatics.PlaySoundAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0xfca484
	void PlaySound2D(struct UObject* WorldContextObject, struct USoundBase* sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, struct AActor* OwningActor, bool bIsUISound); // Function Engine.GameplayStatics.PlaySound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x22e4a7c
	void PlayDialogueAtLocation(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings); // Function Engine.GameplayStatics.PlayDialogueAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92b8758
	void PlayDialogue2D(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // Function Engine.GameplayStatics.PlayDialogue2D // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92b8530
	struct FString ParseOption(struct FString Options, struct FString Key); // Function Engine.GameplayStatics.ParseOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b82a0
	void OpenLevelBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, bool bAbsolute, struct FString Options); // Function Engine.GameplayStatics.OpenLevelBySoftObjectPtr // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b7f88
	void OpenLevel(struct UObject* WorldContextObject, struct FName LevelName, bool bAbsolute, struct FString Options); // Function Engine.GameplayStatics.OpenLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b7d74
	bool ObjectIsA(struct UObject* Object, struct UObject* ObjectClass); // Function Engine.GameplayStatics.ObjectIsA // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b7c74
	struct FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, struct FVector Location, struct FVector ImpactPoint, struct FVector Normal, struct FVector ImpactNormal, struct UPhysicalMaterial* PhysMat, struct AActor* HitActor, struct UPrimitiveComponent* HitComponent, struct FName HitBoneName, struct FName BoneName, int32_t HitItem, int32_t ElementIndex, int32_t FaceIndex, struct FVector TraceStart, struct FVector TraceEnd); // Function Engine.GameplayStatics.MakeHitResult // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92b763c
	void LoadStreamLevelBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, struct FLatentActionInfo LatentInfo); // Function Engine.GameplayStatics.LoadStreamLevelBySoftObjectPtr // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b731c
	void LoadStreamLevel(struct UObject* WorldContextObject, struct FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, struct FLatentActionInfo LatentInfo); // Function Engine.GameplayStatics.LoadStreamLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b7168
	struct USaveGame* LoadGameFromSlot(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.LoadGameFromSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b6fd0
	bool IsSplitscreenForceDisabled(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.IsSplitscreenForceDisabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b6d84
	bool IsGamePaused(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.IsGamePaused // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b6cc4
	bool HasOption(struct FString Options, struct FString InKey); // Function Engine.GameplayStatics.HasOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b6a4c
	bool HasLaunchOption(struct FString OptionToCheck); // Function Engine.GameplayStatics.HasLaunchOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b68b8
	int32_t GrassOverlappingSphereCount(struct UObject* WorldContextObject, struct UStaticMesh* StaticMesh, struct FVector CenterPosition, float Radius); // Function Engine.GameplayStatics.GrassOverlappingSphereCount // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x92b6768
	struct FIntVector GetWorldOriginLocation(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetWorldOriginLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92b66d8
	double GetWorldDeltaSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetWorldDeltaSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x17397f4
	void GetViewProjectionMatrix(struct FMinimalViewInfo DesiredView, struct FMatrix& ViewMatrix, struct FMatrix& ProjectionMatrix, struct FMatrix& ViewProjectionMatrix); // Function Engine.GameplayStatics.GetViewProjectionMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92b644c
	enum class EMouseCaptureMode GetViewportMouseCaptureMode(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetViewportMouseCaptureMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b6630
	double GetUnpausedTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetUnpausedTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x26f923c
	double GetTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xfca10c
	enum class EPhysicalSurface GetSurfaceType(struct FHitResult& Hit); // Function Engine.GameplayStatics.GetSurfaceType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92b6358
	struct ULevelStreaming* GetStreamingLevel(struct UObject* WorldContextObject, struct FName PackageName); // Function Engine.GameplayStatics.GetStreamingLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b6294
	double GetRealTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetRealTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b6214
	struct APlayerState* GetPlayerStateFromUniqueNetID(struct UObject* WorldContextObject, struct FUniqueNetIdRepl& UniqueId); // Function Engine.GameplayStatics.GetPlayerStateFromUniqueNetID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92b60ec
	struct APlayerState* GetPlayerState(struct UObject* WorldContextObject, int32_t PlayerStateIndex); // Function Engine.GameplayStatics.GetPlayerState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b600c
	struct FPlatformUserId GetPlayerPlatformUserId(struct APlayerController* PlayerController); // Function Engine.GameplayStatics.GetPlayerPlatformUserId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b5f68
	struct APawn* GetPlayerPawn(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerPawn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x297e130
	int32_t GetPlayerControllerID(struct APlayerController* Player); // Function Engine.GameplayStatics.GetPlayerControllerID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2791074
	struct APlayerController* GetPlayerControllerFromPlatformUser(struct UObject* WorldContextObject, struct FPlatformUserId UserId); // Function Engine.GameplayStatics.GetPlayerControllerFromPlatformUser // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b5ea4
	struct APlayerController* GetPlayerControllerFromID(struct UObject* WorldContextObject, int32_t ControllerId); // Function Engine.GameplayStatics.GetPlayerControllerFromID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b5de0
	struct APlayerController* GetPlayerController(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2558cc0
	struct ACharacter* GetPlayerCharacter(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b5d1c
	struct APlayerCameraManager* GetPlayerCameraManager(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerCameraManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2544c20
	struct FString GetPlatformName(); // Function Engine.GameplayStatics.GetPlatformName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x22411a4
	struct UObject* GetObjectClass(struct UObject* Object); // Function Engine.GameplayStatics.GetObjectClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2316244
	int32_t GetNumPlayerStates(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetNumPlayerStates // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b5c68
	int32_t GetNumPlayerControllers(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetNumPlayerControllers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b5bd4
	int32_t GetNumLocalPlayerControllers(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetNumLocalPlayerControllers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b5b30
	int32_t GetMaxAudioChannelCount(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetMaxAudioChannelCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b5ab0
	void GetKeyValue(struct FString Pair, struct FString& Key, struct FString& Value); // Function Engine.GameplayStatics.GetKeyValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92b5714
	int32_t GetIntOption(struct FString Options, struct FString Key, int32_t DefaultValue); // Function Engine.GameplayStatics.GetIntOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b5478
	float GetGlobalTimeDilation(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGlobalTimeDilation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b53f8
	struct AGameStateBase* GetGameState(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x17b2e14
	struct AGameModeBase* GetGameMode(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x281eab0
	struct UGameInstance* GetGameInstance(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b5378
	bool GetEnableWorldRendering(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetEnableWorldRendering // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b52dc
	struct UReverbEffect* GetCurrentReverbEffect(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetCurrentReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b516c
	struct FString GetCurrentLevelName(struct UObject* WorldContextObject, bool bRemovePrefixString); // Function Engine.GameplayStatics.GetCurrentLevelName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26d7168
	bool GetClosestListenerLocation(struct UObject* WorldContextObject, struct FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, struct FVector& ListenerPosition); // Function Engine.GameplayStatics.GetClosestListenerLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92b4fc4
	double GetAudioTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetAudioTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b4f34
	void GetAllActorsWithTag(struct UObject* WorldContextObject, struct FName tag, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsWithTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x29319d0
	void GetAllActorsWithInterface(struct UObject* WorldContextObject, struct UInterface* Interface, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsWithInterface // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92b4e1c
	void GetAllActorsOfClassWithTag(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FName tag, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsOfClassWithTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92b4cc4
	void GetAllActorsOfClass(struct UObject* WorldContextObject, struct AActor* ActorClass, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsOfClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0xf20380
	struct AActor* GetActorOfClass(struct UObject* WorldContextObject, struct AActor* ActorClass); // Function Engine.GameplayStatics.GetActorOfClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x24f6634
	void GetActorArrayBounds(struct TArray<struct AActor*>& Actors, bool bOnlyCollidingComponents, struct FVector& Center, struct FVector& BoxExtent); // Function Engine.GameplayStatics.GetActorArrayBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92b4b38
	struct FVector GetActorArrayAverageLocation(struct TArray<struct AActor*>& Actors); // Function Engine.GameplayStatics.GetActorArrayAverageLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92b4a88
	void GetAccurateRealTime(int32_t& Seconds, double& PartialSeconds); // Function Engine.GameplayStatics.GetAccurateRealTime // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92b49ac
	void FlushLevelStreaming(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.FlushLevelStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b4930
	struct AActor* FinishSpawningActor(struct AActor* Actor, struct FTransform& SpawnTransform); // Function Engine.GameplayStatics.FinishSpawningActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11b86cc
	struct AActor* FindNearestActor(struct FVector Origin, struct TArray<struct AActor*>& ActorsToCheck, float& Distance); // Function Engine.GameplayStatics.FindNearestActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92b47e8
	bool FindCollisionUV(struct FHitResult& Hit, int32_t UVChannel, struct FVector2D& UV); // Function Engine.GameplayStatics.FindCollisionUV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92b46a8
	void EnableLiveStreaming(bool Enable); // Function Engine.GameplayStatics.EnableLiveStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b4618
	bool DoesSaveGameExist(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.DoesSaveGameExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b4454
	bool DeprojectScreenToWorld(struct APlayerController* Player, struct FVector2D& ScreenPosition, struct FVector& WorldPosition, struct FVector& WorldDirection); // Function Engine.GameplayStatics.DeprojectScreenToWorld // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92b42e4
	bool DeprojectSceneCaptureToWorld(struct ASceneCapture2D* SceneCapture2D, struct FVector2D& TargetUV, struct FVector& WorldPosition, struct FVector& WorldDirection); // Function Engine.GameplayStatics.DeprojectSceneCaptureToWorld // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92b4174
	bool DeleteGameInSlot(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.DeleteGameInSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b3fac
	void DeactivateReverbEffect(struct UObject* WorldContextObject, struct FName TagName); // Function Engine.GameplayStatics.DeactivateReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b3d98
	struct UAudioComponent* CreateSound2D(struct UObject* WorldContextObject, struct USoundBase* sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Function Engine.GameplayStatics.CreateSound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x20fba9c
	struct USaveGame* CreateSaveGameObject(struct USaveGame* SaveGameClass); // Function Engine.GameplayStatics.CreateSaveGameObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b3cac
	struct APlayerController* CreatePlayerFromPlatformUser(struct UObject* WorldContextObject, struct FPlatformUserId UserId, bool bSpawnPlayerController); // Function Engine.GameplayStatics.CreatePlayerFromPlatformUser // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b3bb0
	struct APlayerController* CreatePlayer(struct UObject* WorldContextObject, int32_t ControllerId, bool bSpawnPlayerController); // Function Engine.GameplayStatics.CreatePlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b3ab8
	void ClearSoundMixModifiers(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.ClearSoundMixModifiers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b3a48
	void ClearSoundMixClassOverride(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct USoundClass* InSoundClass, float FadeOutTime); // Function Engine.GameplayStatics.ClearSoundMixClassOverride // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b364c
	void CancelAsyncLoading(); // Function Engine.GameplayStatics.CancelAsyncLoading // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b3468
	void BreakHitResult(struct FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, struct FVector& Location, struct FVector& ImpactPoint, struct FVector& Normal, struct FVector& ImpactNormal, struct UPhysicalMaterial*& PhysMat, struct AActor*& HitActor, struct UPrimitiveComponent*& HitComponent, struct FName& HitBoneName, struct FName& BoneName, int32_t& HitItem, int32_t& ElementIndex, int32_t& FaceIndex, struct FVector& TraceStart, struct FVector& TraceEnd); // Function Engine.GameplayStatics.BreakHitResult // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xf19138
	bool BlueprintSuggestProjectileVelocity(struct UObject* WorldContextObject, struct FVector& TossVelocity, struct FVector StartLocation, struct FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, enum class ESuggestProjVelocityTraceOption TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug); // Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92b2470
	bool Blueprint_PredictProjectilePath_ByTraceChannel(struct UObject* WorldContextObject, struct FHitResult& OutHit, struct TArray<struct FVector>& OutPathPositions, struct FVector& OutLastTraceDestination, struct FVector StartPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92b2e5c
	bool Blueprint_PredictProjectilePath_ByObjectType(struct UObject* WorldContextObject, struct FHitResult& OutHit, struct TArray<struct FVector>& OutPathPositions, struct FVector& OutLastTraceDestination, struct FVector StartPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92b2900
	bool Blueprint_PredictProjectilePath_Advanced(struct UObject* WorldContextObject, struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult& PredictResult); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92b2784
	struct AActor* BeginSpawningActorFromBlueprint(struct UObject* WorldContextObject, struct UBlueprint* Blueprint, struct FTransform& SpawnTransform, bool bNoCollisionFail); // Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92b20c8
	struct AActor* BeginDeferredActorSpawnFromClass(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct AActor* Owner); // Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11b83b0
	bool AreSubtitlesEnabled(); // Function Engine.GameplayStatics.AreSubtitlesEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92b20a8
	bool AreAnyListenersWithinRange(struct UObject* WorldContextObject, struct FVector& Location, float MaximumRange); // Function Engine.GameplayStatics.AreAnyListenersWithinRange // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2348904
	bool ApplyRadialDamageWithFalloff(struct UObject* WorldContextObject, float BaseDamage, float MinimumDamage, struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, struct UDamageType* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct AActor* DamageCauser, struct AController* InstigatedByController, enum class ECollisionChannel DamagePreventionChannel); // Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92b1d00
	bool ApplyRadialDamage(struct UObject* WorldContextObject, float BaseDamage, struct FVector& Origin, float DamageRadius, struct UDamageType* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct AActor* DamageCauser, struct AController* InstigatedByController, bool bDoFullDamage, enum class ECollisionChannel DamagePreventionChannel); // Function Engine.GameplayStatics.ApplyRadialDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92b19ec
	float ApplyPointDamage(struct AActor* DamagedActor, float BaseDamage, struct FVector& HitFromDirection, struct FHitResult& HitInfo, struct AController* EventInstigator, struct AActor* DamageCauser, struct UDamageType* DamageTypeClass); // Function Engine.GameplayStatics.ApplyPointDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92b1710
	float ApplyDamage(struct AActor* DamagedActor, float BaseDamage, struct AController* EventInstigator, struct AActor* DamageCauser, struct UDamageType* DamageTypeClass); // Function Engine.GameplayStatics.ApplyDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x92b1518
	void AnnounceAccessibleString(struct FString AnnouncementString); // Function Engine.GameplayStatics.AnnounceAccessibleString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92b1370
	void ActivateReverbEffect(struct UObject* WorldContextObject, struct UReverbEffect* ReverbEffect, struct FName TagName, float Priority, float Volume, float FadeTime); // Function Engine.GameplayStatics.ActivateReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x22fb5dc
};

// Class Engine.SpotLight
// Size: 0x2a0 (Inherited: 0x298)
struct ASpotLight : ALight {
	struct USpotLightComponent* SpotLightComponent; // 0x298(0x08)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLight.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x9353114
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLight.SetInnerConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x9352f60
};

// Class Engine.GeneratedMeshAreaLight
// Size: 0x2a0 (Inherited: 0x2a0)
struct AGeneratedMeshAreaLight : ASpotLight {
};

// Class Engine.HapticFeedbackEffect_Base
// Size: 0x28 (Inherited: 0x28)
struct UHapticFeedbackEffect_Base : UObject {
};

// Class Engine.HapticFeedbackEffect_Buffer
// Size: 0x40 (Inherited: 0x28)
struct UHapticFeedbackEffect_Buffer : UHapticFeedbackEffect_Base {
	struct TArray<char> Amplitudes; // 0x28(0x10)
	int32_t SampleRate; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.HapticFeedbackEffect_Curve
// Size: 0x138 (Inherited: 0x28)
struct UHapticFeedbackEffect_Curve : UHapticFeedbackEffect_Base {
	struct FHapticFeedbackDetails_Curve HapticDetails; // 0x28(0x110)
};

// Class Engine.HapticFeedbackEffect_SoundWave
// Size: 0x48 (Inherited: 0x28)
struct UHapticFeedbackEffect_SoundWave : UHapticFeedbackEffect_Base {
	struct USoundWave* SoundWave; // 0x28(0x08)
	char pad_30[0x18]; // 0x30(0x18)
};

// Class Engine.HealthSnapshotBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UHealthSnapshotBlueprintLibrary : UBlueprintFunctionLibrary {

	void StopPerformanceSnapshots(); // Function Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x92c1430
	void StartPerformanceSnapshots(); // Function Engine.HealthSnapshotBlueprintLibrary.StartPerformanceSnapshots // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x92c141c
	void LogPerformanceSnapshot(struct FString SnapshotTitle, bool bResetStats); // Function Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x92c0e10
};

// Class Engine.WorldPartitionHLOD
// Size: 0x2c0 (Inherited: 0x288)
struct AWorldPartitionHLOD : AActor {
	uint32_t LODLevel; // 0x288(0x04)
	bool bRequireWarmup; // 0x28c(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	struct TSoftObjectPtr<UWorldPartitionRuntimeCell> SourceCell; // 0x290(0x28)
	struct FName SourceCellName; // 0x2b8(0x04)
	char pad_2BC[0x4]; // 0x2bc(0x04)
};

// Class Engine.HLODBuilderSettings
// Size: 0x28 (Inherited: 0x28)
struct UHLODBuilderSettings : UObject {
};

// Class Engine.NullHLODBuilder
// Size: 0x28 (Inherited: 0x28)
struct UNullHLODBuilder : UHLODBuilder {
};

// Class Engine.HLODEngineSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UHLODEngineSubsystem : UEngineSubsystem {
};

// Class Engine.HLODLayer
// Size: 0x28 (Inherited: 0x28)
struct UHLODLayer : UObject {
};

// Class Engine.HLODProxy
// Size: 0x88 (Inherited: 0x28)
struct UHLODProxy : UObject {
	struct TArray<struct FHLODProxyMesh> ProxyMeshes; // 0x28(0x10)
	struct TMap<struct UHLODProxyDesc*, struct FHLODProxyMesh> HLODActors; // 0x38(0x50)
};

// Class Engine.HLODProxyDesc
// Size: 0x28 (Inherited: 0x28)
struct UHLODProxyDesc : UObject {
};

// Class Engine.HLODSubsystem
// Size: 0x90 (Inherited: 0x30)
struct UHLODSubsystem : UWorldSubsystem {
	char pad_30[0x60]; // 0x30(0x60)
};

// Class Engine.AnimationDataController
// Size: 0x28 (Inherited: 0x28)
struct UAnimationDataController : UInterface {

	void UpdateCurveNamesFromSkeleton(struct USkeleton* Skeleton, enum class ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact); // Function Engine.AnimationDataController.UpdateCurveNamesFromSkeleton // (Native|Public|BlueprintCallable) // @ game+0x92c4ff0
	bool SetTransformCurveKeys(struct FAnimationCurveIdentifier& CurveId, struct TArray<struct FTransform>& TransformValues, struct TArray<float>& TimeKeys, bool bShouldTransact); // Function Engine.AnimationDataController.SetTransformCurveKeys // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c4e1c
	bool SetTransformCurveKey(struct FAnimationCurveIdentifier& CurveId, float Time, struct FTransform& Value, bool bShouldTransact); // Function Engine.AnimationDataController.SetTransformCurveKey // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92c4c30
	void SetPlayLength(float Length, bool bShouldTransact); // Function Engine.AnimationDataController.SetPlayLength // (Native|Public|BlueprintCallable) // @ game+0x92c4b64
	void SetModel(struct UAnimDataModel* InModel); // Function Engine.AnimationDataController.SetModel // (Native|Public|BlueprintCallable) // @ game+0x7318518
	void SetFrameRate(struct FFrameRate FrameRate, bool bShouldTransact); // Function Engine.AnimationDataController.SetFrameRate // (Native|Public|BlueprintCallable) // @ game+0x92c4a94
	bool SetCurveKeys(struct FAnimationCurveIdentifier& CurveId, struct TArray<struct FRichCurveKey>& CurveKeys, bool bShouldTransact); // Function Engine.AnimationDataController.SetCurveKeys // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c4930
	bool SetCurveKey(struct FAnimationCurveIdentifier& CurveId, struct FRichCurveKey& Key, bool bShouldTransact); // Function Engine.AnimationDataController.SetCurveKey // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c47d4
	bool SetCurveFlags(struct FAnimationCurveIdentifier& CurveId, int32_t Flags, bool bShouldTransact); // Function Engine.AnimationDataController.SetCurveFlags // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c46a8
	bool SetCurveFlag(struct FAnimationCurveIdentifier& CurveId, enum class EAnimAssetCurveFlags Flag, bool bState, bool bShouldTransact); // Function Engine.AnimationDataController.SetCurveFlag // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c4534
	bool SetCurveColor(struct FAnimationCurveIdentifier& CurveId, struct FLinearColor Color, bool bShouldTransact); // Function Engine.AnimationDataController.SetCurveColor // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92c43f0
	bool SetBoneTrackKeys(struct FName BoneName, struct TArray<struct FVector>& PositionalKeys, struct TArray<struct FQuat>& RotationalKeys, struct TArray<struct FVector>& ScalingKeys, bool bShouldTransact); // Function Engine.AnimationDataController.SetBoneTrackKeys // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c41ec
	bool ScaleCurve(struct FAnimationCurveIdentifier& CurveId, float Origin, float Factor, bool bShouldTransact); // Function Engine.AnimationDataController.ScaleCurve // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c4078
	void ResizePlayLength(float NewLength, float T0, float T1, bool bShouldTransact); // Function Engine.AnimationDataController.ResizePlayLength // (Native|Public|BlueprintCallable) // @ game+0x92c3f38
	void Resize(float Length, float T0, float T1, bool bShouldTransact); // Function Engine.AnimationDataController.Resize // (Native|Public|BlueprintCallable) // @ game+0x92c3df8
	bool RenameCurve(struct FAnimationCurveIdentifier& CurveToRenameId, struct FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact); // Function Engine.AnimationDataController.RenameCurve // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c3ca0
	bool RemoveTransformCurveKey(struct FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveTransformCurveKey // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c3b6c
	bool RemoveCurveKey(struct FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveCurveKey // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c3a38
	bool RemoveCurve(struct FAnimationCurveIdentifier& CurveId, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveCurve // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c3938
	bool RemoveBoneTrack(struct FName BoneName, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveBoneTrack // (Native|Public|BlueprintCallable) // @ game+0x92c3870
	bool RemoveAttributeKey(struct FAnimationAttributeIdentifier& AttributeIdentifier, float Time, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveAttributeKey // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c3730
	bool RemoveAttribute(struct FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveAttribute // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c3628
	void RemoveAllCurvesOfType(enum class ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveAllCurvesOfType // (Native|Public|BlueprintCallable) // @ game+0x92c3560
	void RemoveAllBoneTracks(bool bShouldTransact); // Function Engine.AnimationDataController.RemoveAllBoneTracks // (Native|Public|BlueprintCallable) // @ game+0x761f75c
	int32_t RemoveAllAttributesForBone(struct FName& BoneName, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveAllAttributesForBone // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c347c
	int32_t RemoveAllAttributes(bool bShouldTransact); // Function Engine.AnimationDataController.RemoveAllAttributes // (Native|Public|BlueprintCallable) // @ game+0x92c33e4
	void OpenBracket(struct FText& InTitle, bool bShouldTransact); // Function Engine.AnimationDataController.OpenBracket // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c2ee0
	int32_t InsertBoneTrack(struct FName BoneName, int32_t DesiredIndex, bool bShouldTransact); // Function Engine.AnimationDataController.InsertBoneTrack // (Native|Public|BlueprintCallable) // @ game+0x92c2334
	struct UAnimDataModel* GetModel(); // Function Engine.AnimationDataController.GetModel // (Native|Public|BlueprintCallable) // @ game+0x7344e48
	void FindOrAddCurveNamesOnSkeleton(struct USkeleton* Skeleton, enum class ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact); // Function Engine.AnimationDataController.FindOrAddCurveNamesOnSkeleton // (Native|Public|BlueprintCallable) // @ game+0x92c1f3c
	bool DuplicateCurve(struct FAnimationCurveIdentifier& CopyCurveId, struct FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact); // Function Engine.AnimationDataController.DuplicateCurve // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c1de4
	bool DuplicateAttribute(struct FAnimationAttributeIdentifier& AttributeIdentifier, struct FAnimationAttributeIdentifier& NewAttributeIdentifier, bool bShouldTransact); // Function Engine.AnimationDataController.DuplicateAttribute // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c1c6c
	void CloseBracket(bool bShouldTransact); // Function Engine.AnimationDataController.CloseBracket // (Native|Public|BlueprintCallable) // @ game+0x92c1be8
	bool AddCurve(struct FAnimationCurveIdentifier& CurveId, int32_t CurveFlags, bool bShouldTransact); // Function Engine.AnimationDataController.AddCurve // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c18ec
	int32_t AddBoneTrack(struct FName BoneName, bool bShouldTransact); // Function Engine.AnimationDataController.AddBoneTrack // (Native|Public|BlueprintCallable) // @ game+0x92c1824
	bool AddAttribute(struct FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact); // Function Engine.AnimationDataController.AddAttribute // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c171c
};

// Class Engine.ImportanceSamplingLibrary
// Size: 0x28 (Inherited: 0x28)
struct UImportanceSamplingLibrary : UBlueprintFunctionLibrary {

	float RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolFloat // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92c32c8
	struct FVector RandomSobolCell3D(int32_t Index, int32_t NumCells, struct FVector Cell, struct FVector Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolCell3D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92c3154
	struct FVector2D RandomSobolCell2D(int32_t Index, int32_t NumCells, struct FVector2D Cell, struct FVector2D Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolCell2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92c2ffc
	float NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolFloat // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92c2d78
	struct FVector NextSobolCell3D(int32_t Index, int32_t NumCells, struct FVector PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolCell3D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92c2c58
	struct FVector2D NextSobolCell2D(int32_t Index, int32_t NumCells, struct FVector2D PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolCell2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92c2b54
	struct FImportanceTexture MakeImportanceTexture(struct UTexture2D* Texture, enum class EImportanceWeight WeightingFunc); // Function Engine.ImportanceSamplingLibrary.MakeImportanceTexture // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92c2430
	void ImportanceSample(struct FImportanceTexture& Texture, struct FVector2D& Rand, int32_t Samples, float Intensity, struct FVector2D& SamplePosition, struct FLinearColor& SampleColor, float& SampleIntensity, float& SampleSize); // Function Engine.ImportanceSamplingLibrary.ImportanceSample // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92c203c
	void BreakImportanceTexture(struct FImportanceTexture& ImportanceTexture, struct UTexture2D*& Texture, enum class EImportanceWeight& WeightingFunc); // Function Engine.ImportanceSamplingLibrary.BreakImportanceTexture // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92c1a18
};

// Class Engine.ImportantToggleSettingInterface
// Size: 0x28 (Inherited: 0x28)
struct UImportantToggleSettingInterface : UInterface {
};

// Class Engine.InGameAdManager
// Size: 0x60 (Inherited: 0x38)
struct UInGameAdManager : UPlatformInterfaceBase {
	char bShouldPauseWhileAdOpen : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct TArray<struct FDelegate> ClickedBannerDelegates; // 0x40(0x10)
	struct TArray<struct FDelegate> ClosedAdDelegates; // 0x50(0x10)
};

// Class Engine.InheritableComponentHandler
// Size: 0x48 (Inherited: 0x28)
struct UInheritableComponentHandler : UObject {
	struct TArray<struct FComponentOverrideRecord> Records; // 0x28(0x10)
	struct TArray<struct UActorComponent*> UnnecessaryComponents; // 0x38(0x10)
};

// Class Engine.InputActionDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputActionDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputAxisDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputAxisDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputAxisKeyDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputAxisKeyDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputKeyDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputKeyDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputSettings
// Size: 0x140 (Inherited: 0x28)
struct UInputSettings : UObject {
	struct TArray<struct FInputAxisConfigEntry> AxisConfig; // 0x28(0x10)
	char bAltEnterTogglesFullscreen : 1; // 0x38(0x01)
	char bF11TogglesFullscreen : 1; // 0x38(0x01)
	char bUseMouseForTouch : 1; // 0x38(0x01)
	char bEnableMouseSmoothing : 1; // 0x38(0x01)
	char bEnableFOVScaling : 1; // 0x38(0x01)
	char bCaptureMouseOnLaunch : 1; // 0x38(0x01)
	char bDefaultViewportMouseLock : 1; // 0x38(0x01)
	char bEnableLegacyInputScales : 1; // 0x38(0x01)
	char bEnableMotionControls : 1; // 0x39(0x01)
	char bFilterInputByPlatformUser : 1; // 0x39(0x01)
	char bAlwaysShowTouchInterface : 1; // 0x39(0x01)
	char bShowConsoleOnFourFingerTap : 1; // 0x39(0x01)
	char bEnableGestureRecognizer : 1; // 0x39(0x01)
	char bUseAutocorrect : 1; // 0x39(0x01)
	char pad_39_6 : 2; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
	struct TArray<struct FString> ExcludedAutocorrectOS; // 0x40(0x10)
	struct TArray<struct FString> ExcludedAutocorrectCultures; // 0x50(0x10)
	struct TArray<struct FString> ExcludedAutocorrectDeviceModels; // 0x60(0x10)
	enum class EMouseCaptureMode DefaultViewportMouseCaptureMode; // 0x70(0x01)
	enum class EMouseLockMode DefaultViewportMouseLockMode; // 0x71(0x01)
	char pad_72[0x2]; // 0x72(0x02)
	float FOVScale; // 0x74(0x04)
	float DoubleClickTime; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct TArray<struct FInputActionKeyMapping> ActionMappings; // 0x80(0x10)
	struct TArray<struct FInputAxisKeyMapping> AxisMappings; // 0x90(0x10)
	struct TArray<struct FInputActionSpeechMapping> SpeechMappings; // 0xa0(0x10)
	struct TSoftClassPtr<UObject> DefaultPlayerInputClass; // 0xb0(0x28)
	struct TSoftClassPtr<UObject> DefaultInputComponentClass; // 0xd8(0x28)
	struct FSoftObjectPath DefaultTouchInterface; // 0x100(0x18)
	struct FKey ConsoleKey; // 0x118(0x18)
	struct TArray<struct FKey> ConsoleKeys; // 0x130(0x10)

	void SaveKeyMappings(); // Function Engine.InputSettings.SaveKeyMappings // (Final|Native|Public|BlueprintCallable) // @ game+0x92c7734
	void RemoveAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c74e4
	void RemoveActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c7388
	struct UInputSettings* GetInputSettings(); // Function Engine.InputSettings.GetInputSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92c6c70
	void GetAxisNames(struct TArray<struct FName>& AxisNames); // Function Engine.InputSettings.GetAxisNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c6854
	void GetAxisMappingByName(struct FName InAxisName, struct TArray<struct FInputAxisKeyMapping>& OutMappings); // Function Engine.InputSettings.GetAxisMappingByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c6778
	void GetActionNames(struct TArray<struct FName>& ActionNames); // Function Engine.InputSettings.GetActionNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c66dc
	void GetActionMappingByName(struct FName InActionName, struct TArray<struct FInputActionKeyMapping>& OutMappings); // Function Engine.InputSettings.GetActionMappingByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x92c6600
	void ForceRebuildKeymaps(); // Function Engine.InputSettings.ForceRebuildKeymaps // (Final|Native|Public|BlueprintCallable) // @ game+0x92c65ec
	void AddAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c5cdc
	void AddActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c5b7c
};

// Class Engine.InputTouchDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputTouchDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputVectorAxisDelegateBinding
// Size: 0x38 (Inherited: 0x38)
struct UInputVectorAxisDelegateBinding : UInputAxisKeyDelegateBinding {
};

// Class Engine.InstancedPlacemenClientSettings
// Size: 0x28 (Inherited: 0x28)
struct UInstancedPlacemenClientSettings : UObject {
};

// Class Engine.InstancedPlacementPartitionActor
// Size: 0x298 (Inherited: 0x298)
struct AInstancedPlacementPartitionActor : AISMPartitionActor {
};

// Class Engine.Interface_ActorSubobject
// Size: 0x28 (Inherited: 0x28)
struct UInterface_ActorSubobject : UInterface {
};

// Class Engine.Interface_AssetUserData
// Size: 0x28 (Inherited: 0x28)
struct UInterface_AssetUserData : UInterface {
};

// Class Engine.Interface_AsyncCompilation
// Size: 0x28 (Inherited: 0x28)
struct UInterface_AsyncCompilation : UInterface {
};

// Class Engine.BoneReferenceSkeletonProvider
// Size: 0x28 (Inherited: 0x28)
struct UBoneReferenceSkeletonProvider : UInterface {
};

// Class Engine.Interface_CollisionDataProvider
// Size: 0x28 (Inherited: 0x28)
struct UInterface_CollisionDataProvider : UInterface {
};

// Class Engine.Interface_PostProcessVolume
// Size: 0x28 (Inherited: 0x28)
struct UInterface_PostProcessVolume : UInterface {
};

// Class Engine.Interface_PreviewMeshProvider
// Size: 0x28 (Inherited: 0x28)
struct UInterface_PreviewMeshProvider : UInterface {
};

// Class Engine.InterpCurveEdSetup
// Size: 0x40 (Inherited: 0x28)
struct UInterpCurveEdSetup : UObject {
	struct TArray<struct FCurveEdTab> Tabs; // 0x28(0x10)
	int32_t ActiveTab; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.InterpToMovementComponent
// Size: 0x1b8 (Inherited: 0x108)
struct UInterpToMovementComponent : UMovementComponent {
	float Duration; // 0x108(0x04)
	char bPauseOnImpact : 1; // 0x10c(0x01)
	char pad_10C_1 : 7; // 0x10c(0x01)
	char pad_10D[0x3]; // 0x10d(0x03)
	bool bSweep; // 0x110(0x01)
	enum class ETeleportType TeleportType; // 0x111(0x01)
	enum class EInterpToBehaviourType BehaviourType; // 0x112(0x01)
	bool bCheckIfStillInWorld; // 0x113(0x01)
	char bForceSubStepping : 1; // 0x114(0x01)
	char pad_114_1 : 7; // 0x114(0x01)
	char pad_115[0x3]; // 0x115(0x03)
	struct FMulticastInlineDelegate OnInterpToReverse; // 0x118(0x10)
	struct FMulticastInlineDelegate OnInterpToStop; // 0x128(0x10)
	struct FMulticastInlineDelegate OnWaitBeginDelegate; // 0x138(0x10)
	struct FMulticastInlineDelegate OnWaitEndDelegate; // 0x148(0x10)
	struct FMulticastInlineDelegate OnResetDelegate; // 0x158(0x10)
	float MaxSimulationTimeStep; // 0x168(0x04)
	int32_t MaxSimulationIterations; // 0x16c(0x04)
	struct TArray<struct FInterpControlPoint> ControlPoints; // 0x170(0x10)
	char pad_180[0x38]; // 0x180(0x38)

	void StopSimulating(struct FHitResult& HitResult); // Function Engine.InterpToMovementComponent.StopSimulating // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x92c9424
	void RestartMovement(float InitialDirection); // Function Engine.InterpToMovementComponent.RestartMovement // (Final|Native|Public|BlueprintCallable) // @ game+0x92c9258
	void ResetControlPoints(); // Function Engine.InterpToMovementComponent.ResetControlPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x92c9218
	void OnInterpToWaitEndDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0xd67374
	void OnInterpToWaitBeginDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0xd67374
	void OnInterpToStopDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0xd67374
	void OnInterpToReverseDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0xd67374
	void OnInterpToResetDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0xd67374
	void FinaliseControlPoints(); // Function Engine.InterpToMovementComponent.FinaliseControlPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x92c9204
	void AddControlPointPosition(struct FVector Pos, bool bPositionIsRelative); // Function Engine.InterpToMovementComponent.AddControlPointPosition // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x92c8604
};

// Class Engine.IntSerialization
// Size: 0x50 (Inherited: 0x28)
struct UIntSerialization : UObject {
	uint16_t UnsignedInt16Variable; // 0x28(0x02)
	char pad_2A[0x2]; // 0x2a(0x02)
	uint32_t UnsignedInt32Variable; // 0x2c(0x04)
	uint64_t UnsignedInt64Variable; // 0x30(0x08)
	int8_t SignedInt8Variable; // 0x38(0x01)
	char pad_39[0x1]; // 0x39(0x01)
	int16_t SignedInt16Variable; // 0x3a(0x02)
	char pad_3C[0x4]; // 0x3c(0x04)
	int64_t SignedInt64Variable; // 0x40(0x08)
	char UnsignedInt8Variable; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	int32_t SignedInt32Variable; // 0x4c(0x04)
};

// Class Engine.ISMPartitionInstanceManager
// Size: 0x28 (Inherited: 0x28)
struct UISMPartitionInstanceManager : UInterface {
};

// Class Engine.ISMPartitionInstanceManagerProvider
// Size: 0x28 (Inherited: 0x28)
struct UISMPartitionInstanceManagerProvider : UInterface {
};

// Class Engine.KillZVolume
// Size: 0x2d0 (Inherited: 0x2d0)
struct AKillZVolume : APhysicsVolume {
};

// Class Engine.KismetArrayLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetArrayLibrary : UBlueprintFunctionLibrary {

	void SetArrayPropertyByName(struct UObject* Object, struct FName PropertyName, struct TArray<int32_t>& Value); // Function Engine.KismetArrayLibrary.SetArrayPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92c92e4
	void FilterArray(struct TArray<struct AActor*>& TargetArray, struct AActor* FilterClass, struct TArray<struct AActor*>& FilteredArray); // Function Engine.KismetArrayLibrary.FilterArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92c90c0
	void Array_Swap(struct TArray<int32_t>& TargetArray, int32_t FirstIndex, int32_t SecondIndex); // Function Engine.KismetArrayLibrary.Array_Swap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92c8fa0
	void Array_Shuffle(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Shuffle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2276464
	void Array_Set(struct TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item, bool bSizeToFit); // Function Engine.KismetArrayLibrary.Array_Set // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x14b93c0
	void Array_Reverse(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Reverse // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92c8f14
	void Array_Resize(struct TArray<int32_t>& TargetArray, int32_t Size); // Function Engine.KismetArrayLibrary.Array_Resize // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1616e90
	bool Array_RemoveItem(struct TArray<int32_t>& TargetArray, int32_t& Item); // Function Engine.KismetArrayLibrary.Array_RemoveItem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x161854c
	void Array_Remove(struct TArray<int32_t>& TargetArray, int32_t IndexToRemove); // Function Engine.KismetArrayLibrary.Array_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92c8e2c
	void Array_RandomFromStream(struct TArray<int32_t>& TargetArray, struct FRandomStream& RandomStream, int32_t& OutItem, int32_t& OutIndex); // Function Engine.KismetArrayLibrary.Array_RandomFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92c8cb8
	void Array_Random(struct TArray<int32_t>& TargetArray, int32_t& OutItem, int32_t& OutIndex); // Function Engine.KismetArrayLibrary.Array_Random // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92c8b84
	int32_t Array_Length(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xdcfc78
	int32_t Array_LastIndex(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_LastIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1eb0b44
	bool Array_IsValidIndex(struct TArray<int32_t>& TargetArray, int32_t IndexToTest); // Function Engine.KismetArrayLibrary.Array_IsValidIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce97c0
	bool Array_IsNotEmpty(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_IsNotEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x24d9cb4
	bool Array_IsEmpty(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_IsEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x245dcbc
	void Array_Insert(struct TArray<int32_t>& TargetArray, int32_t& NewItem, int32_t Index); // Function Engine.KismetArrayLibrary.Array_Insert // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92c89a0
	bool Array_Identical(struct TArray<int32_t>& ArrayA, struct TArray<int32_t>& ArrayB); // Function Engine.KismetArrayLibrary.Array_Identical // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92c8898
	void Array_Get(struct TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item); // Function Engine.KismetArrayLibrary.Array_Get // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0xdcf160
	int32_t Array_Find(struct TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Function Engine.KismetArrayLibrary.Array_Find // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92c86e0
	bool Array_Contains(struct TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Function Engine.KismetArrayLibrary.Array_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x14b9724
	void Array_Clear(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1616fb4
	void Array_Append(struct TArray<int32_t>& TargetArray, struct TArray<int32_t>& SourceArray); // Function Engine.KismetArrayLibrary.Array_Append // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1616c50
	int32_t Array_AddUnique(struct TArray<int32_t>& TargetArray, int32_t& NewItem); // Function Engine.KismetArrayLibrary.Array_AddUnique // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x19d06b8
	int32_t Array_Add(struct TArray<int32_t>& TargetArray, int32_t& NewItem); // Function Engine.KismetArrayLibrary.Array_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x14b90c0
};

// Class Engine.KismetGuidLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetGuidLibrary : UBlueprintFunctionLibrary {

	void Parse_StringToGuid(struct FString GuidString, struct FGuid& OutGuid, bool& Success); // Function Engine.KismetGuidLibrary.Parse_StringToGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cc634
	bool NotEqual_GuidGuid(struct FGuid& A, struct FGuid& B); // Function Engine.KismetGuidLibrary.NotEqual_GuidGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cc52c
	struct FGuid NewGuid(); // Function Engine.KismetGuidLibrary.NewGuid // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cc4fc
	bool IsValid_Guid(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.IsValid_Guid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cb3c4
	void Invalidate_Guid(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.Invalidate_Guid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92cb340
	bool EqualEqual_GuidGuid(struct FGuid& A, struct FGuid& B); // Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92c97bc
	struct FString Conv_GuidToString(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.Conv_GuidToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92c961c
};

// Class Engine.KismetInputLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetInputLibrary : UBlueprintFunctionLibrary {

	bool PointerEvent_IsTouchEvent(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cd2b4
	bool PointerEvent_IsMouseButtonDown(struct FPointerEvent& Input, struct FKey MouseButton); // Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cd0e8
	float PointerEvent_GetWheelDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cd010
	int32_t PointerEvent_GetUserIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92ccf44
	int32_t PointerEvent_GetTouchpadIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cce78
	struct FVector2D PointerEvent_GetScreenSpacePosition(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ccda8
	int32_t PointerEvent_GetPointerIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cccdc
	struct FVector2D PointerEvent_GetLastScreenSpacePosition(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ccc0c
	enum class ESlateGesture PointerEvent_GetGestureType(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetGestureType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92ccb0c
	struct FVector2D PointerEvent_GetGestureDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cca38
	struct FKey PointerEvent_GetEffectingButton(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cc8f8
	struct FVector2D PointerEvent_GetCursorDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cc828
	bool ModifierKeysState_IsShiftDown(struct FSlateModifierKeysState& KeysState); // Function Engine.KismetInputLibrary.ModifierKeysState_IsShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cc470
	bool ModifierKeysState_IsControlDown(struct FSlateModifierKeysState& KeysState); // Function Engine.KismetInputLibrary.ModifierKeysState_IsControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cc3e8
	bool ModifierKeysState_IsCommandDown(struct FSlateModifierKeysState& KeysState); // Function Engine.KismetInputLibrary.ModifierKeysState_IsCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cc35c
	bool ModifierKeysState_IsAltDown(struct FSlateModifierKeysState& KeysState); // Function Engine.KismetInputLibrary.ModifierKeysState_IsAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cc2d0
	bool Key_IsVectorAxis(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsVectorAxis // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cc1ec
	bool Key_IsValid(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cc128
	bool Key_IsMouseButton(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsMouseButton // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cc064
	bool Key_IsModifierKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsModifierKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cbfa0
	bool Key_IsKeyboardKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsKeyboardKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cbeac
	bool Key_IsGamepadKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsGamepadKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cbde8
	bool Key_IsDigital(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsDigital // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cbd24
	bool Key_IsButtonAxis(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsButtonAxis // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cbc60
	bool Key_IsAxis3D(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAxis3D // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cbb9c
	bool Key_IsAxis2D(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAxis2D // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cbad8
	bool Key_IsAxis1D(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAxis1D // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cba14
	bool Key_IsAnalog(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAnalog // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cb950
	enum class EUINavigation Key_GetNavigationDirectionFromKey(struct FKeyEvent& InKeyEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cb83c
	enum class EUINavigation Key_GetNavigationDirectionFromAnalog(struct FAnalogInputEvent& InAnalogEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cb764
	enum class EUINavigationAction Key_GetNavigationActionFromKey(struct FKeyEvent& InKeyEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationActionFromKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cb650
	enum class EUINavigationAction Key_GetNavigationAction(struct FKey& InKey); // Function Engine.KismetInputLibrary.Key_GetNavigationAction // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cb578
	struct FText Key_GetDisplayName(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_GetDisplayName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cb45c
	bool InputEvent_IsShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cb28c
	bool InputEvent_IsRightShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cb1d8
	bool InputEvent_IsRightControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cb124
	bool InputEvent_IsRightCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cb070
	bool InputEvent_IsRightAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cafbc
	bool InputEvent_IsRepeat(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRepeat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92caf0c
	bool InputEvent_IsLeftShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cae58
	bool InputEvent_IsLeftControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cada4
	bool InputEvent_IsLeftCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cacf0
	bool InputEvent_IsLeftAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cac3c
	bool InputEvent_IsControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cab88
	bool InputEvent_IsCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92caad4
	bool InputEvent_IsAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92caa20
	struct FText InputChord_GetDisplayName(struct FInputChord& Key); // Function Engine.KismetInputLibrary.InputChord_GetDisplayName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92ca8ec
	int32_t GetUserIndex(struct FKeyEvent& Input); // Function Engine.KismetInputLibrary.GetUserIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92ca7ec
	struct FSlateModifierKeysState GetModifierKeysState(); // Function Engine.KismetInputLibrary.GetModifierKeysState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92ca33c
	struct FKey GetKey(struct FKeyEvent& Input); // Function Engine.KismetInputLibrary.GetKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92ca038
	float GetAnalogValue(struct FAnalogInputEvent& Input); // Function Engine.KismetInputLibrary.GetAnalogValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92c9c1c
	bool EqualEqual_KeyKey(struct FKey A, struct FKey B); // Function Engine.KismetInputLibrary.EqualEqual_KeyKey // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92c9a38
	bool EqualEqual_InputChordInputChord(struct FInputChord A, struct FInputChord B); // Function Engine.KismetInputLibrary.EqualEqual_InputChordInputChord // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92c98c4
	void CalibrateTilt(); // Function Engine.KismetInputLibrary.CalibrateTilt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92c94bc
};

// Class Engine.KismetInternationalizationLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetInternationalizationLibrary : UBlueprintFunctionLibrary {

	bool SetCurrentLocale(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLocale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92cdae4
	bool SetCurrentLanguageAndLocale(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92cd94c
	bool SetCurrentLanguage(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92cd750
	bool SetCurrentCulture(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92cd548
	bool SetCurrentAssetGroupCulture(struct FName AssetGroup, struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92cd380
	struct FString GetSuitableCulture(struct TArray<struct FString>& AvailableCultures, struct FString CultureToMatch, struct FString FallbackCulture); // Function Engine.KismetInternationalizationLibrary.GetSuitableCulture // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92ca508
	struct FString GetNativeCulture(enum class ELocalizedTextSourceCategory TextCategory); // Function Engine.KismetInternationalizationLibrary.GetNativeCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92ca368
	struct TArray<struct FString> GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional); // Function Engine.KismetInternationalizationLibrary.GetLocalizedCultures // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92ca1a8
	struct FString GetCurrentLocale(); // Function Engine.KismetInternationalizationLibrary.GetCurrentLocale // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92c9fc4
	struct FString GetCurrentLanguage(); // Function Engine.KismetInternationalizationLibrary.GetCurrentLanguage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2490038
	struct FString GetCurrentCulture(); // Function Engine.KismetInternationalizationLibrary.GetCurrentCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92c9f50
	struct FString GetCurrentAssetGroupCulture(struct FName AssetGroup); // Function Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92c9e98
	struct FString GetCultureDisplayName(struct FString Culture, bool Localized); // Function Engine.KismetInternationalizationLibrary.GetCultureDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92c9ce0
	void ClearCurrentAssetGroupCulture(struct FName AssetGroup, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92c9508
};

// Class Engine.KismetMaterialLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetMaterialLibrary : UBlueprintFunctionLibrary {

	void SetVectorParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName, struct FLinearColor& ParameterValue); // Function Engine.KismetMaterialLibrary.SetVectorParameterValue // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x228c6e0
	void SetScalarParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName, float ParameterValue); // Function Engine.KismetMaterialLibrary.SetScalarParameterValue // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x2093fb0
	struct FLinearColor GetVectorParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName); // Function Engine.KismetMaterialLibrary.GetVectorParameterValue // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x92d90d4
	float GetScalarParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName); // Function Engine.KismetMaterialLibrary.GetScalarParameterValue // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x1a477f0
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(struct UObject* WorldContextObject, struct UMaterialInterface* Parent, struct FName OptionalName, enum class EMIDCreationFlags CreationFlags); // Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x129bb70
};

// Class Engine.KismetMathLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetMathLibrary : UBlueprintFunctionLibrary {

	int32_t Xor_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Xor_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f08dc
	int64_t Xor_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Xor_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f081c
	int32_t wrap(int32_t Value, int32_t min, int32_t max); // Function Engine.KismetMathLibrary.wrap // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f0714
	struct FVector WeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_FVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f04b4
	struct FRotator WeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_FRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f0370
	float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f05f8
	double VSizeXYSquared(struct FVector A); // Function Engine.KismetMathLibrary.VSizeXYSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ec5a4
	double VSizeXY(struct FVector A); // Function Engine.KismetMathLibrary.VSizeXY // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ec514
	double VSizeSquared(struct FVector A); // Function Engine.KismetMathLibrary.VSizeSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x22e866c
	double VSize2DSquared(struct FVector2D A); // Function Engine.KismetMathLibrary.VSize2DSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ec488
	double VSize2D(struct FVector2D A); // Function Engine.KismetMathLibrary.VSize2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x24f6058
	double VSize(struct FVector A); // Function Engine.KismetMathLibrary.VSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x22528fc
	struct FVector VLerp(struct FVector A, struct FVector B, float Alpha); // Function Engine.KismetMathLibrary.VLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x21ffe6c
	struct FVector VInterpTo_Constant(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.VInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ec310
	struct FVector VInterpTo(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.VInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ec198
	struct FVector VectorSpringInterp(struct FVector Current, struct FVector Target, struct FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, struct FVector MinValue, struct FVector MaxValue, bool bInitializeFromTarget); // Function Engine.KismetMathLibrary.VectorSpringInterp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92edc0c
	struct FVector Vector_Zero(); // Function Engine.KismetMathLibrary.Vector_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f0348
	struct FVector Vector_Up(); // Function Engine.KismetMathLibrary.Vector_Up // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2bd9244
	void Vector_UnwindEuler(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_UnwindEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92f02ac
	struct FVector2D Vector_UnitCartesianToSpherical(struct FVector A); // Function Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f01bc
	struct FVector Vector_ToRadians(struct FVector A); // Function Engine.KismetMathLibrary.Vector_ToRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f012c
	struct FVector Vector_ToDegrees(struct FVector A); // Function Engine.KismetMathLibrary.Vector_ToDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f009c
	struct FVector Vector_SnappedToGrid(struct FVector InVect, float InGridSize); // Function Engine.KismetMathLibrary.Vector_SnappedToGrid // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92efed8
	void Vector_Set(struct FVector& A, double X, double Y, double Z); // Function Engine.KismetMathLibrary.Vector_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92efd80
	struct FVector Vector_Right(); // Function Engine.KismetMathLibrary.Vector_Right // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92efd58
	struct FVector Vector_Reciprocal(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_Reciprocal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92efc78
	struct FVector Vector_ProjectOnToNormal(struct FVector V, struct FVector InNormal); // Function Engine.KismetMathLibrary.Vector_ProjectOnToNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92efb80
	struct FVector Vector_One(); // Function Engine.KismetMathLibrary.Vector_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92efb58
	struct FVector Vector_NormalUnsafe(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_NormalUnsafe // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ef924
	void Vector_Normalize(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_Normalize // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92efa18
	struct FVector Vector_Normal2D(struct FVector A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_Normal2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x29f401c
	struct FVector Vector_MirrorByPlane(struct FVector A, struct FPlane& InPlane); // Function Engine.KismetMathLibrary.Vector_MirrorByPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ef7d4
	struct FVector Vector_Left(); // Function Engine.KismetMathLibrary.Vector_Left // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ef7ac
	bool Vector_IsZero(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ef70c
	bool Vector_IsUnit(struct FVector& A, float SquaredLenthTolerance); // Function Engine.KismetMathLibrary.Vector_IsUnit // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ef5f8
	bool Vector_IsUniform(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_IsUniform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ef4dc
	bool Vector_IsNormal(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsNormal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ef41c
	bool Vector_IsNearlyZero(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_IsNearlyZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x21ed754
	bool Vector_IsNAN(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsNAN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ef360
	double Vector_HeadingAngle(struct FVector A); // Function Engine.KismetMathLibrary.Vector_HeadingAngle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ef224
	struct FVector Vector_GetSignVector(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetSignVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ef15c
	struct FVector Vector_GetProjection(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetProjection // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ef0c0
	double Vector_GetAbsMin(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbsMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ef024
	double Vector_GetAbsMax(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbsMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eef88
	struct FVector Vector_GetAbs(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbs // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eeef8
	struct FVector Vector_Forward(); // Function Engine.KismetMathLibrary.Vector_Forward // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eeed0
	struct FVector Vector_Down(); // Function Engine.KismetMathLibrary.Vector_Down // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eeea8
	double Vector_DistanceSquared(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_DistanceSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eedc4
	double Vector_Distance2DSquared(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance2DSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xd64508
	double Vector_Distance2D(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eecf0
	double Vector_Distance(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1f9e29c
	double Vector_CosineAngle2D(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_CosineAngle2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eeb64
	struct FVector Vector_ComponentMin(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_ComponentMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eea88
	struct FVector Vector_ComponentMax(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_ComponentMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ee9ac
	struct FVector Vector_ClampSizeMax2D(struct FVector A, double max); // Function Engine.KismetMathLibrary.Vector_ClampSizeMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ee6c4
	struct FVector Vector_ClampSizeMax(struct FVector A, double max); // Function Engine.KismetMathLibrary.Vector_ClampSizeMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ee830
	struct FVector Vector_ClampSize2D(struct FVector A, double min, double max); // Function Engine.KismetMathLibrary.Vector_ClampSize2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ee508
	struct FVector Vector_BoundedToCube(struct FVector InVect, float InRadius); // Function Engine.KismetMathLibrary.Vector_BoundedToCube // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ee3f8
	struct FVector Vector_BoundedToBox(struct FVector InVect, struct FVector InBoxMin, struct FVector InBoxMax); // Function Engine.KismetMathLibrary.Vector_BoundedToBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ee2b4
	struct FVector Vector_Backward(); // Function Engine.KismetMathLibrary.Vector_Backward // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ee28c
	void Vector_Assign(struct FVector& A, struct FVector& InVector); // Function Engine.KismetMathLibrary.Vector_Assign // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92ee1b4
	void Vector_AddBounded(struct FVector& A, struct FVector InAddVect, float InRadius); // Function Engine.KismetMathLibrary.Vector_AddBounded // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92ee04c
	struct FVector4 Vector4_Zero(); // Function Engine.KismetMathLibrary.Vector4_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92edbec
	double Vector4_SizeSquared3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_SizeSquared3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eda70
	double Vector4_SizeSquared(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_SizeSquared // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92edb28
	double Vector4_Size3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Size3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ed8ec
	double Vector4_Size(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Size // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ed9a8
	void Vector4_Set(struct FVector4& A, double X, double Y, double Z, double W); // Function Engine.KismetMathLibrary.Vector4_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92ed738
	struct FVector4 Vector4_NormalUnsafe3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_NormalUnsafe3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ed4bc
	void Vector4_Normalize3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_Normalize3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92ed5c0
	struct FVector4 Vector4_Normal3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_Normal3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ed344
	struct FVector4 Vector4_Negated(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Negated // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ed298
	struct FVector4 Vector4_MirrorByVector3(struct FVector4& Direction, struct FVector4& SurfaceNormal); // Function Engine.KismetMathLibrary.Vector4_MirrorByVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ed128
	bool Vector4_IsZero(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ed070
	bool Vector4_IsUnit3(struct FVector4& A, float SquaredLenthTolerance); // Function Engine.KismetMathLibrary.Vector4_IsUnit3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ecf48
	bool Vector4_IsNormal3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsNormal3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ece74
	bool Vector4_IsNearlyZero3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_IsNearlyZero3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ecd54
	bool Vector4_IsNAN(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsNAN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ecc74
	double Vector4_DotProduct3(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_DotProduct3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eca20
	double Vector4_DotProduct(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_DotProduct // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ecb44
	struct FVector4 Vector4_CrossProduct3(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_CrossProduct3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ec8d4
	void Vector4_Assign(struct FVector4& A, struct FVector4& InVector); // Function Engine.KismetMathLibrary.Vector4_Assign // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92ec7d8
	struct FVector2D Vector2DInterpTo_Constant(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ec630
	struct FVector2D Vector2DInterpTo(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.Vector2DInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d8ac50
	struct FVector2D Vector2D_Zero(); // Function Engine.KismetMathLibrary.Vector2D_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ec7bc
	struct FVector2D Vector2D_Unit45Deg(); // Function Engine.KismetMathLibrary.Vector2D_Unit45Deg // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ec7a0
	struct FVector2D Vector2D_One(); // Function Engine.KismetMathLibrary.Vector2D_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ec784
	struct FVector VEase(struct FVector A, struct FVector B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.VEase // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ebf9c
	struct FDateTime UtcNow(); // Function Engine.KismetMathLibrary.UtcNow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ebf6c
	struct FVector4 TransformVector4(struct FMatrix& Matrix, struct FVector4& Vec4); // Function Engine.KismetMathLibrary.TransformVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ebafc
	struct FRotator TransformRotation(struct FTransform& T, struct FRotator Rotation); // Function Engine.KismetMathLibrary.TransformRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x21737c8
	struct FVector TransformLocation(struct FTransform& T, struct FVector Location); // Function Engine.KismetMathLibrary.TransformLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eb898
	struct FVector TransformDirection(struct FTransform& T, struct FVector Direction); // Function Engine.KismetMathLibrary.TransformDirection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eb64c
	float Transform_Determinant(struct FTransform& Transform); // Function Engine.KismetMathLibrary.Transform_Determinant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ebca0
	struct FVector2D ToSign2D(struct FVector2D A); // Function Engine.KismetMathLibrary.ToSign2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eb55c
	struct FVector2D ToRounded2D(struct FVector2D A); // Function Engine.KismetMathLibrary.ToRounded2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eb45c
	void ToDirectionAndLength2D(struct FVector2D A, struct FVector2D& OutDir, double& OutLength); // Function Engine.KismetMathLibrary.ToDirectionAndLength2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eb2f8
	struct FDateTime Today(); // Function Engine.KismetMathLibrary.Today // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eb608
	struct FTransform TLerp(struct FTransform& A, struct FTransform& B, float Alpha, enum class ELerpInterpolationMode InterpMode); // Function Engine.KismetMathLibrary.TLerp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x23eed64
	struct FTransform TInterpTo(struct FTransform& Current, struct FTransform& Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.TInterpTo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ead44
	struct FTimespan TimespanZeroValue(); // Function Engine.KismetMathLibrary.TimespanZeroValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5d0c950
	float TimespanRatio(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.TimespanRatio // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eb224
	struct FTimespan TimespanMinValue(); // Function Engine.KismetMathLibrary.TimespanMinValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eb208
	struct FTimespan TimespanMaxValue(); // Function Engine.KismetMathLibrary.TimespanMaxValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eb1ec
	bool TimespanFromString(struct FString TimespanString, struct FTimespan& Result); // Function Engine.KismetMathLibrary.TimespanFromString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eb024
	struct FTransform TEase(struct FTransform& A, struct FTransform& B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.TEase // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92eaa60
	double tan(double A); // Function Engine.KismetMathLibrary.tan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92eaf9c
	struct FVector Subtract_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Subtract_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x20c7b0c
	struct FVector Subtract_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ea988
	struct FVector Subtract_VectorFloat(struct FVector A, double B); // Function Engine.KismetMathLibrary.Subtract_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ea8b0
	struct FVector4 Subtract_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Subtract_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ea77c
	struct FVector2D Subtract_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1e3ea70
	struct FVector2D Subtract_Vector2DFloat(struct FVector2D A, double B); // Function Engine.KismetMathLibrary.Subtract_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ea6a8
	struct FTimespan Subtract_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Subtract_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ea1a0
	struct FQuat Subtract_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Subtract_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ea5c8
	struct FLinearColor Subtract_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Subtract_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ea4c8
	struct FIntPoint Subtract_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Subtract_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ea3f4
	struct FIntPoint Subtract_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ea320
	int32_t Subtract_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e89414
	int64_t Subtract_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Subtract_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92ea260
	double Subtract_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.Subtract_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdd0540
	struct FDateTime Subtract_DateTimeTimespan(struct FDateTime A, struct FTimespan B); // Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ea1a0
	struct FTimespan Subtract_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x27c2cc4
	char Subtract_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Subtract_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92ea0e4
	double Square(double A); // Function Engine.KismetMathLibrary.Square // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2316638
	double sqrt(double A); // Function Engine.KismetMathLibrary.sqrt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27aea3c
	struct FVector Spherical2DToUnitCartesian(struct FVector2D A); // Function Engine.KismetMathLibrary.Spherical2DToUnitCartesian // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ea008
	double sin(double A); // Function Engine.KismetMathLibrary.sin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x23d9f34
	int64_t SignOfInteger64(int64_t A); // Function Engine.KismetMathLibrary.SignOfInteger64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e9ef4
	int32_t SignOfInteger(int32_t A); // Function Engine.KismetMathLibrary.SignOfInteger // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e9f80
	double SignOfFloat(double A); // Function Engine.KismetMathLibrary.SignOfFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e9e50
	void SetVectorSpringStateVelocity(struct FVectorSpringState& SpringState, struct FVector Velocity); // Function Engine.KismetMathLibrary.SetVectorSpringStateVelocity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e9d58
	void SetRandomStreamSeed(struct FRandomStream& Stream, int32_t NewSeed); // Function Engine.KismetMathLibrary.SetRandomStreamSeed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e9c90
	void SetQuaternionSpringStateAngularVelocity(struct FQuaternionSpringState& SpringState, struct FVector AngularVelocity); // Function Engine.KismetMathLibrary.SetQuaternionSpringStateAngularVelocity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e9b88
	void SetFloatSpringStateVelocity(struct FFloatSpringState& SpringState, float Velocity); // Function Engine.KismetMathLibrary.SetFloatSpringStateVelocity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92e9ab8
	void Set2D(struct FVector2D& A, double X, double Y); // Function Engine.KismetMathLibrary.Set2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e999c
	struct FVector SelectVector(struct FVector A, struct FVector B, bool bPickA); // Function Engine.KismetMathLibrary.SelectVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x23a569c
	struct FTransform SelectTransform(struct FTransform& A, struct FTransform& B, bool bPickA); // Function Engine.KismetMathLibrary.SelectTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e9794
	struct FString SelectString(struct FString A, struct FString B, bool bPickA); // Function Engine.KismetMathLibrary.SelectString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2383ed8
	struct FRotator SelectRotator(struct FRotator A, struct FRotator B, bool bPickA); // Function Engine.KismetMathLibrary.SelectRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x23a569c
	struct UObject* SelectObject(struct UObject* A, struct UObject* B, bool bSelectA); // Function Engine.KismetMathLibrary.SelectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e96a0
	int32_t SelectInt(int32_t A, int32_t B, bool bPickA); // Function Engine.KismetMathLibrary.SelectInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdcf814
	double SelectFloat(double A, double B, bool bPickA); // Function Engine.KismetMathLibrary.SelectFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fc3fd4
	struct FLinearColor SelectColor(struct FLinearColor A, struct FLinearColor B, bool bPickA); // Function Engine.KismetMathLibrary.SelectColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1f2b5ac
	struct UObject* SelectClass(struct UObject* A, struct UObject* B, bool bSelectA); // Function Engine.KismetMathLibrary.SelectClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e96a0
	void SeedRandomStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.SeedRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e9614
	double SafeDivide(double A, double B); // Function Engine.KismetMathLibrary.SafeDivide // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x21b1940
	int64_t Round64(double A); // Function Engine.KismetMathLibrary.Round64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e954c
	int32_t round(double A); // Function Engine.KismetMathLibrary.round // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x203d678
	struct FRotator RotatorFromAxisAndAngle(struct FVector Axis, float Angle); // Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e9458
	struct FVector RotateAngleAxis(struct FVector InVect, float AngleDeg, struct FVector Axis); // Function Engine.KismetMathLibrary.RotateAngleAxis // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x143bb58
	struct FRotator RLerp(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath); // Function Engine.KismetMathLibrary.RLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e6e20
	struct FRotator RInterpTo_Constant(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.RInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e6ca8
	struct FRotator RInterpTo(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.RInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x244d21c
	void RGBToHSV_Vector(struct FLinearColor RGB, struct FLinearColor& HSV); // Function Engine.KismetMathLibrary.RGBToHSV_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e6bd0
	void RGBToHSV(struct FLinearColor InColor, float& H, float& S, float& V, float& A); // Function Engine.KismetMathLibrary.RGBToHSV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x24889f8
	struct FLinearColor RGBLinearToHSV(struct FLinearColor RGB); // Function Engine.KismetMathLibrary.RGBLinearToHSV // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e6b40
	void ResetVectorSpringState(struct FVectorSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetVectorSpringState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92e939c
	void ResetRandomStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.ResetRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e9320
	void ResetQuaternionSpringState(struct FQuaternionSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetQuaternionSpringState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92e9250
	void ResetFloatSpringState(struct FFloatSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetFloatSpringState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x26c8f60
	struct FRotator REase(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.REase // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e6900
	struct FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e8c48
	struct FVector RandomUnitVectorInEllipticalConeInRadians(struct FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e8b24
	struct FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e89c0
	struct FVector RandomUnitVectorInEllipticalConeInDegrees(struct FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e888c
	struct FVector RandomUnitVectorInConeInRadiansFromStream(struct FVector& ConeDir, float ConeHalfAngleInRadians, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e833c
	struct FVector RandomUnitVectorInConeInRadians(struct FVector ConeDir, float ConeHalfAngleInRadians); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e8248
	struct FVector RandomUnitVectorInConeInDegreesFromStream(struct FVector& ConeDir, float ConeHalfAngleInDegrees, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e7cf0
	struct FVector RandomUnitVectorInConeInDegrees(struct FVector ConeDir, float ConeHalfAngleInDegrees); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e7bf4
	struct FVector RandomUnitVectorFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2947348
	struct FVector RandomUnitVector(); // Function Engine.KismetMathLibrary.RandomUnitVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x22abc10
	struct FRotator RandomRotatorFromStream(bool bRoll, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomRotatorFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e7b14
	struct FRotator RandomRotator(bool bRoll); // Function Engine.KismetMathLibrary.RandomRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e7a80
	struct FVector RandomPointInBoundingBoxFromStream(struct FVector Center, struct FVector HalfSize, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomPointInBoundingBoxFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e7934
	struct FVector RandomPointInBoundingBox(struct FVector Center, struct FVector HalfSize); // Function Engine.KismetMathLibrary.RandomPointInBoundingBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e7800
	int32_t RandomIntegerInRangeFromStream(int32_t min, int32_t max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e76c0
	int32_t RandomIntegerInRange(int32_t min, int32_t max); // Function Engine.KismetMathLibrary.RandomIntegerInRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x214d62c
	int32_t RandomIntegerFromStream(int32_t max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomIntegerFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e75b8
	int64_t RandomInteger64InRange(int64_t min, int64_t max); // Function Engine.KismetMathLibrary.RandomInteger64InRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e74ac
	int64_t RandomInteger64(int64_t max); // Function Engine.KismetMathLibrary.RandomInteger64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e73e8
	int32_t RandomInteger(int32_t max); // Function Engine.KismetMathLibrary.RandomInteger // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2b5f164
	float RandomFloatInRangeFromStream(float min, float max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e72b4
	double RandomFloatInRange(double min, double max); // Function Engine.KismetMathLibrary.RandomFloatInRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1de2530
	float RandomFloatFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomFloatFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e7204
	double RandomFloat(); // Function Engine.KismetMathLibrary.RandomFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x22d9ecc
	bool RandomBoolWithWeightFromStream(float Weight, struct FRandomStream& RandomStream); // Function Engine.KismetMathLibrary.RandomBoolWithWeightFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e7130
	bool RandomBoolWithWeight(float Weight); // Function Engine.KismetMathLibrary.RandomBoolWithWeight // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x225c6e8
	bool RandomBoolFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomBoolFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e7074
	bool RandomBool(); // Function Engine.KismetMathLibrary.RandomBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e7024
	double RadiansToDegrees(double A); // Function Engine.KismetMathLibrary.RadiansToDegrees // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e6f9c
	struct FQuat QuaternionSpringInterp(struct FQuat Current, struct FQuat Target, struct FQuaternionSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bInitializeFromTarget); // Function Engine.KismetMathLibrary.QuaternionSpringInterp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e65d0
	struct FVector Quat_VectorUp(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorUp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e5264
	struct FVector Quat_VectorRight(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorRight // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e5180
	struct FVector Quat_VectorForward(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorForward // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e509c
	struct FVector Quat_UnrotateVector(struct FQuat& Q, struct FVector& V); // Function Engine.KismetMathLibrary.Quat_UnrotateVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e63b0
	float Quat_SizeSquared(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_SizeSquared // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e62f8
	float Quat_Size(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Size // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e623c
	void Quat_SetFromEuler(struct FQuat& Q, struct FVector& Euler); // Function Engine.KismetMathLibrary.Quat_SetFromEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e6154
	void Quat_SetComponents(struct FQuat& Q, float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.Quat_SetComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e5fc0
	struct FRotator Quat_Rotator(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Rotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e5f24
	struct FVector Quat_RotateVector(struct FQuat& Q, struct FVector& V); // Function Engine.KismetMathLibrary.Quat_RotateVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e5d48
	struct FQuat Quat_Normalized(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_Normalized // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e5be4
	void Quat_Normalize(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_Normalize // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e5a80
	struct FQuat Quat_MakeFromEuler(struct FVector& Euler); // Function Engine.KismetMathLibrary.Quat_MakeFromEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e59e4
	struct FQuat Quat_Log(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Log // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e5948
	bool Quat_IsNormalized(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsNormalized // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e5848
	bool Quat_IsNonFinite(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsNonFinite // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e577c
	bool Quat_IsIdentity(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_IsIdentity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e5608
	bool Quat_IsFinite(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsFinite // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e553c
	struct FQuat Quat_Inversed(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Inversed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e54a0
	struct FQuat Quat_Identity(); // Function Engine.KismetMathLibrary.Quat_Identity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e5478
	struct FVector Quat_GetRotationAxis(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetRotationAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e5348
	struct FVector Quat_GetAxisZ(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e5264
	struct FVector Quat_GetAxisY(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e5180
	struct FVector Quat_GetAxisX(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e509c
	float Quat_GetAngle(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAngle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e4fec
	struct FQuat Quat_Exp(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Exp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e4f50
	struct FVector Quat_Euler(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Euler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e4eb4
	void Quat_EnforceShortestArcWith(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Quat_EnforceShortestArcWith // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e4d80
	float Quat_AngularDistance(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Quat_AngularDistance // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e4c38
	struct FVector ProjectVectorOnToVector(struct FVector V, struct FVector Target); // Function Engine.KismetMathLibrary.ProjectVectorOnToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e4b38
	struct FVector ProjectVectorOnToPlane(struct FVector V, struct FVector PlaneNormal); // Function Engine.KismetMathLibrary.ProjectVectorOnToPlane // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e4a38
	struct FVector ProjectPointOnToPlane(struct FVector Point, struct FVector PlaneBase, struct FVector PlaneNormal); // Function Engine.KismetMathLibrary.ProjectPointOnToPlane // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x24fe5d0
	bool PointsAreCoplanar(struct TArray<struct FVector>& Points, float Tolerance); // Function Engine.KismetMathLibrary.PointsAreCoplanar // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92e4944
	float PerlinNoise1D(float Value); // Function Engine.KismetMathLibrary.PerlinNoise1D // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x26d3244
	int32_t Percent_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Percent_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2149c98
	double Percent_FloatFloat(double A, double B); // Function Engine.KismetMathLibrary.Percent_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e47fc
	char Percent_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Percent_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e471c
	int32_t Or_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Or_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e4660
	int64_t Or_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Or_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e45a0
	struct FDateTime Now(); // Function Engine.KismetMathLibrary.Now // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2b64598
	bool NotEqualExactly_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.NotEqualExactly_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e3918
	bool NotEqualExactly_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e37e4
	bool NotEqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e3718
	bool NotEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x27b8f88
	bool NotEqual_Vector4Vector4(struct FVector4& A, struct FVector4& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e4300
	bool NotEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e41d0
	bool NotEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e39f4
	bool NotEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_RotatorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e3f88
	bool NotEqual_QuatQuat(struct FQuat& A, struct FQuat& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e3dd0
	bool NotEqual_ObjectObject(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.NotEqual_ObjectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f0883c
	bool NotEqual_NameName(struct FName A, struct FName B); // Function Engine.KismetMathLibrary.NotEqual_NameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2214d84
	bool NotEqual_MatrixMatrix(struct FMatrix& A, struct FMatrix& B, float Tolerance); // Function Engine.KismetMathLibrary.NotEqual_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e3c70
	bool NotEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e3b80
	bool NotEqual_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.NotEqual_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e3ab4
	bool NotEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.NotEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e62be8
	bool NotEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.NotEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1722b48
	bool NotEqual_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.NotEqual_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdd0694
	bool NotEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e39f4
	bool NotEqual_ClassClass(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.NotEqual_ClassClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f0883c
	bool NotEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.NotEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdd026c
	bool NotEqual_BoolBool(bool A, bool B); // Function Engine.KismetMathLibrary.NotEqual_BoolBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e7aa10
	bool Not_PreBool(bool A); // Function Engine.KismetMathLibrary.Not_PreBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c15c04
	int64_t Not_Int64(int64_t A); // Function Engine.KismetMathLibrary.Not_Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e44a4
	int32_t Not_Int(int32_t A); // Function Engine.KismetMathLibrary.Not_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e4524
	struct FVector2D NormalSafe2D(struct FVector2D A, float Tolerance); // Function Engine.KismetMathLibrary.NormalSafe2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e33d8
	double NormalizeToRange(double Value, double RangeMin, double RangeMax); // Function Engine.KismetMathLibrary.NormalizeToRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x22edac8
	struct FRotator NormalizedDeltaRotator(struct FRotator A, struct FRotator B); // Function Engine.KismetMathLibrary.NormalizedDeltaRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e3618
	float NormalizeAxis(float Angle); // Function Engine.KismetMathLibrary.NormalizeAxis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x29b192c
	void Normalize2D(struct FVector2D& A, float Tolerance); // Function Engine.KismetMathLibrary.Normalize2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e34f4
	struct FVector2D Normal2D(struct FVector2D A); // Function Engine.KismetMathLibrary.Normal2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1e351dc
	struct FVector Normal(struct FVector A, float Tolerance); // Function Engine.KismetMathLibrary.Normal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x20ec658
	struct FVector NegateVector(struct FVector A); // Function Engine.KismetMathLibrary.NegateVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2795524
	struct FRotator NegateRotator(struct FRotator A); // Function Engine.KismetMathLibrary.NegateRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2b9baa8
	struct FVector2D Negated2D(struct FVector2D& A); // Function Engine.KismetMathLibrary.Negated2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e334c
	bool NearlyEqual_TransformTransform(struct FTransform& A, struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e30e8
	bool NearlyEqual_FloatFloat(double A, double B, double ErrorTolerance); // Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x268f18c
	double MultiplyMultiply_FloatFloat(double Base, double exp); // Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x238d674
	double MultiplyByPi(double Value); // Function Engine.KismetMathLibrary.MultiplyByPi // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x288aa94
	struct FVector Multiply_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Multiply_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x20819e4
	struct FVector Multiply_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e2d40
	struct FVector Multiply_VectorFloat(struct FVector A, double B); // Function Engine.KismetMathLibrary.Multiply_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2116cf8
	struct FVector4 Multiply_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Multiply_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e2fb4
	struct FVector2D Multiply_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Multiply_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e2eec
	struct FVector2D Multiply_Vector2DFloat(struct FVector2D A, double B); // Function Engine.KismetMathLibrary.Multiply_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1e23b6c
	struct FTimespan Multiply_TimespanFloat(struct FTimespan A, float Scalar); // Function Engine.KismetMathLibrary.Multiply_TimespanFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e2e18
	struct FRotator Multiply_RotatorInt(struct FRotator A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_RotatorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e2d40
	struct FRotator Multiply_RotatorFloat(struct FRotator A, float B); // Function Engine.KismetMathLibrary.Multiply_RotatorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e2c68
	struct FQuat Multiply_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Multiply_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e2aa0
	struct FMatrix Multiply_MatrixMatrix(struct FMatrix& A, struct FMatrix& B); // Function Engine.KismetMathLibrary.Multiply_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e294c
	struct FMatrix Multiply_MatrixFloat(struct FMatrix& A, double B); // Function Engine.KismetMathLibrary.Multiply_MatrixFloat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e27e4
	struct FLinearColor Multiply_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x23cb9bc
	struct FLinearColor Multiply_LinearColorFloat(struct FLinearColor A, float B); // Function Engine.KismetMathLibrary.Multiply_LinearColorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x25544e0
	struct FIntPoint Multiply_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Multiply_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e2708
	struct FIntPoint Multiply_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e262c
	int32_t Multiply_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x269d210
	double Multiply_IntFloat(int32_t A, double B); // Function Engine.KismetMathLibrary.Multiply_IntFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e2564
	int64_t Multiply_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Multiply_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e24a4
	double Multiply_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.Multiply_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdd0738
	char Multiply_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Multiply_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e23e4
	struct FVector MirrorVectorByNormal(struct FVector InVect, struct FVector InNormal); // Function Engine.KismetMathLibrary.MirrorVectorByNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d880c
	void MinOfIntArray(struct TArray<int32_t>& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue); // Function Engine.KismetMathLibrary.MinOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92e1fa8
	void MinOfFloatArray(struct TArray<float>& FloatArray, int32_t& IndexOfMinValue, float& MinValue); // Function Engine.KismetMathLibrary.MinOfFloatArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92e1e0c
	void MinOfByteArray(struct TArray<char>& ByteArray, int32_t& IndexOfMinValue, char& MinValue); // Function Engine.KismetMathLibrary.MinOfByteArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92e1c80
	int64_t MinInt64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.MinInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e1bbc
	void MinimumAreaRectangle(struct UObject* WorldContextObject, struct TArray<struct FVector>& InVerts, struct FVector& SampleSurfaceNormal, struct FVector& OutRectCenter, struct FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw); // Function Engine.KismetMathLibrary.MinimumAreaRectangle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e2134
	void MinAreaRectangle(struct UObject* WorldContextObject, struct TArray<struct FVector>& InPoints, struct FVector& SampleSurfaceNormal, struct FVector& OutRectCenter, struct FRotator& OutRectRotation, float& OutRectLengthX, float& OutRectLengthY, bool bDebugDraw); // Function Engine.KismetMathLibrary.MinAreaRectangle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e190c
	int32_t min(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.min // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x21f073c
	void MedianOfIntArray(struct TArray<int32_t> IntArray, float& MedianValue); // Function Engine.KismetMathLibrary.MedianOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92e1818
	void MaxOfIntArray(struct TArray<int32_t>& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue); // Function Engine.KismetMathLibrary.MaxOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92e168c
	void MaxOfFloatArray(struct TArray<float>& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue); // Function Engine.KismetMathLibrary.MaxOfFloatArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92e14f0
	void MaxOfByteArray(struct TArray<char>& ByteArray, int32_t& IndexOfMaxValue, char& MaxValue); // Function Engine.KismetMathLibrary.MaxOfByteArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92e1364
	int64_t MaxInt64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.MaxInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92e12a0
	int32_t max(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.max // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2574670
	struct FVector4 Matrix_TransformVector4(struct FMatrix& M, struct FVector4 V); // Function Engine.KismetMathLibrary.Matrix_TransformVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e0f88
	struct FVector4 Matrix_TransformVector(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_TransformVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e111c
	struct FVector4 Matrix_TransformPosition(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_TransformPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e0df8
	struct FQuat Matrix_ToQuat(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_ToQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e0d34
	void Matrix_SetOrigin(struct FMatrix& M, struct FVector NewOrigin); // Function Engine.KismetMathLibrary.Matrix_SetOrigin // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e0c28
	void Matrix_SetColumn(struct FMatrix& M, enum class EMatrixColumns Column, struct FVector Value); // Function Engine.KismetMathLibrary.Matrix_SetColumn // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e0ae0
	void Matrix_SetAxis(struct FMatrix& M, enum class EAxis Axis, struct FVector AxisVector); // Function Engine.KismetMathLibrary.Matrix_SetAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e0994
	struct FMatrix Matrix_ScaleTranslation(struct FMatrix& M, struct FVector Scale3D); // Function Engine.KismetMathLibrary.Matrix_ScaleTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e081c
	struct FMatrix Matrix_RemoveTranslation(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_RemoveTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e06f0
	void Matrix_RemoveScaling(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_RemoveScaling // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92e05f4
	struct FMatrix Matrix_Mirror(struct FMatrix& M, enum class EAxis MirrorAxis, enum class EAxis FlipAxis); // Function Engine.KismetMathLibrary.Matrix_Mirror // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e0428
	struct FVector Matrix_InverseTransformVector(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_InverseTransformVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e0280
	struct FVector Matrix_InverseTransformPosition(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_InverseTransformPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e00cc
	struct FMatrix Matrix_Identity(); // Function Engine.KismetMathLibrary.Matrix_Identity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92e005c
	struct FVector Matrix_GetUnitAxis(struct FMatrix& M, enum class EAxis Axis); // Function Engine.KismetMathLibrary.Matrix_GetUnitAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dff50
	void Matrix_GetUnitAxes(struct FMatrix& M, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.Matrix_GetUnitAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dfdb4
	struct FMatrix Matrix_GetTransposed(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetTransposed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dfc64
	struct FMatrix Matrix_GetTransposeAdjoint(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dfb78
	struct FVector Matrix_GetScaleVector(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_GetScaleVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92df788
	struct FVector Matrix_GetScaledAxis(struct FMatrix& M, enum class EAxis Axis); // Function Engine.KismetMathLibrary.Matrix_GetScaledAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dfa6c
	void Matrix_GetScaledAxes(struct FMatrix& M, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.Matrix_GetScaledAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92df898
	float Matrix_GetRotDeterminant(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetRotDeterminant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92df6d0
	struct FRotator Matrix_GetRotator(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d23c4
	struct FVector Matrix_GetOrigin(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Matrix_GetOrigin // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92df618
	float Matrix_GetMaximumAxisScale(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92df560
	struct FMatrix Matrix_GetMatrixWithoutScale(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92df3d0
	struct FMatrix Matrix_GetInverse(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetInverse // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92df2e4
	bool Matrix_GetFrustumTopPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92df11c
	bool Matrix_GetFrustumRightPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92def54
	bool Matrix_GetFrustumNearPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ded8c
	bool Matrix_GetFrustumLeftPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92debc4
	bool Matrix_GetFrustumFarPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dea3c
	bool Matrix_GetFrustumBottomPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92de874
	float Matrix_GetDeterminant(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetDeterminant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92de7bc
	struct FVector Matrix_GetColumn(struct FMatrix& M, enum class EMatrixColumns Column); // Function Engine.KismetMathLibrary.Matrix_GetColumn // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92de6b4
	bool Matrix_ContainsNaN(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_ContainsNaN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92de604
	struct FMatrix Matrix_ConcatenateTranslation(struct FMatrix& M, struct FVector Translation); // Function Engine.KismetMathLibrary.Matrix_ConcatenateTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92de4a8
	struct FMatrix Matrix_ApplyScale(struct FMatrix& M, float Scale); // Function Engine.KismetMathLibrary.Matrix_ApplyScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92de358
	double MapRangeUnclamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB); // Function Engine.KismetMathLibrary.MapRangeUnclamped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92de190
	double MapRangeClamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB); // Function Engine.KismetMathLibrary.MapRangeClamped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdd090c
	struct FVector_NetQuantizeNormal MakeVector_NetQuantizeNormal(double X, double Y, double Z); // Function Engine.KismetMathLibrary.MakeVector_NetQuantizeNormal // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92de074
	struct FVector_NetQuantize100 MakeVector_NetQuantize100(double X, double Y, double Z); // Function Engine.KismetMathLibrary.MakeVector_NetQuantize100 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92de074
	struct FVector_NetQuantize10 MakeVector_NetQuantize10(double X, double Y, double Z); // Function Engine.KismetMathLibrary.MakeVector_NetQuantize10 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92de074
	struct FVector_NetQuantize MakeVector_NetQuantize(double X, double Y, double Z); // Function Engine.KismetMathLibrary.MakeVector_NetQuantize // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92de074
	struct FVector4 MakeVector4(double X, double Y, double Z, double W); // Function Engine.KismetMathLibrary.MakeVector4 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1fd432c
	struct FVector2D MakeVector2D(double X, double Y); // Function Engine.KismetMathLibrary.MakeVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1dcb2b0
	struct FVector MakeVector(double X, double Y, double Z); // Function Engine.KismetMathLibrary.MakeVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xdd03d4
	struct FTransform MakeTransform(struct FVector Location, struct FRotator Rotation, struct FVector Scale); // Function Engine.KismetMathLibrary.MakeTransform // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1fe3a50
	struct FTimespan MakeTimespan2(int32_t days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano); // Function Engine.KismetMathLibrary.MakeTimespan2 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ddd14
	struct FTimespan MakeTimespan(int32_t days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds); // Function Engine.KismetMathLibrary.MakeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ddec0
	struct FRotator MakeRotFromZY(struct FVector& Z, struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromZY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ddaac
	struct FRotator MakeRotFromZX(struct FVector& Z, struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromZX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dd990
	struct FRotator MakeRotFromZ(struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2153d6c
	struct FRotator MakeRotFromYZ(struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromYZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dd874
	struct FRotator MakeRotFromYX(struct FVector& Y, struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromYX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dd758
	struct FRotator MakeRotFromY(struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dd684
	struct FRotator MakeRotFromXZ(struct FVector& X, struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromXZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2315f94
	struct FRotator MakeRotFromXY(struct FVector& X, struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromXY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11e4684
	struct FRotator MakeRotFromX(struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1137ca8
	struct FRotator MakeRotator(float Roll, float Pitch, float Yaw); // Function Engine.KismetMathLibrary.MakeRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1dc3f38
	struct FRotator MakeRotationFromAxes(struct FVector Forward, struct FVector Right, struct FVector Up); // Function Engine.KismetMathLibrary.MakeRotationFromAxes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ddbc8
	struct FTransform MakeRelativeTransform(struct FTransform& A, struct FTransform& RelativeTo); // Function Engine.KismetMathLibrary.MakeRelativeTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dd4c0
	struct FRandomStream MakeRandomStream(int32_t InitialSeed); // Function Engine.KismetMathLibrary.MakeRandomStream // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dd438
	struct FQuat MakeQuat(float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.MakeQuat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dd2e8
	struct FQualifiedFrameTime MakeQualifiedFrameTime(struct FFrameNumber Frame, struct FFrameRate FrameRate, float SubFrame); // Function Engine.KismetMathLibrary.MakeQualifiedFrameTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dd1a8
	float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase); // Function Engine.KismetMathLibrary.MakePulsatingValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92dd080
	struct FPlane MakePlaneFromPointAndNormal(struct FVector Point, struct FVector Normal); // Function Engine.KismetMathLibrary.MakePlaneFromPointAndNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dcf84
	struct FFrameRate MakeFrameRate(int32_t Numerator, int32_t Denominator); // Function Engine.KismetMathLibrary.MakeFrameRate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92dceb8
	struct FDateTime MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond); // Function Engine.KismetMathLibrary.MakeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dccb0
	struct FLinearColor MakeColor(float R, float G, float B, float A); // Function Engine.KismetMathLibrary.MakeColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x217d290
	struct FBoxSphereBounds MakeBoxSphereBounds(struct FVector Origin, struct FVector BoxExtent, float SphereRadius); // Function Engine.KismetMathLibrary.MakeBoxSphereBounds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dcb6c
	struct FBox2D MakeBox2D(struct FVector2D min, struct FVector2D max); // Function Engine.KismetMathLibrary.MakeBox2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dc9a4
	struct FBox MakeBox(struct FVector min, struct FVector max); // Function Engine.KismetMathLibrary.MakeBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dca70
	double Loge(double A); // Function Engine.KismetMathLibrary.Loge // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92dc91c
	double log(double A, double Base); // Function Engine.KismetMathLibrary.log // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92dc848
	bool LinePlaneIntersection_OriginNormal(struct FVector& LineStart, struct FVector& LineEnd, struct FVector PlaneOrigin, struct FVector PlaneNormal, float& T, struct FVector& Intersection); // Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92db430
	bool LinePlaneIntersection(struct FVector& LineStart, struct FVector& LineEnd, struct FPlane& APlane, float& T, struct FVector& Intersection); // Function Engine.KismetMathLibrary.LinePlaneIntersection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92db24c
	struct FLinearColor LinearColorLerpUsingHSV(struct FLinearColor A, struct FLinearColor B, float Alpha); // Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92db660
	struct FLinearColor LinearColorLerp(struct FLinearColor A, struct FLinearColor B, float Alpha); // Function Engine.KismetMathLibrary.LinearColorLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x20c795c
	struct FLinearColor LinearColor_Yellow(); // Function Engine.KismetMathLibrary.LinearColor_Yellow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dc82c
	struct FLinearColor LinearColor_White(); // Function Engine.KismetMathLibrary.LinearColor_White // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x25ee0c0
	struct FLinearColor LinearColor_Transparent(); // Function Engine.KismetMathLibrary.LinearColor_Transparent // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dc810
	struct FColor LinearColor_ToRGBE(struct FLinearColor InLinearColor); // Function Engine.KismetMathLibrary.LinearColor_ToRGBE // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dc780
	struct FLinearColor LinearColor_ToNewOpacity(struct FLinearColor InColor, float InOpacity); // Function Engine.KismetMathLibrary.LinearColor_ToNewOpacity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dc6a4
	void LinearColor_SetTemperature(struct FLinearColor& InOutColor, float InTemperature); // Function Engine.KismetMathLibrary.LinearColor_SetTemperature // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92dc5cc
	void LinearColor_SetRGBA(struct FLinearColor& InOutColor, float R, float G, float B, float A); // Function Engine.KismetMathLibrary.LinearColor_SetRGBA // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92dc3b8
	void LinearColor_SetRandomHue(struct FLinearColor& InOutColor); // Function Engine.KismetMathLibrary.LinearColor_SetRandomHue // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92dc540
	void LinearColor_SetFromSRGB(struct FLinearColor& InOutColor, struct FColor& InSRGB); // Function Engine.KismetMathLibrary.LinearColor_SetFromSRGB // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92dc2ac
	void LinearColor_SetFromPow22(struct FLinearColor& InOutColor, struct FColor& InColor); // Function Engine.KismetMathLibrary.LinearColor_SetFromPow22 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92dc1a0
	void LinearColor_SetFromHSV(struct FLinearColor& InOutColor, float H, float S, float V, float A); // Function Engine.KismetMathLibrary.LinearColor_SetFromHSV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92dc000
	void LinearColor_Set(struct FLinearColor& InOutColor, struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92dbf20
	struct FLinearColor LinearColor_Red(); // Function Engine.KismetMathLibrary.LinearColor_Red // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dbf04
	struct FColor LinearColor_QuantizeRound(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_QuantizeRound // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dbdfc
	struct FColor LinearColor_Quantize(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_Quantize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dbd0c
	bool LinearColor_IsNearEqual(struct FLinearColor A, struct FLinearColor B, float Tolerance); // Function Engine.KismetMathLibrary.LinearColor_IsNearEqual // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dbbb4
	struct FLinearColor LinearColor_Green(); // Function Engine.KismetMathLibrary.LinearColor_Green // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dbb98
	struct FLinearColor LinearColor_Gray(); // Function Engine.KismetMathLibrary.LinearColor_Gray // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dbb7c
	float LinearColor_GetMin(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dbae4
	float LinearColor_GetMax(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dba4c
	float LinearColor_GetLuminance(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetLuminance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92db9a8
	float LinearColor_Distance(struct FLinearColor C1, struct FLinearColor C2); // Function Engine.KismetMathLibrary.LinearColor_Distance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92db898
	struct FLinearColor LinearColor_Desaturated(struct FLinearColor InColor, float InDesaturation); // Function Engine.KismetMathLibrary.LinearColor_Desaturated // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92db7bc
	struct FLinearColor LinearColor_Blue(); // Function Engine.KismetMathLibrary.LinearColor_Blue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92db7a0
	struct FLinearColor LinearColor_Black(); // Function Engine.KismetMathLibrary.LinearColor_Black // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92db784
	struct FVector LessLess_VectorRotator(struct FVector A, struct FRotator B); // Function Engine.KismetMathLibrary.LessLess_VectorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92db08c
	bool LessEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dafcc
	bool LessEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.LessEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e3e2e8
	bool LessEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.LessEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5f51cc4
	bool LessEqual_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.LessEqual_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdd07d4
	bool LessEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dafcc
	bool LessEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.LessEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92daf0c
	bool Less_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Less_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92db18c
	bool Less_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Less_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdcf464
	bool Less_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Less_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5f51c04
	bool Less_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.Less_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f22a3c
	bool Less_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Less_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92db18c
	bool Less_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Less_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e7ce5c
	double Lerp(double A, double B, double Alpha); // Function Engine.KismetMathLibrary.Lerp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f70b0c
	bool IsZero2D(struct FVector2D& A); // Function Engine.KismetMathLibrary.IsZero2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dae74
	bool IsPointInBoxWithTransform(struct FVector Point, struct FTransform& BoxWorldTransform, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.IsPointInBoxWithTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dacd4
	bool IsPointInBox(struct FVector Point, struct FVector BoxOrigin, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.IsPointInBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92dab98
	bool IsNearlyZero2D(struct FVector2D& A, float Tolerance); // Function Engine.KismetMathLibrary.IsNearlyZero2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92daa98
	bool IsMorning(struct FDateTime A); // Function Engine.KismetMathLibrary.IsMorning // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92da9e0
	bool IsLeapYear(int32_t Year); // Function Engine.KismetMathLibrary.IsLeapYear // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92da964
	bool IsAfternoon(struct FDateTime A); // Function Engine.KismetMathLibrary.IsAfternoon // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92da8ac
	struct FTransform InvertTransform(struct FTransform& T); // Function Engine.KismetMathLibrary.InvertTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92da550
	struct FRotator InverseTransformRotation(struct FTransform& T, struct FRotator Rotation); // Function Engine.KismetMathLibrary.InverseTransformRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x240a82c
	struct FVector InverseTransformLocation(struct FTransform& T, struct FVector Location); // Function Engine.KismetMathLibrary.InverseTransformLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92da238
	struct FVector InverseTransformDirection(struct FTransform& T, struct FVector Direction); // Function Engine.KismetMathLibrary.InverseTransformDirection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d9fdc
	struct FIntPoint IntPoint_Zero(); // Function Engine.KismetMathLibrary.IntPoint_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92bcc58
	struct FIntPoint IntPoint_Up(); // Function Engine.KismetMathLibrary.IntPoint_Up // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d9fc4
	struct FIntPoint IntPoint_Right(); // Function Engine.KismetMathLibrary.IntPoint_Right // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d9fa8
	struct FIntPoint IntPoint_One(); // Function Engine.KismetMathLibrary.IntPoint_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d9f8c
	struct FIntPoint IntPoint_Left(); // Function Engine.KismetMathLibrary.IntPoint_Left // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d9f74
	struct FIntPoint IntPoint_Down(); // Function Engine.KismetMathLibrary.IntPoint_Down // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d9f58
	bool InRange_IntInt(int32_t Value, int32_t min, int32_t max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d9dc8
	bool InRange_Int64Int64(int64_t Value, int64_t min, int64_t max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d9c30
	bool InRange_FloatFloat(double Value, double min, double max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2348320
	double Hypotenuse(double Width, double Height); // Function Engine.KismetMathLibrary.Hypotenuse // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d9b5c
	struct FLinearColor HSVToRGBLinear(struct FLinearColor HSV); // Function Engine.KismetMathLibrary.HSVToRGBLinear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d99fc
	void HSVToRGB_Vector(struct FLinearColor HSV, struct FLinearColor& RGB); // Function Engine.KismetMathLibrary.HSVToRGB_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d9a8c
	struct FLinearColor HSVToRGB(float H, float S, float V, float A); // Function Engine.KismetMathLibrary.HSVToRGB // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x24a7f78
	double GridSnap_Float(double Location, double GridSize); // Function Engine.KismetMathLibrary.GridSnap_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d98d0
	struct FVector GreaterGreater_VectorRotator(struct FVector A, struct FRotator B); // Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x231a014
	bool GreaterEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d9690
	bool GreaterEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.GreaterEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1de2708
	bool GreaterEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.GreaterEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5f51b44
	bool GreaterEqual_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.GreaterEqual_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdd04a4
	bool GreaterEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d9690
	bool GreaterEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.GreaterEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x24c1e28
	bool Greater_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Greater_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d9810
	bool Greater_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Greater_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdcf3a8
	bool Greater_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Greater_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5f51a84
	bool Greater_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.Greater_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdd0870
	bool Greater_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Greater_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d9810
	bool Greater_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Greater_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d9750
	int32_t GetYear(struct FDateTime A); // Function Engine.KismetMathLibrary.GetYear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d9604
	void GetYawPitchFromVector(struct FVector InVec, float& Yaw, float& Pitch); // Function Engine.KismetMathLibrary.GetYawPitchFromVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d94e8
	struct FVector GetVectorArrayAverage(struct TArray<struct FVector>& Vectors); // Function Engine.KismetMathLibrary.GetVectorArrayAverage // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d9024
	struct FVector GetUpVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetUpVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8f78
	float GetTotalSeconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1dbc5a4
	float GetTotalMinutes(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8eec
	float GetTotalMilliseconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8e60
	float GetTotalHours(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8dd4
	float GetTotalDays(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8d48
	struct FTimespan GetTimeOfDay(struct FDateTime A); // Function Engine.KismetMathLibrary.GetTimeOfDay // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8cbc
	double GetTAU(); // Function Engine.KismetMathLibrary.GetTAU // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d8ca0
	void GetSlopeDegreeAngles(struct FVector& MyRightYAxis, struct FVector& FloorNormal, struct FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // Function Engine.KismetMathLibrary.GetSlopeDegreeAngles // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8ad0
	int32_t GetSeconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8a10
	int32_t GetSecond(struct FDateTime A); // Function Engine.KismetMathLibrary.GetSecond // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8a10
	struct FVector2D GetRotated2D(struct FVector2D A, float AngleDeg); // Function Engine.KismetMathLibrary.GetRotated2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d890c
	struct FVector GetRightVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetRightVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2172c4c
	struct FVector GetReflectionVector(struct FVector Direction, struct FVector SurfaceNormal); // Function Engine.KismetMathLibrary.GetReflectionVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d880c
	float GetPointDistanceToSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd); // Function Engine.KismetMathLibrary.GetPointDistanceToSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d86d0
	float GetPointDistanceToLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection); // Function Engine.KismetMathLibrary.GetPointDistanceToLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8594
	double GetPI(); // Function Engine.KismetMathLibrary.GetPI // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d8578
	int32_t GetMonth(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMonth // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d84ec
	int32_t GetMinutes(struct FTimespan A); // Function Engine.KismetMathLibrary.GetMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8430
	int32_t GetMinute(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMinute // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8430
	double GetMinElement(struct FVector A); // Function Engine.KismetMathLibrary.GetMinElement // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d83ac
	double GetMin2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetMin2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d832c
	int32_t GetMilliseconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8270
	int32_t GetMillisecond(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMillisecond // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d81b4
	double GetMaxElement(struct FVector A); // Function Engine.KismetMathLibrary.GetMaxElement // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d8130
	double GetMax2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d80b0
	int32_t GetHours(struct FTimespan A); // Function Engine.KismetMathLibrary.GetHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7ffc
	int32_t GetHour12(struct FDateTime A); // Function Engine.KismetMathLibrary.GetHour12 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7f74
	int32_t GetHour(struct FDateTime A); // Function Engine.KismetMathLibrary.GetHour // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7ffc
	struct FVector GetForwardVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetForwardVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7ecc
	struct FTimespan GetDuration(struct FTimespan A); // Function Engine.KismetMathLibrary.GetDuration // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7e50
	struct FVector GetDirectionUnitVector(struct FVector From, struct FVector To); // Function Engine.KismetMathLibrary.GetDirectionUnitVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x24afcc8
	int32_t GetDays(struct FTimespan A); // Function Engine.KismetMathLibrary.GetDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7dc8
	int32_t GetDayOfYear(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDayOfYear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7d40
	int32_t GetDay(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDay // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7cb4
	struct FDateTime GetDate(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDate // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7c24
	void GetAzimuthAndElevation(struct FVector InDirection, struct FTransform& ReferenceFrame, float& Azimuth, float& Elevation); // Function Engine.KismetMathLibrary.GetAzimuthAndElevation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7a48
	void GetAxes(struct FRotator A, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.GetAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x21a2a64
	double GetAbsMax2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetAbsMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d79b8
	struct FVector2D GetAbs2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetAbs2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d793c
	double FWrap(double Value, double min, double max); // Function Engine.KismetMathLibrary.FWrap // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d6950
	struct FIntVector FTruncVector(struct FVector& InVector); // Function Engine.KismetMathLibrary.FTruncVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d68b8
	int64_t FTrunc64(double A); // Function Engine.KismetMathLibrary.FTrunc64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d1c4c
	int32_t FTrunc(double A); // Function Engine.KismetMathLibrary.FTrunc // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20c957c
	struct FTimespan FromSeconds(float Seconds); // Function Engine.KismetMathLibrary.FromSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d78b0
	struct FTimespan FromMinutes(float Minutes); // Function Engine.KismetMathLibrary.FromMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7824
	struct FTimespan FromMilliseconds(float Milliseconds); // Function Engine.KismetMathLibrary.FromMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7798
	struct FTimespan FromHours(float Hours); // Function Engine.KismetMathLibrary.FromHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d770c
	struct FTimespan FromDays(float days); // Function Engine.KismetMathLibrary.FromDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7680
	double Fraction(double A); // Function Engine.KismetMathLibrary.Fraction // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x227f7f8
	int64_t FMod64(double Dividend, double Divisor, double& Remainder); // Function Engine.KismetMathLibrary.FMod64 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92d6688
	int32_t FMod(double Dividend, double Divisor, double& Remainder); // Function Engine.KismetMathLibrary.FMod // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92d67a0
	double FMin(double A, double B); // Function Engine.KismetMathLibrary.FMin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d65b8
	double FMax(double A, double B); // Function Engine.KismetMathLibrary.FMax // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ef6f84
	float FloatSpringInterp(float Current, float Target, struct FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, float MinValue, float MaxValue, bool bInitializeFromTarget); // Function Engine.KismetMathLibrary.FloatSpringInterp // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92d72ec
	float FixedTurn(float InCurrent, float InDesired, float InDeltaRate); // Function Engine.KismetMathLibrary.FixedTurn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d71f0
	double FInterpTo_Constant(double Current, double Target, double DeltaTime, double InterpSpeed); // Function Engine.KismetMathLibrary.FInterpTo_Constant // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d6468
	double FInterpTo(double Current, double Target, double DeltaTime, double InterpSpeed); // Function Engine.KismetMathLibrary.FInterpTo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e65e8c
	double FInterpEaseInOut(double A, double B, double Alpha, double Exponent); // Function Engine.KismetMathLibrary.FInterpEaseInOut // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d62bc
	struct FRotator FindRelativeLookAtRotation(struct FTransform& StartTransform, struct FVector& TargetLocation); // Function Engine.KismetMathLibrary.FindRelativeLookAtRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d7098
	void FindNearestPointsOnLineSegments(struct FVector Segment1Start, struct FVector Segment1End, struct FVector Segment2Start, struct FVector Segment2End, struct FVector& Segment1Point, struct FVector& Segment2Point); // Function Engine.KismetMathLibrary.FindNearestPointsOnLineSegments // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d6e6c
	struct FRotator FindLookAtRotation(struct FVector& Start, struct FVector& Target); // Function Engine.KismetMathLibrary.FindLookAtRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d6d18
	struct FVector FindClosestPointOnSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd); // Function Engine.KismetMathLibrary.FindClosestPointOnSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d6bcc
	struct FVector FindClosestPointOnLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection); // Function Engine.KismetMathLibrary.FindClosestPointOnLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d6a80
	int64_t FFloor64(double A); // Function Engine.KismetMathLibrary.FFloor64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d61fc
	int32_t FFloor(double A); // Function Engine.KismetMathLibrary.FFloor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x23c40ec
	double FClamp(double Value, double min, double max); // Function Engine.KismetMathLibrary.FClamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20a7588
	int64_t FCeil64(double A); // Function Engine.KismetMathLibrary.FCeil64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d6138
	int32_t FCeil(double A); // Function Engine.KismetMathLibrary.FCeil // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x25e37bc
	double exp(double A); // Function Engine.KismetMathLibrary.exp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d60b0
	bool EqualExactly_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.EqualExactly_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d5f08
	bool EqualExactly_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.EqualExactly_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d5dd4
	bool EqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d5d08
	bool EqualEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2503728
	bool EqualEqual_Vector4Vector4(struct FVector4& A, struct FVector4& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d5b64
	bool EqualEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d5a34
	bool EqualEqual_TransformTransform(struct FTransform& A, struct FTransform& B); // Function Engine.KismetMathLibrary.EqualEqual_TransformTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d5894
	bool EqualEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d5188
	bool EqualEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d564c
	bool EqualEqual_QuatQuat(struct FQuat& A, struct FQuat& B, float Tolerance); // Function Engine.KismetMathLibrary.EqualEqual_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d5494
	bool EqualEqual_ObjectObject(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.EqualEqual_ObjectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xfca328
	bool EqualEqual_NameName(struct FName A, struct FName B); // Function Engine.KismetMathLibrary.EqualEqual_NameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c6af0c
	bool EqualEqual_MatrixMatrix(struct FMatrix& A, struct FMatrix& B, float Tolerance); // Function Engine.KismetMathLibrary.EqualEqual_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d5338
	bool EqualEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d5248
	bool EqualEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.EqualEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e42020
	bool EqualEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.EqualEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x17229d0
	bool EqualEqual_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.EqualEqual_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f621a0
	bool EqualEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d5188
	bool EqualEqual_ClassClass(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.EqualEqual_ClassClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xfca328
	bool EqualEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.EqualEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdd01ac
	bool EqualEqual_BoolBool(bool A, bool B); // Function Engine.KismetMathLibrary.EqualEqual_BoolBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ef7c80
	bool Equal_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Equal_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d5fe4
	double Ease(double A, double B, double Alpha, enum class EEasingFunc EasingFunc, double BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.Ease // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d4fb0
	struct FVector DynamicWeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d4c74
	struct FRotator DynamicWeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d4ab8
	float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d4e30
	double DotProduct2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.DotProduct2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d49f0
	double Dot_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Dot_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x25ec4ec
	struct FVector Divide_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Divide_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d48c0
	struct FVector Divide_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Divide_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d47a8
	struct FVector Divide_VectorFloat(struct FVector A, double B); // Function Engine.KismetMathLibrary.Divide_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d4680
	struct FVector4 Divide_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Divide_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d454c
	struct FVector2D Divide_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Divide_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d4448
	struct FVector2D Divide_Vector2DFloat(struct FVector2D A, double B); // Function Engine.KismetMathLibrary.Divide_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1e88220
	struct FTimespan Divide_TimespanFloat(struct FTimespan A, float Scalar); // Function Engine.KismetMathLibrary.Divide_TimespanFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d4374
	struct FLinearColor Divide_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Divide_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d4274
	struct FIntPoint Divide_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Divide_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d417c
	struct FIntPoint Divide_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Divide_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d4090
	int32_t Divide_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Divide_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2153c6c
	int64_t Divide_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Divide_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d3fb4
	double Divide_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.Divide_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f28358
	char Divide_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Divide_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d3ed4
	double DistanceSquared2D(struct FVector2D v1, struct FVector2D v2); // Function Engine.KismetMathLibrary.DistanceSquared2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d3e04
	double Distance2D(struct FVector2D v1, struct FVector2D v2); // Function Engine.KismetMathLibrary.Distance2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d3d30
	double DegTan(double A); // Function Engine.KismetMathLibrary.DegTan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x270b5e0
	double DegSin(double A); // Function Engine.KismetMathLibrary.DegSin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d3c18
	double DegreesToRadians(double A); // Function Engine.KismetMathLibrary.DegreesToRadians // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d3ca8
	double DegCos(double A); // Function Engine.KismetMathLibrary.DegCos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d3b88
	double DegAtan2(double Y, double X); // Function Engine.KismetMathLibrary.DegAtan2 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d3a1c
	double DegAtan(double A); // Function Engine.KismetMathLibrary.DegAtan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d3af8
	double DegAsin(double A); // Function Engine.KismetMathLibrary.DegAsin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d3970
	double DegAcos(double A); // Function Engine.KismetMathLibrary.DegAcos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x26dc9e8
	int32_t DaysInYear(int32_t Year); // Function Engine.KismetMathLibrary.DaysInYear // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d38e8
	int32_t DaysInMonth(int32_t Year, int32_t Month); // Function Engine.KismetMathLibrary.DaysInMonth // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d37f0
	struct FDateTime DateTimeMinValue(); // Function Engine.KismetMathLibrary.DateTimeMinValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5d0c950
	struct FDateTime DateTimeMaxValue(); // Function Engine.KismetMathLibrary.DateTimeMaxValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d37d4
	bool DateTimeFromString(struct FString DateTimeString, struct FDateTime& Result); // Function Engine.KismetMathLibrary.DateTimeFromString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d353c
	bool DateTimeFromIsoString(struct FString IsoString, struct FDateTime& Result); // Function Engine.KismetMathLibrary.DateTimeFromIsoString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d3368
	double CrossProduct2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.CrossProduct2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d31a0
	struct FVector Cross_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Cross_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d3268
	struct FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length); // Function Engine.KismetMathLibrary.CreateVectorFromYawPitch // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d3094
	double cos(double A); // Function Engine.KismetMathLibrary.cos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d300c
	struct FTransform ConvertTransformToRelative(struct FTransform& Transform, struct FTransform& ParentTransform); // Function Engine.KismetMathLibrary.ConvertTransformToRelative // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d2e48
	struct FVector2D Conv_VectorToVector2D(struct FVector InVector); // Function Engine.KismetMathLibrary.Conv_VectorToVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x252935c
	struct FTransform Conv_VectorToTransform(struct FVector InLocation); // Function Engine.KismetMathLibrary.Conv_VectorToTransform // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x29d4370
	struct FRotator Conv_VectorToRotator(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2432f60
	struct FQuat Conv_VectorToQuaternion(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToQuaternion // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d2da4
	struct FLinearColor Conv_VectorToLinearColor(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x262a4fc
	struct FVector Conv_Vector4ToVector(struct FVector4& InVector4); // Function Engine.KismetMathLibrary.Conv_Vector4ToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d2d04
	struct FRotator Conv_Vector4ToRotator(struct FVector4& InVec); // Function Engine.KismetMathLibrary.Conv_Vector4ToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d2bf8
	struct FQuat Conv_Vector4ToQuaternion(struct FVector4& InVec); // Function Engine.KismetMathLibrary.Conv_Vector4ToQuaternion // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d2b4c
	struct FVector Conv_Vector2DToVector(struct FVector2D InVector2D, float Z); // Function Engine.KismetMathLibrary.Conv_Vector2DToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d2a78
	struct FIntPoint Conv_Vector2DToIntPoint(struct FVector2D InVector2D); // Function Engine.KismetMathLibrary.Conv_Vector2DToIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d29c8
	struct FMatrix Conv_TransformToMatrix(struct FTransform& Transform); // Function Engine.KismetMathLibrary.Conv_TransformToMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d26fc
	struct FVector Conv_RotatorToVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.Conv_RotatorToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x284d204
	struct FTransform Conv_RotatorToTransform(struct FRotator& InRotator); // Function Engine.KismetMathLibrary.Conv_RotatorToTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d2628
	struct FQuat Conv_RotatorToQuaternion(struct FRotator InRot); // Function Engine.KismetMathLibrary.Conv_RotatorToQuaternion // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d257c
	struct FTransform Conv_MatrixToTransform(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Conv_MatrixToTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d248c
	struct FRotator Conv_MatrixToRotator(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Conv_MatrixToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d23c4
	struct FVector Conv_LinearColorToVector(struct FLinearColor InLinearColor); // Function Engine.KismetMathLibrary.Conv_LinearColorToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x235d404
	struct FColor Conv_LinearColorToColor(struct FLinearColor InLinearColor, bool InUseSRGB); // Function Engine.KismetMathLibrary.Conv_LinearColorToColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d21d0
	struct FVector Conv_IntVectorToVector(struct FIntVector& InIntVector); // Function Engine.KismetMathLibrary.Conv_IntVectorToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d2114
	struct FVector Conv_IntToVector(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d2088
	struct FIntVector Conv_IntToIntVector(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToIntVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d2008
	int64_t Conv_IntToInt64(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20bb770
	float Conv_IntToFloat(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f9fa2c
	double Conv_IntToDouble(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fe3d00
	char Conv_IntToByte(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x22b8a34
	bool Conv_IntToBool(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x22bbb08
	struct FVector2D Conv_IntPointToVector2D(struct FIntPoint InIntPoint); // Function Engine.KismetMathLibrary.Conv_IntPointToVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d1f74
	int32_t Conv_Int64ToInt(int64_t inInt); // Function Engine.KismetMathLibrary.Conv_Int64ToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5f522e4
	double Conv_Int64ToDouble(int64_t inInt); // Function Engine.KismetMathLibrary.Conv_Int64ToDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d1ef4
	char Conv_Int64ToByte(int64_t inInt); // Function Engine.KismetMathLibrary.Conv_Int64ToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d1e7c
	struct FVector Conv_FloatToVector(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2116a40
	struct FLinearColor Conv_FloatToLinearColor(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d1de8
	double Conv_FloatToDouble(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d1d64
	struct FVector Conv_DoubleToVector(double InDouble); // Function Engine.KismetMathLibrary.Conv_DoubleToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2878344
	struct FLinearColor Conv_DoubleToLinearColor(double InDouble); // Function Engine.KismetMathLibrary.Conv_DoubleToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d1ccc
	int64_t Conv_DoubleToInt64(double InDouble); // Function Engine.KismetMathLibrary.Conv_DoubleToInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d1c4c
	float Conv_DoubleToFloat(double InDouble); // Function Engine.KismetMathLibrary.Conv_DoubleToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d1bc8
	struct FLinearColor Conv_ColorToLinearColor(struct FColor InColor); // Function Engine.KismetMathLibrary.Conv_ColorToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2214504
	int64_t Conv_ByteToInt64(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d1b4c
	int32_t Conv_ByteToInt(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x212370c
	float Conv_ByteToFloat(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d1ac8
	double Conv_ByteToDouble(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d1a44
	int32_t Conv_BoolToInt(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x22d22e4
	float Conv_BoolToFloat(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2200268
	char Conv_BoolToByte(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d19c8
	struct FTransform ComposeTransforms(struct FTransform& A, struct FTransform& B); // Function Engine.KismetMathLibrary.ComposeTransforms // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d1048
	struct FRotator ComposeRotators(struct FRotator A, struct FRotator B); // Function Engine.KismetMathLibrary.ComposeRotators // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x16bb118
	bool ClassIsChildOf(struct UObject* TestClass, struct UObject* ParentClass); // Function Engine.KismetMathLibrary.ClassIsChildOf // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d0f84
	struct FVector ClampVectorSize(struct FVector A, double min, double max); // Function Engine.KismetMathLibrary.ClampVectorSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d0dc8
	int64_t ClampInt64(int64_t Value, int64_t min, int64_t max); // Function Engine.KismetMathLibrary.ClampInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d0cc8
	float ClampAxis(float Angle); // Function Engine.KismetMathLibrary.ClampAxis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d0c20
	struct FVector2D ClampAxes2D(struct FVector2D A, double MinAxisVal, double MaxAxisVal); // Function Engine.KismetMathLibrary.ClampAxes2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d0af8
	double ClampAngle(double AngleDegrees, double MinAngleDegrees, double MaxAngleDegrees); // Function Engine.KismetMathLibrary.ClampAngle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x24a7440
	int32_t clamp(int32_t Value, int32_t min, int32_t max); // Function Engine.KismetMathLibrary.clamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2213f24
	struct FLinearColor CInterpTo(struct FLinearColor Current, struct FLinearColor Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.CInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1f49b10
	void BreakVector_NetQuantizeNormal(struct FVector_NetQuantizeNormal InVec, double& X, double& Y, double& Z); // Function Engine.KismetMathLibrary.BreakVector_NetQuantizeNormal // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92d096c
	void BreakVector_NetQuantize100(struct FVector_NetQuantize100 InVec, double& X, double& Y, double& Z); // Function Engine.KismetMathLibrary.BreakVector_NetQuantize100 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92d096c
	void BreakVector_NetQuantize10(struct FVector_NetQuantize10 InVec, double& X, double& Y, double& Z); // Function Engine.KismetMathLibrary.BreakVector_NetQuantize10 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92d096c
	void BreakVector_NetQuantize(struct FVector_NetQuantize InVec, double& X, double& Y, double& Z); // Function Engine.KismetMathLibrary.BreakVector_NetQuantize // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92d096c
	void BreakVector4(struct FVector4& InVec, double& X, double& Y, double& Z, double& W); // Function Engine.KismetMathLibrary.BreakVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x268aff0
	void BreakVector3f(struct FVector3f InVec, float& X, float& Y, float& Z); // Function Engine.KismetMathLibrary.BreakVector3f // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d07ec
	void BreakVector2D(struct FVector2D InVec, double& X, double& Y); // Function Engine.KismetMathLibrary.BreakVector2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1c95508
	void BreakVector(struct FVector InVec, double& X, double& Y, double& Z); // Function Engine.KismetMathLibrary.BreakVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d0f524
	void BreakTransform(struct FTransform& InTransform, struct FVector& Location, struct FRotator& Rotation, struct FVector& Scale); // Function Engine.KismetMathLibrary.BreakTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xfcd05c
	void BreakTimespan2(struct FTimespan InTimespan, int32_t& days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano); // Function Engine.KismetMathLibrary.BreakTimespan2 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d03c4
	void BreakTimespan(struct FTimespan InTimespan, int32_t& days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& Milliseconds); // Function Engine.KismetMathLibrary.BreakTimespan // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d05d8
	void BreakRotIntoAxes(struct FRotator& InRot, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.BreakRotIntoAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d0248
	void BreakRotator(struct FRotator InRot, float& Roll, float& Pitch, float& Yaw); // Function Engine.KismetMathLibrary.BreakRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1b74ecc
	void BreakRandomStream(struct FRandomStream& InRandomStream, int32_t& InitialSeed); // Function Engine.KismetMathLibrary.BreakRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92d0174
	void BreakQuat(struct FQuat& InQuat, float& X, float& Y, float& Z, float& W); // Function Engine.KismetMathLibrary.BreakQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cff84
	void BreakQualifiedFrameTime(struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber& Frame, struct FFrameRate& FrameRate, float& SubFrame); // Function Engine.KismetMathLibrary.BreakQualifiedFrameTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cfdf8
	void BreakFrameRate(struct FFrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator); // Function Engine.KismetMathLibrary.BreakFrameRate // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cfcc8
	void BreakDateTime(struct FDateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond); // Function Engine.KismetMathLibrary.BreakDateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x24faa14
	void BreakColor(struct FLinearColor InColor, float& R, float& G, float& B, float& A); // Function Engine.KismetMathLibrary.BreakColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2307b18
	void BreakBoxSphereBounds(struct FBoxSphereBounds& InBoxSphereBounds, struct FVector& Origin, struct FVector& BoxExtent, float& SphereRadius); // Function Engine.KismetMathLibrary.BreakBoxSphereBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cfb20
	bool BooleanXOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanXOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92cfa60
	bool BooleanOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1bd5734
	bool BooleanNOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanNOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27e7cd4
	bool BooleanNAND(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanNAND // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92cf994
	bool BooleanAND(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanAND // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xd65d94
	char BMin(char A, char B); // Function Engine.KismetMathLibrary.BMin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92cf8cc
	char BMax(char A, char B); // Function Engine.KismetMathLibrary.BMax // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92cf804
	void AverageOfIntArray(struct TArray<int32_t>& IntArray, float& AverageValue); // Function Engine.KismetMathLibrary.AverageOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92cf714
	double Atan2(double Y, double X); // Function Engine.KismetMathLibrary.Atan2 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92cf5b8
	double atan(double A); // Function Engine.KismetMathLibrary.atan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92cf68c
	double asin(double A); // Function Engine.KismetMathLibrary.asin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92cf514
	int32_t And_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.And_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92cf458
	int64_t And_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.And_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92cf398
	struct FVector Add_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Add_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d63c90
	struct FVector Add_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Add_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cf2c0
	struct FVector Add_VectorFloat(struct FVector A, double B); // Function Engine.KismetMathLibrary.Add_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cf1e8
	struct FVector4 Add_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Add_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cf0b4
	struct FVector2D Add_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Add_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cefec
	struct FVector2D Add_Vector2DFloat(struct FVector2D A, double B); // Function Engine.KismetMathLibrary.Add_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cef18
	struct FTimespan Add_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Add_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ce860
	struct FQuat Add_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Add_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cee38
	struct FMatrix Add_MatrixMatrix(struct FMatrix& A, struct FMatrix& B); // Function Engine.KismetMathLibrary.Add_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92cec88
	struct FLinearColor Add_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Add_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ceb88
	struct FIntPoint Add_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Add_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ceab4
	struct FIntPoint Add_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Add_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ce9e0
	int32_t Add_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Add_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdcf90c
	int64_t Add_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Add_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92ce920
	double Add_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.Add_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1de10e0
	struct FDateTime Add_DateTimeTimespan(struct FDateTime A, struct FTimespan B); // Function Engine.KismetMathLibrary.Add_DateTimeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ce860
	struct FDateTime Add_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Add_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ce860
	char Add_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Add_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92ce7a4
	double acos(double A); // Function Engine.KismetMathLibrary.acos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92ce700
	int64_t Abs_Int64(int64_t A); // Function Engine.KismetMathLibrary.Abs_Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92ce600
	int32_t Abs_Int(int32_t A); // Function Engine.KismetMathLibrary.Abs_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92ce684
	double abs(double A); // Function Engine.KismetMathLibrary.abs // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e90d2c
};

// Class Engine.KismetNodeHelperLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetNodeHelperLibrary : UBlueprintFunctionLibrary {

	void MarkBit(int32_t& Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.MarkBit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92f7e08
	bool HasUnmarkedBit(int32_t Data, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92f7080
	bool HasMarkedBit(int32_t Data, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.HasMarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92f6fa4
	char GetValidValue(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetValidValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x223d2a4
	int32_t GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom); // Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92f6e64
	int32_t GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92f6b8c
	int32_t GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92f6a98
	char GetEnumeratorValueFromIndex(struct UEnum* Enum, char EnumeratorIndex); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x23ad828
	struct FString GetEnumeratorUserFriendlyName(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x22fc158
	struct FName GetEnumeratorName(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f69d4
	void ClearBit(int32_t& Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.ClearBit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92f378c
	void ClearAllBits(int32_t& Data); // Function Engine.KismetNodeHelperLibrary.ClearAllBits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92f3718
	bool BitIsMarked(int32_t Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.BitIsMarked // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92f0b48
};

// Class Engine.KismetRenderingLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetRenderingLibrary : UBlueprintFunctionLibrary {

	void SetCastInsetShadowForAllAttachments(struct UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup); // Function Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x92fa410
	void ResizeRenderTarget2D(struct UTextureRenderTarget2D* TextureRenderTarget, int32_t Width, int32_t Height); // Function Engine.KismetRenderingLibrary.ResizeRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x92f9b20
	struct UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(struct UTextureRenderTarget2D* RenderTarget, struct FString Name, enum class TextureCompressionSettings CompressionSettings, enum class TextureMipGenSettings MipSettings); // Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x92f9540
	void ReleaseRenderTarget2D(struct UTextureRenderTarget2D* TextureRenderTarget); // Function Engine.KismetRenderingLibrary.ReleaseRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x2abf9b8
	struct FColor ReadRenderTargetUV(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // Function Engine.KismetRenderingLibrary.ReadRenderTargetUV // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x92f9398
	struct TArray<struct FLinearColor> ReadRenderTargetRawUVArea(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FBox2D Area, bool bNormalize); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUVArea // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x92f9170
	struct FLinearColor ReadRenderTargetRawUV(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, float U, float V, bool bNormalize); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUV // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x92f8f7c
	struct TArray<struct FLinearColor> ReadRenderTargetRawPixelArea(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t MinX, int32_t MinY, int32_t MaxX, int32_t MaxY, bool bNormalize); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixelArea // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x92f8d64
	struct FLinearColor ReadRenderTargetRawPixel(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y, bool bNormalize); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x92f8be0
	bool ReadRenderTargetRaw(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct TArray<struct FLinearColor>& OutLinearSamples, bool bNormalize); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRaw // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92f8760
	struct FColor ReadRenderTargetPixel(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // Function Engine.KismetRenderingLibrary.ReadRenderTargetPixel // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x92f8624
	bool ReadRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct TArray<struct FColor>& OutSamples, bool bNormalize); // Function Engine.KismetRenderingLibrary.ReadRenderTarget // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92f817c
	struct FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32_t Bone0, char Weight0, int32_t Bone1, char Weight1, int32_t Bone2, char Weight2, int32_t Bone3, char Weight3); // Function Engine.KismetRenderingLibrary.MakeSkinWeightInfo // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f7b98
	struct UTexture2D* ImportFileAsTexture2D(struct UObject* WorldContextObject, struct FString Filename); // Function Engine.KismetRenderingLibrary.ImportFileAsTexture2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x92f7220
	struct UTexture2D* ImportBufferAsTexture2D(struct UObject* WorldContextObject, struct TArray<char>& Buffer); // Function Engine.KismetRenderingLibrary.ImportBufferAsTexture2D // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92f7140
	void ExportTexture2D(struct UObject* WorldContextObject, struct UTexture2D* Texture, struct FString FilePath, struct FString Filename); // Function Engine.KismetRenderingLibrary.ExportTexture2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x92f5fa4
	void ExportRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FString FilePath, struct FString Filename); // Function Engine.KismetRenderingLibrary.ExportRenderTarget // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x92f5ccc
	void EndDrawCanvasToRenderTarget(struct UObject* WorldContextObject, struct FDrawToRenderTargetContext& Context); // Function Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92f5968
	void DrawMaterialToRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct UMaterialInterface* Material); // Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0xfcad7c
	struct UTextureRenderTargetVolume* CreateRenderTargetVolume(struct UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Depth, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps); // Function Engine.KismetRenderingLibrary.CreateRenderTargetVolume // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x92f54cc
	struct UTextureRenderTarget2DArray* CreateRenderTarget2DArray(struct UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Slices, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps); // Function Engine.KismetRenderingLibrary.CreateRenderTarget2DArray // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x92f51f4
	struct UTextureRenderTarget2D* CreateRenderTarget2D(struct UObject* WorldContextObject, int32_t Width, int32_t Height, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps); // Function Engine.KismetRenderingLibrary.CreateRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x195e3a4
	void ConvertRenderTargetToTexture2DEditorOnly(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* RenderTarget, struct UTexture2D* Texture); // Function Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x92f510c
	void ClearRenderTarget2D(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FLinearColor ClearColor); // Function Engine.KismetRenderingLibrary.ClearRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1b5f414
	struct FMatrix CalculateProjectionMatrix(struct FMinimalViewInfo& MinimalViewInfo); // Function Engine.KismetRenderingLibrary.CalculateProjectionMatrix // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f35f8
	void BreakSkinWeightInfo(struct FSkelMeshSkinWeightInfo InWeight, int32_t& Bone0, char& Weight0, int32_t& Bone1, char& Weight1, int32_t& Bone2, char& Weight2, int32_t& Bone3, char& Weight3); // Function Engine.KismetRenderingLibrary.BreakSkinWeightInfo // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92f0c08
	void BeginDrawCanvasToRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct UCanvas*& Canvas, struct FVector2D& Size, struct FDrawToRenderTargetContext& Context); // Function Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92f0998
};

// Class Engine.KismetStringLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetStringLibrary : UBlueprintFunctionLibrary {

	struct FString TrimTrailing(struct FString SourceString); // Function Engine.KismetStringLibrary.TrimTrailing // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92fadb4
	struct FString Trim(struct FString SourceString); // Function Engine.KismetStringLibrary.Trim // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92fab54
	struct FString ToUpper(struct FString SourceString); // Function Engine.KismetStringLibrary.ToUpper // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92fa9e0
	struct FString ToLower(struct FString SourceString); // Function Engine.KismetStringLibrary.ToLower // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92fa86c
	struct FString TimeSecondsToString(float InSeconds); // Function Engine.KismetStringLibrary.TimeSecondsToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92fa7ac
	bool StartsWith(struct FString SourceString, struct FString InPrefix, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.StartsWith // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92fa50c
	bool Split(struct FString SourceString, struct FString InStr, struct FString& LeftS, struct FString& RightS, enum class ESearchCase SearchCase, enum class ESearchDir SearchDir); // Function Engine.KismetStringLibrary.Split // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x13dda68
	struct FString RightPad(struct FString SourceString, int32_t ChCount); // Function Engine.KismetStringLibrary.RightPad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92fa258
	struct FString RightChop(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.RightChop // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92fa0a0
	struct FString Right(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.Right // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f9ee8
	struct FString Reverse(struct FString SourceString); // Function Engine.KismetStringLibrary.Reverse // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f9c9c
	int32_t ReplaceInline(struct FString& SourceString, struct FString SearchText, struct FString ReplacementText, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.ReplaceInline // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92f974c
	struct FString Replace(struct FString SourceString, struct FString From, struct FString To, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.Replace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x13def0c
	struct TArray<struct FString> ParseIntoArray(struct FString SourceString, struct FString Delimiter, bool CullEmptyStrings); // Function Engine.KismetStringLibrary.ParseIntoArray // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2873420
	bool NotEqual_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.NotEqual_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x23b0224
	bool NotEqual_StriStri(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.NotEqual_StriStri // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2420878
	struct FString Mid(struct FString SourceString, int32_t Start, int32_t Count); // Function Engine.KismetStringLibrary.Mid // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f6c80
	bool MatchesWildcard(struct FString SourceString, struct FString Wildcard, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.MatchesWildcard // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f7ed4
	int32_t Len(struct FString S); // Function Engine.KismetStringLibrary.Len // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f7a40
	struct FString LeftPad(struct FString SourceString, int32_t ChCount); // Function Engine.KismetStringLibrary.LeftPad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f7888
	struct FString LeftChop(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.LeftChop // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f76d0
	struct FString Left(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.Left // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f7518
	struct FString JoinStringArray(struct TArray<struct FString>& SourceArray, struct FString Separator); // Function Engine.KismetStringLibrary.JoinStringArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x28aaecc
	bool IsNumeric(struct FString SourceString); // Function Engine.KismetStringLibrary.IsNumeric // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f73b8
	bool IsEmpty(struct FString InString); // Function Engine.KismetStringLibrary.IsEmpty // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x24ffd04
	struct FString GetSubstring(struct FString SourceString, int32_t StartIndex, int32_t Length); // Function Engine.KismetStringLibrary.GetSubstring // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f6c80
	int32_t GetCharacterAsNumber(struct FString SourceString, int32_t Index); // Function Engine.KismetStringLibrary.GetCharacterAsNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f6828
	struct TArray<struct FString> GetCharacterArrayFromString(struct FString SourceString); // Function Engine.KismetStringLibrary.GetCharacterArrayFromString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f65bc
	int32_t FindSubstring(struct FString SearchIn, struct FString Substring, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition); // Function Engine.KismetStringLibrary.FindSubstring // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f6278
	bool EqualEqual_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.EqualEqual_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x13dd814
	bool EqualEqual_StriStri(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.EqualEqual_StriStri // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2725238
	bool EndsWith(struct FString SourceString, struct FString InSuffix, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.EndsWith // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f5a2c
	int32_t CullArray(struct FString SourceString, struct TArray<struct FString>& inArray); // Function Engine.KismetStringLibrary.CullArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92f57b8
	struct FString Conv_VectorToString(struct FVector InVec); // Function Engine.KismetStringLibrary.Conv_VectorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f5058
	struct FString Conv_Vector3fToString(struct FVector3f InVec); // Function Engine.KismetStringLibrary.Conv_Vector3fToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f4f9c
	struct FString Conv_Vector2dToString(struct FVector2D InVec); // Function Engine.KismetStringLibrary.Conv_Vector2dToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f4ef4
	struct FString Conv_TransformToString(struct FTransform& InTrans); // Function Engine.KismetStringLibrary.Conv_TransformToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f4db4
	void Conv_StringToVector3f(struct FString InString, struct FVector3f& OutConvertedVector, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector3f // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f49dc
	void Conv_StringToVector2D(struct FString InString, struct FVector2D& OutConvertedVector2D, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f47a0
	void Conv_StringToVector(struct FString InString, struct FVector& OutConvertedVector, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f4bc8
	void Conv_StringToRotator(struct FString InString, struct FRotator& OutConvertedRotator, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f45b4
	struct FName Conv_StringToName(struct FString InString); // Function Engine.KismetStringLibrary.Conv_StringToName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x13dee68
	int64_t Conv_StringToInt64(struct FString InString); // Function Engine.KismetStringLibrary.Conv_StringToInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f42f0
	int32_t Conv_StringToInt(struct FString InString); // Function Engine.KismetStringLibrary.Conv_StringToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f4454
	double Conv_StringToDouble(struct FString InString); // Function Engine.KismetStringLibrary.Conv_StringToDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f418c
	void Conv_StringToColor(struct FString InString, struct FLinearColor& OutConvertedColor, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f3fa0
	struct FString Conv_RotatorToString(struct FRotator InRot); // Function Engine.KismetStringLibrary.Conv_RotatorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f3eec
	struct FString Conv_PlatformUserIdToString(struct FPlatformUserId InPlatformUserId); // Function Engine.KismetStringLibrary.Conv_PlatformUserIdToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f3ac4
	struct FString Conv_ObjectToString(struct UObject* InObj); // Function Engine.KismetStringLibrary.Conv_ObjectToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x24d3304
	struct FString Conv_NameToString(struct FName InName); // Function Engine.KismetStringLibrary.Conv_NameToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x24840d4
	struct FString Conv_MatrixToString(struct FMatrix& InMatrix); // Function Engine.KismetStringLibrary.Conv_MatrixToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f3d38
	struct FString Conv_IntVectorToString(struct FIntVector InIntVec); // Function Engine.KismetStringLibrary.Conv_IntVectorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f3c94
	struct FString Conv_IntToString(int32_t inInt); // Function Engine.KismetStringLibrary.Conv_IntToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x221654c
	struct FString Conv_IntPointToString(struct FIntPoint InIntPoint); // Function Engine.KismetStringLibrary.Conv_IntPointToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f3bfc
	struct FString Conv_Int64ToString(int64_t inInt); // Function Engine.KismetStringLibrary.Conv_Int64ToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f3b60
	struct FString Conv_InputDeviceIdToString(struct FInputDeviceId InDeviceId); // Function Engine.KismetStringLibrary.Conv_InputDeviceIdToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f3ac4
	struct FString Conv_DoubleToString(double InDouble); // Function Engine.KismetStringLibrary.Conv_DoubleToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f3a24
	struct FString Conv_ColorToString(struct FLinearColor InColor); // Function Engine.KismetStringLibrary.Conv_ColorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f3988
	struct FString Conv_ByteToString(char InByte); // Function Engine.KismetStringLibrary.Conv_ByteToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f38ec
	struct FString Conv_BoolToString(bool InBool); // Function Engine.KismetStringLibrary.Conv_BoolToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f3858
	bool Contains(struct FString SearchIn, struct FString Substring, bool bUseCase, bool bSearchFromEnd); // Function Engine.KismetStringLibrary.Contains // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x23369d4
	struct FString Concat_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.Concat_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x13dd8f8
	struct FString BuildString_Vector2d(struct FString AppendTo, struct FString Prefix, struct FVector2D InVector2D, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Vector2d // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f2e3c
	struct FString BuildString_Vector(struct FString AppendTo, struct FString Prefix, struct FVector InVector, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Vector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f3214
	struct FString BuildString_Rotator(struct FString AppendTo, struct FString Prefix, struct FRotator InRot, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Rotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f2a58
	struct FString BuildString_Object(struct FString AppendTo, struct FString Prefix, struct UObject* InObj, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Object // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f268c
	struct FString BuildString_Name(struct FString AppendTo, struct FString Prefix, struct FName InName, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Name // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f22c0
	struct FString BuildString_IntVector(struct FString AppendTo, struct FString Prefix, struct FIntVector InIntVector, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_IntVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f1ee0
	struct FString BuildString_Int(struct FString AppendTo, struct FString Prefix, int32_t inInt, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f1b14
	struct FString BuildString_Double(struct FString AppendTo, struct FString Prefix, double InDouble, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Double // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f1740
	struct FString BuildString_Color(struct FString AppendTo, struct FString Prefix, struct FLinearColor InColor, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Color // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92f1368
	struct FString BuildString_Bool(struct FString AppendTo, struct FString Prefix, bool InBool, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Bool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92f0f90
};

// Class Engine.KismetStringTableLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetStringTableLibrary : UBlueprintFunctionLibrary {

	bool IsRegisteredTableId(struct FName TableId); // Function Engine.KismetStringTableLibrary.IsRegisteredTableId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9305c10
	bool IsRegisteredTableEntry(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.IsRegisteredTableEntry // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9305a78
	struct FString GetTableNamespace(struct FName TableId); // Function Engine.KismetStringTableLibrary.GetTableNamespace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93057d0
	struct FString GetTableEntrySourceString(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.GetTableEntrySourceString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x930561c
	struct FString GetTableEntryMetaData(struct FName TableId, struct FString Key, struct FName MetaDataId); // Function Engine.KismetStringTableLibrary.GetTableEntryMetaData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x930543c
	struct TArray<struct FName> GetRegisteredStringTables(); // Function Engine.KismetStringTableLibrary.GetRegisteredStringTables // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9304bb4
	struct TArray<struct FName> GetMetaDataIdsFromStringTableEntry(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9303d40
	struct TArray<struct FString> GetKeysFromStringTable(struct FName TableId); // Function Engine.KismetStringTableLibrary.GetKeysFromStringTable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9303cac
};

// Class Engine.KismetSystemLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetSystemLibrary : UBlueprintFunctionLibrary {

	void UnregisterForRemoteNotifications(); // Function Engine.KismetSystemLibrary.UnregisterForRemoteNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x24841e4
	void UnloadPrimaryAssetList(struct TArray<struct FPrimaryAssetId>& PrimaryAssetIdList); // Function Engine.KismetSystemLibrary.UnloadPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x930e470
	void UnloadPrimaryAsset(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.UnloadPrimaryAsset // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x930e3e8
	void TransactObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.TransactObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x64a2a4c
	void StackTrace(); // Function Engine.KismetSystemLibrary.StackTrace // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930e388
	bool SphereTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x930df4c
	bool SphereTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x930db30
	bool SphereTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x930d714
	bool SphereTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21c8c20
	bool SphereTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x930d2f0
	bool SphereTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x930cecc
	bool SphereOverlapComponents(struct UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.SphereOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x930cc3c
	bool SphereOverlapActors(struct UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.SphereOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0xf20120
	void SnapshotObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.SnapshotObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x64a2a4c
	void ShowPlatformSpecificLeaderboardScreen(struct FString CategoryName); // Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930cae0
	void ShowPlatformSpecificAchievementsScreen(struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930ca14
	void ShowInterstitialAd(); // Function Engine.KismetSystemLibrary.ShowInterstitialAd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930c9e0
	void ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen); // Function Engine.KismetSystemLibrary.ShowAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930c908
	void SetWindowTitle(struct FText& Title); // Function Engine.KismetSystemLibrary.SetWindowTitle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x930c854
	void SetVolumeButtonsHandledBySystem(bool bEnabled); // Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x64a1f14
	void SetVectorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FVector& Value); // Function Engine.KismetSystemLibrary.SetVectorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x930c6e4
	void SetVector3fPropertyByName(struct UObject* Object, struct FName PropertyName, struct FVector3f& Value); // Function Engine.KismetSystemLibrary.SetVector3fPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x930c578
	void SetUserActivity(struct FUserActivity& UserActivity); // Function Engine.KismetSystemLibrary.SetUserActivity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x930c41c
	void SetTransformPropertyByName(struct UObject* Object, struct FName PropertyName, struct FTransform& Value); // Function Engine.KismetSystemLibrary.SetTransformPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x930c220
	void SetTextPropertyByName(struct UObject* Object, struct FName PropertyName, struct FText& Value); // Function Engine.KismetSystemLibrary.SetTextPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x930c110
	void SetSuppressViewportTransitionMessage(struct UObject* WorldContextObject, bool bState); // Function Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930c018
	void SetStructurePropertyByName(struct UObject* Object, struct FName PropertyName, struct FGenericStruct& Value); // Function Engine.KismetSystemLibrary.SetStructurePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1af4d74
	void SetStringPropertyByName(struct UObject* Object, struct FName PropertyName, struct FString Value); // Function Engine.KismetSystemLibrary.SetStringPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930bda4
	void SetSoftObjectPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSoftObjectPtr<UObject>& Value); // Function Engine.KismetSystemLibrary.SetSoftObjectPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x930bbbc
	void SetSoftClassPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSoftClassPtr<UObject>& Value); // Function Engine.KismetSystemLibrary.SetSoftClassPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x930b9d4
	void SetRotatorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FRotator& Value); // Function Engine.KismetSystemLibrary.SetRotatorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x930b864
	void SetObjectPropertyByName(struct UObject* Object, struct FName PropertyName, struct UObject* Value); // Function Engine.KismetSystemLibrary.SetObjectPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d8d274
	void SetNamePropertyByName(struct UObject* Object, struct FName PropertyName, struct FName& Value); // Function Engine.KismetSystemLibrary.SetNamePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x930b6f8
	void SetLinearColorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FLinearColor& Value); // Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x930b594
	void SetIntPropertyByName(struct UObject* Object, struct FName PropertyName, int32_t Value); // Function Engine.KismetSystemLibrary.SetIntPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930b2b8
	void SetInterfacePropertyByName(struct UObject* Object, struct FName PropertyName, struct TScriptInterface<IInterface>& Value); // Function Engine.KismetSystemLibrary.SetInterfacePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x930b408
	void SetInt64PropertyByName(struct UObject* Object, struct FName PropertyName, int64_t Value); // Function Engine.KismetSystemLibrary.SetInt64PropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930b164
	void SetGamepadsBlockDeviceFeedback(bool bBlock); // Function Engine.KismetSystemLibrary.SetGamepadsBlockDeviceFeedback // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x64a1f14
	void SetFieldPathPropertyByName(struct UObject* Object, struct FName PropertyName, struct TFieldPath<FField>& Value); // Function Engine.KismetSystemLibrary.SetFieldPathPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x930afc4
	void SetDoublePropertyByName(struct UObject* Object, struct FName PropertyName, double Value); // Function Engine.KismetSystemLibrary.SetDoublePropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1af44e8
	void SetColorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FColor& Value); // Function Engine.KismetSystemLibrary.SetColorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x930ae64
	void SetCollisionProfileNameProperty(struct UObject* Object, struct FName PropertyName, struct FCollisionProfileName& Value); // Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x930ad24
	void SetClassPropertyByName(struct UObject* Object, struct FName PropertyName, struct UObject* Value); // Function Engine.KismetSystemLibrary.SetClassPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930ab70
	void SetBytePropertyByName(struct UObject* Object, struct FName PropertyName, char Value); // Function Engine.KismetSystemLibrary.SetBytePropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1af4650
	void SetBoolPropertyByName(struct UObject* Object, struct FName PropertyName, bool Value); // Function Engine.KismetSystemLibrary.SetBoolPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1af484c
	void RetriggerableDelay(struct UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.RetriggerableDelay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x13d92d4
	void ResetGamepadAssignmentToController(int32_t ControllerId); // Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x651e558
	void ResetGamepadAssignments(); // Function Engine.KismetSystemLibrary.ResetGamepadAssignments // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x24841e4
	void RegisterForRemoteNotifications(); // Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x24841e4
	void QuitGame(struct UObject* WorldContextObject, struct APlayerController* SpecificPlayer, enum class EQuitPreference QuitPreference, bool bIgnorePlatformRestrictions); // Function Engine.KismetSystemLibrary.QuitGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930aa34
	void PrintWarning(struct FString InString); // Function Engine.KismetSystemLibrary.PrintWarning // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x69ef0b4
	void PrintText(struct UObject* WorldContextObject, struct FText InText, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration, struct FName Key); // Function Engine.KismetSystemLibrary.PrintText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x930a7dc
	void PrintString(struct UObject* WorldContextObject, struct FString InString, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration, struct FName Key); // Function Engine.KismetSystemLibrary.PrintString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x930a53c
	bool ParseParamValue(struct FString InString, struct FString InParam, struct FString& OutValue); // Function Engine.KismetSystemLibrary.ParseParamValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x930a1ac
	bool ParseParam(struct FString InString, struct FString InParam); // Function Engine.KismetSystemLibrary.ParseParam // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9309f30
	void ParseCommandLine(struct FString InCmdLine, struct TArray<struct FString>& OutTokens, struct TArray<struct FString>& OutSwitches, struct TMap<struct FString, struct FString>& OutParams); // Function Engine.KismetSystemLibrary.ParseCommandLine // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9309c7c
	void OnAssetLoaded__DelegateSignature(struct UObject* Loaded); // DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature // (Public|Delegate) // @ game+0xd67374
	void OnAssetClassLoaded__DelegateSignature(struct UObject* Loaded); // DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature // (Public|Delegate) // @ game+0xd67374
	bool NotEqual_SoftObjectReference(struct TSoftObjectPtr<UObject>& A, struct TSoftObjectPtr<UObject>& B); // Function Engine.KismetSystemLibrary.NotEqual_SoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9309b44
	bool NotEqual_SoftClassReference(struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B); // Function Engine.KismetSystemLibrary.NotEqual_SoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9309b44
	bool NotEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B); // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5f33f68
	bool NotEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B); // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5f33e9c
	struct FString NormalizeFilename(struct FString InFilename); // Function Engine.KismetSystemLibrary.NormalizeFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9309884
	void MoveComponentTo(struct USceneComponent* Component, struct FVector TargetRelativeLocation, struct FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, enum class EMoveComponentAction MoveAction, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.MoveComponentTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9309584
	struct FSoftObjectPath MakeSoftObjectPath(struct FString PathString); // Function Engine.KismetSystemLibrary.MakeSoftObjectPath // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9309110
	struct FSoftClassPath MakeSoftClassPath(struct FString PathString); // Function Engine.KismetSystemLibrary.MakeSoftClassPath // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9308d48
	struct FText MakeLiteralText(struct FText Value); // Function Engine.KismetSystemLibrary.MakeLiteralText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2156340
	struct FString MakeLiteralString(struct FString Value); // Function Engine.KismetSystemLibrary.MakeLiteralString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9308ae8
	struct FName MakeLiteralName(struct FName Value); // Function Engine.KismetSystemLibrary.MakeLiteralName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f9c8f8
	int64_t MakeLiteralInt64(int64_t Value); // Function Engine.KismetSystemLibrary.MakeLiteralInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9308a6c
	int32_t MakeLiteralInt(int32_t Value); // Function Engine.KismetSystemLibrary.MakeLiteralInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x247fee8
	double MakeLiteralDouble(double Value); // Function Engine.KismetSystemLibrary.MakeLiteralDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x220a7c4
	char MakeLiteralByte(char Value); // Function Engine.KismetSystemLibrary.MakeLiteralByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1eb89ac
	bool MakeLiteralBool(bool Value); // Function Engine.KismetSystemLibrary.MakeLiteralBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92d19c8
	struct FARFilter MakeARFilter(struct TArray<struct FName>& PackageNames, struct TArray<struct FName>& PackagePaths, struct TArray<struct FName>& ObjectPaths, struct TArray<struct FTopLevelAssetPath>& ClassPaths, struct TSet<struct FTopLevelAssetPath>& RecursiveClassPathsExclusionSet, struct TArray<struct FName>& ClassNames, struct TSet<struct FName>& RecursiveClassesExclusionSet, bool bRecursivePaths, bool bRecursiveClasses, bool bIncludeOnlyOnDiskAssets); // Function Engine.KismetSystemLibrary.MakeARFilter // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x93085d4
	void LogString(struct FString InString, bool bPrintToLog); // Function Engine.KismetSystemLibrary.LogString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x69ef1f8
	void LoadInterstitialAd(int32_t AdIdIndex); // Function Engine.KismetSystemLibrary.LoadInterstitialAd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9308554
	struct UObject* LoadClassAsset_Blocking(struct TSoftClassPtr<UObject> AssetClass); // Function Engine.KismetSystemLibrary.LoadClassAsset_Blocking // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930848c
	void LoadAssetClass(struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> AssetClass, struct FDelegate OnLoaded, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.LoadAssetClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x13d8dd4
	struct UObject* LoadAsset_Blocking(struct TSoftObjectPtr<UObject> Asset); // Function Engine.KismetSystemLibrary.LoadAsset_Blocking // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930839c
	void LoadAsset(struct UObject* WorldContextObject, struct TSoftObjectPtr<UObject> Asset, struct FDelegate OnLoaded, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.LoadAsset // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x13daebc
	bool LineTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21c9aa4
	bool LineTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9307fbc
	bool LineTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21c86bc
	bool LineTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9307bbc
	bool LineTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93077f4
	bool LineTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9307428
	void LaunchURL(struct FString URL); // Function Engine.KismetSystemLibrary.LaunchURL // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x93072c4
	void K2_UnPauseTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2769370
	void K2_UnPauseTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930723c
	void K2_UnPauseTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_UnPauseTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9307098
	bool K2_TimerExistsHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_TimerExistsHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9306fb0
	bool K2_TimerExistsDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9306f1c
	bool K2_TimerExists(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_TimerExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9306d74
	struct FTimerHandle K2_SetTimerForNextTickDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_SetTimerForNextTickDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2460a5c
	struct FTimerHandle K2_SetTimerForNextTick(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_SetTimerForNextTick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x13dd6a0
	struct FTimerHandle K2_SetTimerDelegate(struct FDelegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // Function Engine.KismetSystemLibrary.K2_SetTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x13dc374
	struct FTimerHandle K2_SetTimer(struct UObject* Object, struct FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // Function Engine.KismetSystemLibrary.K2_SetTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x221e020
	void K2_PauseTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_PauseTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x286f608
	void K2_PauseTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9306cec
	void K2_PauseTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_PauseTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9306b48
	bool K2_IsValidTimerHandle(struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x24466b0
	bool K2_IsTimerPausedHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9306a58
	bool K2_IsTimerPausedDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93069c4
	bool K2_IsTimerPaused(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_IsTimerPaused // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x930681c
	bool K2_IsTimerActiveHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2156248
	bool K2_IsTimerActiveDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9306788
	bool K2_IsTimerActive(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_IsTimerActive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93065e0
	struct FTimerHandle K2_InvalidateTimerHandle(struct FTimerHandle& Handle); // Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9306558
	float K2_GetTimerRemainingTimeHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x273e158
	float K2_GetTimerRemainingTimeDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93064c0
	float K2_GetTimerRemainingTime(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9306314
	float K2_GetTimerElapsedTimeHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9306214
	float K2_GetTimerElapsedTimeDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x930617c
	float K2_GetTimerElapsedTime(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9305fd0
	void K2_ClearTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_ClearTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9305ea8
	void K2_ClearTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9305e20
	void K2_ClearTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_ClearTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x235d134
	void K2_ClearAndInvalidateTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle& Handle); // Function Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1fd7dac
	bool IsValidSoftObjectReference(struct TSoftObjectPtr<UObject>& SoftObjectReference); // Function Engine.KismetSystemLibrary.IsValidSoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1fd5cf8
	bool IsValidSoftClassReference(struct TSoftClassPtr<UObject>& SoftClassReference); // Function Engine.KismetSystemLibrary.IsValidSoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1fd5cf8
	bool IsValidPrimaryAssetType(struct FPrimaryAssetType PrimaryAssetType); // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5f33dd8
	bool IsValidPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5f33cf8
	bool IsValidClass(struct UObject* Class); // Function Engine.KismetSystemLibrary.IsValidClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xd6ae40
	bool IsValid(struct UObject* Object); // Function Engine.KismetSystemLibrary.IsValid // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xd6ae40
	bool IsUnattended(); // Function Engine.KismetSystemLibrary.IsUnattended // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9305dfc
	bool IsStandalone(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsStandalone // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9305d64
	bool IsSplitScreen(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsSplitScreen // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9305ce4
	bool IsServer(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsServer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10efaf4
	bool IsScreensaverEnabled(); // Function Engine.KismetSystemLibrary.IsScreensaverEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x22fb320
	bool IsPackagedForDistribution(); // Function Engine.KismetSystemLibrary.IsPackagedForDistribution // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2524684
	bool IsLoggedIn(struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.IsLoggedIn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9305998
	bool IsInterstitialAdRequested(); // Function Engine.KismetSystemLibrary.IsInterstitialAdRequested // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9305950
	bool IsInterstitialAdAvailable(); // Function Engine.KismetSystemLibrary.IsInterstitialAdAvailable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9305908
	bool IsDedicatedServer(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsDedicatedServer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xfca1b8
	bool IsControllerAssignedToGamepad(int32_t ControllerId); // Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9305894
	void HideAdBanner(); // Function Engine.KismetSystemLibrary.HideAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9305860
	bool HasMultipleLocalPlayers(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.HasMultipleLocalPlayers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c71694
	bool GetVolumeButtonsHandledBySystem(); // Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2524684
	struct FString GetUniqueDeviceId(); // Function Engine.KismetSystemLibrary.GetUniqueDeviceId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x67520dc
	struct FString GetSystemPath(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetSystemPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9304e28
	bool GetSupportedFullscreenResolutions(struct TArray<struct FIntPoint>& Resolutions); // Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9304d8c
	struct TSoftObjectPtr<UObject> GetSoftObjectReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9304cf4
	struct TSoftClassPtr<UObject> GetSoftClassReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9304c5c
	int32_t GetRenderingMaterialQualityLevel(); // Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ae4260
	int32_t GetRenderingDetailMode(); // Function Engine.KismetSystemLibrary.GetRenderingDetailMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x22cd394
	struct FString GetProjectSavedDirectory(); // Function Engine.KismetSystemLibrary.GetProjectSavedDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9304a78
	struct FString GetProjectDirectory(); // Function Engine.KismetSystemLibrary.GetProjectDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9304928
	struct FString GetProjectContentDirectory(); // Function Engine.KismetSystemLibrary.GetProjectContentDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93047d8
	void GetPrimaryAssetsWithBundleState(struct TArray<struct FName>& RequiredBundles, struct TArray<struct FName>& ExcludedBundles, struct TArray<struct FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, struct TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList); // Function Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x93045b4
	void GetPrimaryAssetIdList(struct FPrimaryAssetType PrimaryAssetType, struct TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdList // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93044cc
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(struct TSoftObjectPtr<UObject> SoftObjectReference); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x93043d8
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(struct TSoftClassPtr<UObject> SoftClassReference); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x93042e4
	struct FPrimaryAssetId GetPrimaryAssetIdFromObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9304238
	struct FPrimaryAssetId GetPrimaryAssetIdFromClass(struct UObject* Class); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9304160
	struct TArray<struct FString> GetPreferredLanguages(); // Function Engine.KismetSystemLibrary.GetPreferredLanguages // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9304120
	struct FString GetPlatformUserName(); // Function Engine.KismetSystemLibrary.GetPlatformUserName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93040ac
	struct FString GetPlatformUserDir(); // Function Engine.KismetSystemLibrary.GetPlatformUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9304038
	struct FString GetPathName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetPathName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2492af0
	struct UObject* GetOuterObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetOuterObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9303fb0
	struct FString GetObjectName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetObjectName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x21f767c
	struct UObject* GetObjectFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9303f30
	int32_t GetMinYResolutionForUI(); // Function Engine.KismetSystemLibrary.GetMinYResolutionForUI // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9303f10
	int32_t GetMinYResolutionFor3DView(); // Function Engine.KismetSystemLibrary.GetMinYResolutionFor3DView // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9303ef0
	struct FString GetLocalCurrencySymbol(); // Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x67520dc
	struct FString GetLocalCurrencyCode(); // Function Engine.KismetSystemLibrary.GetLocalCurrencyCode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x67520dc
	double GetGameTimeInSeconds(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.GetGameTimeInSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xfca10c
	struct FString GetGamepadControllerName(int32_t ControllerId); // Function Engine.KismetSystemLibrary.GetGamepadControllerName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9303ad8
	struct UTexture2D* GetGamepadButtonGlyph(struct FString ButtonKey, int32_t ControllerIndex); // Function Engine.KismetSystemLibrary.GetGamepadButtonGlyph // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x930393c
	struct FString GetGameName(); // Function Engine.KismetSystemLibrary.GetGameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9303784
	struct FString GetGameBundleId(); // Function Engine.KismetSystemLibrary.GetGameBundleId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9303734
	int64_t GetFrameCount(); // Function Engine.KismetSystemLibrary.GetFrameCount // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20cfea0
	struct FString GetEngineVersion(); // Function Engine.KismetSystemLibrary.GetEngineVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93036c0
	struct FString GetDisplayName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x19bf960
	struct FString GetDeviceId(); // Function Engine.KismetSystemLibrary.GetDeviceId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x67520dc
	struct FString GetDefaultLocale(); // Function Engine.KismetSystemLibrary.GetDefaultLocale // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x930358c
	struct FString GetDefaultLanguage(); // Function Engine.KismetSystemLibrary.GetDefaultLanguage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9303458
	bool GetCurrentBundleState(struct FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, struct TArray<struct FName>& OutBundles); // Function Engine.KismetSystemLibrary.GetCurrentBundleState // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93032d8
	bool GetConvenientWindowedResolutions(struct TArray<struct FIntPoint>& Resolutions); // Function Engine.KismetSystemLibrary.GetConvenientWindowedResolutions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x930323c
	int32_t GetConsoleVariableIntValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableIntValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x217d06c
	float GetConsoleVariableFloatValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableFloatValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x93030e8
	bool GetConsoleVariableBoolValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableBoolValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x217cfdc
	void GetComponentBounds(struct USceneComponent* Component, struct FVector& Origin, struct FVector& BoxExtent, float& SphereRadius); // Function Engine.KismetSystemLibrary.GetComponentBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1db339c
	struct FString GetCommandLine(); // Function Engine.KismetSystemLibrary.GetCommandLine // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9303074
	struct UObject* GetClassFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9302fec
	struct FString GetClassDisplayName(struct UObject* Class); // Function Engine.KismetSystemLibrary.GetClassDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9302f30
	struct FString GetBuildVersion(); // Function Engine.KismetSystemLibrary.GetBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9302d74
	struct FString GetBuildConfiguration(); // Function Engine.KismetSystemLibrary.GetBuildConfiguration // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9302d00
	int32_t GetAdIDCount(); // Function Engine.KismetSystemLibrary.GetAdIDCount // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9302cb8
	void GetActorListFromComponentList(struct TArray<struct UPrimitiveComponent*>& ComponentList, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& OutActorList); // Function Engine.KismetSystemLibrary.GetActorListFromComponentList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9302b74
	void GetActorBounds(struct AActor* Actor, struct FVector& Origin, struct FVector& BoxExtent); // Function Engine.KismetSystemLibrary.GetActorBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9302990
	void ForceCloseAdBanner(); // Function Engine.KismetSystemLibrary.ForceCloseAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x930295c
	void FlushPersistentDebugLines(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.FlushPersistentDebugLines // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x64a2a4c
	void FlushDebugStrings(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.FlushDebugStrings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x64a2a4c
	void ExecuteConsoleCommand(struct UObject* WorldContextObject, struct FString Command, struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.ExecuteConsoleCommand // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x22255c4
	bool EqualEqual_SoftObjectReference(struct TSoftObjectPtr<UObject>& A, struct TSoftObjectPtr<UObject>& B); // Function Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9302828
	bool EqualEqual_SoftClassReference(struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B); // Function Engine.KismetSystemLibrary.EqualEqual_SoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9302828
	bool EqualEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B); // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5f33538
	bool EqualEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B); // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5f3346c
	int32_t EndTransaction(); // Function Engine.KismetSystemLibrary.EndTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x7320c60
	void DrawDebugString(struct UObject* WorldContextObject, struct FVector TextLocation, struct FString Text, struct AActor* TestBaseActor, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x93025c0
	void DrawDebugSphere(struct UObject* WorldContextObject, struct FVector Center, float Radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugSphere // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x93023f0
	void DrawDebugPoint(struct UObject* WorldContextObject, struct FVector Position, float Size, struct FLinearColor PointColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9302298
	void DrawDebugPlane(struct UObject* WorldContextObject, struct FPlane& PlaneCoordinates, struct FVector Location, float Size, struct FLinearColor PlaneColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9302104
	void DrawDebugLine(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9301f74
	void DrawDebugFrustum(struct UObject* WorldContextObject, struct FTransform& FrustumTransform, struct FLinearColor FrustumColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugFrustum // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9301db0
	void DrawDebugFloatHistoryTransform(struct UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, struct FTransform& DrawTransform, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9301b88
	void DrawDebugFloatHistoryLocation(struct UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, struct FVector DrawLocation, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93019c8
	void DrawDebugCylinder(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCylinder // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x93017c0
	void DrawDebugCoordinateSystem(struct UObject* WorldContextObject, struct FVector AxisLoc, struct FRotator AxisRot, float Scale, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x930162c
	void DrawDebugConeInDegrees(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x93013a8
	void DrawDebugCone(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCone // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x93013a8
	void DrawDebugCircle(struct UObject* WorldContextObject, struct FVector Center, float Radius, int32_t NumSegments, struct FLinearColor LineColor, float Duration, float Thickness, struct FVector YAxis, struct FVector ZAxis, bool bDrawAxis); // Function Engine.KismetSystemLibrary.DrawDebugCircle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9301128
	void DrawDebugCapsule(struct UObject* WorldContextObject, struct FVector Center, float HalfHeight, float Radius, struct FRotator Rotation, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCapsule // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9300f20
	void DrawDebugCamera(struct ACameraActor* CameraActor, struct FLinearColor CameraColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugCamera // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9300e3c
	void DrawDebugBox(struct UObject* WorldContextObject, struct FVector Center, struct FVector Extent, struct FLinearColor LineColor, struct FRotator Rotation, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9300c6c
	void DrawDebugArrow(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, float ArrowSize, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugArrow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9300aa0
	bool DoesImplementInterface(struct UObject* TestObject, struct UInterface* Interface); // Function Engine.KismetSystemLibrary.DoesImplementInterface // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x29d1094
	void DelayUntilNextTick(struct UObject* WorldContextObject, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.DelayUntilNextTick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x13d90e0
	void Delay(struct UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.Delay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0xfc9f44
	void CreateCopyForUndoBuffer(struct UObject* ObjectToModify); // Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x64a2a4c
	struct FString ConvertToRelativePath(struct FString Filename); // Function Engine.KismetSystemLibrary.ConvertToRelativePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9300828
	struct FString ConvertToAbsolutePath(struct FString Filename); // Function Engine.KismetSystemLibrary.ConvertToAbsolutePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93005d0
	struct TSoftObjectPtr<UObject> Conv_SoftObjPathToSoftObjRef(struct FSoftObjectPath& SoftObjectPath); // Function Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9300494
	struct FString Conv_SoftObjectReferenceToString(struct TSoftObjectPtr<UObject>& SoftObjectReference); // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9300218
	struct UObject* Conv_SoftObjectReferenceToObject(struct TSoftObjectPtr<UObject>& SoftObject); // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1e91c58
	struct FString Conv_SoftClassReferenceToString(struct TSoftClassPtr<UObject>& SoftClassReference); // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9300218
	struct UObject* Conv_SoftClassReferenceToClass(struct TSoftClassPtr<UObject>& SoftClass); // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9300020
	struct TSoftClassPtr<UObject> Conv_SoftClassPathToSoftClassRef(struct FSoftClassPath& SoftClassPath); // Function Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92fff04
	struct FString Conv_PrimaryAssetTypeToString(struct FPrimaryAssetType PrimaryAssetType); // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x921128c
	struct FString Conv_PrimaryAssetIdToString(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92ffe60
	struct TSoftObjectPtr<UObject> Conv_ObjectToSoftObjectReference(struct UObject* Object); // Function Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x225ba08
	struct UObject* Conv_ObjectToClass(struct UObject* Object, struct UObject* Class); // Function Engine.KismetSystemLibrary.Conv_ObjectToClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x92ffd90
	struct UObject* Conv_InterfaceToObject(struct TScriptInterface<IInterface>& Interface); // Function Engine.KismetSystemLibrary.Conv_InterfaceToObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x22b14a0
	struct TSoftClassPtr<UObject> Conv_ClassToSoftClassReference(struct UObject*& Class); // Function Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x92ffca0
	void ControlScreensaver(bool bAllowScreenSaver); // Function Engine.KismetSystemLibrary.ControlScreensaver // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x64a1f14
	bool ComponentOverlapComponents(struct UPrimitiveComponent* Component, struct FTransform& ComponentTransform, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.ComponentOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92ff9f0
	bool ComponentOverlapActors(struct UPrimitiveComponent* Component, struct FTransform& ComponentTransform, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.ComponentOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92ff740
	void CollectGarbage(); // Function Engine.KismetSystemLibrary.CollectGarbage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x69f0ac8
	bool CapsuleTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92ff2bc
	bool CapsuleTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92fee58
	bool CapsuleTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92fe9f0
	bool CapsuleTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21c9204
	bool CapsuleTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92fe580
	bool CapsuleTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92fe110
	bool CapsuleOverlapComponents(struct UObject* WorldContextObject, struct FVector CapsulePos, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.CapsuleOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92fde44
	bool CapsuleOverlapActors(struct UObject* WorldContextObject, struct FVector CapsulePos, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.CapsuleOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92fdb78
	bool CanLaunchURL(struct FString URL); // Function Engine.KismetSystemLibrary.CanLaunchURL // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92fda10
	void CancelTransaction(int32_t Index); // Function Engine.KismetSystemLibrary.CancelTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x651e558
	void BreakSoftObjectPath(struct FSoftObjectPath InSoftObjectPath, struct FString& PathString); // Function Engine.KismetSystemLibrary.BreakSoftObjectPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92fd73c
	void BreakSoftClassPath(struct FSoftClassPath InSoftClassPath, struct FString& PathString); // Function Engine.KismetSystemLibrary.BreakSoftClassPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92fd46c
	void BreakARFilter(struct FARFilter InARFilter, struct TArray<struct FName>& PackageNames, struct TArray<struct FName>& PackagePaths, struct TArray<struct FName>& ObjectPaths, struct TArray<struct FTopLevelAssetPath>& ClassPaths, struct TSet<struct FTopLevelAssetPath>& RecursiveClassPathsExclusionSet, struct TArray<struct FName>& ClassNames, struct TSet<struct FName>& RecursiveClassesExclusionSet, bool& bRecursivePaths, bool& bRecursiveClasses, bool& bIncludeOnlyOnDiskAssets); // Function Engine.KismetSystemLibrary.BreakARFilter // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x92fcf04
	bool BoxTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92fca54
	bool BoxTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92fc5c8
	bool BoxTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21c8038
	bool BoxTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92fc114
	bool BoxTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92fbc80
	bool BoxTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92fb7ec
	bool BoxOverlapComponents(struct UObject* WorldContextObject, struct FVector BoxPos, struct FVector Extent, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.BoxOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92fb554
	bool BoxOverlapActors(struct UObject* WorldContextObject, struct FVector BoxPos, struct FVector BoxExtent, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.BoxOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x92fb2bc
	int32_t BeginTransaction(struct FString Context, struct FText Description, struct UObject* PrimaryObject); // Function Engine.KismetSystemLibrary.BeginTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x92fb0a0
	struct FDebugFloatHistory AddFloatHistorySample(float Value, struct FDebugFloatHistory& FloatHistory); // Function Engine.KismetSystemLibrary.AddFloatHistorySample // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x92faf90
};

// Class Engine.KismetTextLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetTextLibrary : UBlueprintFunctionLibrary {

	struct FText TextTrimTrailing(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimTrailing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9312130
	struct FText TextTrimPrecedingAndTrailing(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9312018
	struct FText TextTrimPreceding(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimPreceding // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9311f00
	struct FText TextToUpper(struct FText& InText); // Function Engine.KismetTextLibrary.TextToUpper // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x15c0318
	struct FText TextToLower(struct FText& InText); // Function Engine.KismetTextLibrary.TextToLower // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9311ddc
	bool TextIsTransient(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsTransient // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9311d18
	bool TextIsFromStringTable(struct FText& Text); // Function Engine.KismetTextLibrary.TextIsFromStringTable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9311c54
	bool TextIsEmpty(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1e68348
	bool TextIsCultureInvariant(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsCultureInvariant // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9311b90
	struct FText TextFromStringTable(struct FName TableId, struct FString Key); // Function Engine.KismetTextLibrary.TextFromStringTable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93119c8
	bool StringTableIdAndKeyFromText(struct FText Text, struct FName& OutTableId, struct FString& OutKey); // Function Engine.KismetTextLibrary.StringTableIdAndKeyFromText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9311740
	struct FText PolyglotDataToText(struct FPolyglotTextData& PolyglotData); // Function Engine.KismetTextLibrary.PolyglotDataToText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9311630
	bool NotEqual_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.NotEqual_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x93114c8
	bool NotEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x931135c
	void IsPolyglotDataValid(struct FPolyglotTextData& PolyglotData, bool& IsValid, struct FText& ErrorMessage); // Function Engine.KismetTextLibrary.IsPolyglotDataValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x93111e4
	struct FText GetEmptyText(); // Function Engine.KismetTextLibrary.GetEmptyText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2341d98
	struct FText Format(struct FText InPattern, struct TArray<struct FFormatArgumentData> InArgs); // Function Engine.KismetTextLibrary.Format // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xe54930
	bool FindTextInLocalizationTable(struct FString Namespace, struct FString Key, struct FText& OutText); // Function Engine.KismetTextLibrary.FindTextInLocalizationTable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9310ec8
	bool EqualEqual_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.EqualEqual_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1f4e510
	bool EqualEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x9310d5c
	struct FText Conv_VectorToText(struct FVector InVec); // Function Engine.KismetTextLibrary.Conv_VectorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9310c70
	struct FText Conv_Vector2dToText(struct FVector2D InVec); // Function Engine.KismetTextLibrary.Conv_Vector2dToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9310b98
	struct FText Conv_TransformToText(struct FTransform& InTrans); // Function Engine.KismetTextLibrary.Conv_TransformToText // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9310a40
	struct FString Conv_TextToString(struct FText& InText); // Function Engine.KismetTextLibrary.Conv_TextToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x200a8d4
	struct FText Conv_StringToText(struct FString InString); // Function Engine.KismetTextLibrary.Conv_StringToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x13dded0
	struct FText Conv_RotatorToText(struct FRotator InRot); // Function Engine.KismetTextLibrary.Conv_RotatorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9310954
	struct FText Conv_ObjectToText(struct UObject* InObj); // Function Engine.KismetTextLibrary.Conv_ObjectToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93106f4
	struct FText Conv_NameToText(struct FName InName); // Function Engine.KismetTextLibrary.Conv_NameToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9310608
	struct FText Conv_IntToText(int32_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Function Engine.KismetTextLibrary.Conv_IntToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1de2cf0
	struct FText Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Function Engine.KismetTextLibrary.Conv_Int64ToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9310448
	struct FText Conv_DoubleToText(double Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Function Engine.KismetTextLibrary.Conv_DoubleToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xdcf56c
	struct FText Conv_ColorToText(struct FLinearColor InColor); // Function Engine.KismetTextLibrary.Conv_ColorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x9310370
	struct FText Conv_ByteToText(char Value); // Function Engine.KismetTextLibrary.Conv_ByteToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x19a8df4
	struct FText Conv_BoolToText(bool InBool); // Function Engine.KismetTextLibrary.Conv_BoolToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9310298
	struct FText AsTimeZoneTime_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x930fe9c
	struct FText AsTimeZoneDateTime_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x930fa4c
	struct FText AsTimeZoneDate_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x930fc78
	struct FText AsTimespan_Timespan(struct FTimespan& InTimespan); // Function Engine.KismetTextLibrary.AsTimespan_Timespan // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x93101a4
	struct FText AsTime_DateTime(struct FDateTime& In); // Function Engine.KismetTextLibrary.AsTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x93100c0
	struct FText AsPercent_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Function Engine.KismetTextLibrary.AsPercent_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x930f7bc
	struct FText AsDateTime_DateTime(struct FDateTime& In); // Function Engine.KismetTextLibrary.AsDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x930f5f4
	struct FText AsDate_DateTime(struct FDateTime& InDateTime); // Function Engine.KismetTextLibrary.AsDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x930f6d8
	struct FText AsCurrencyBase(int32_t BaseValue, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrencyBase // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x930ec3c
	struct FText AsCurrency_Integer(int32_t Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrency_Integer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x930f200
	struct FText AsCurrency_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrency_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x930ee50
};

// Class Engine.Layer
// Size: 0x40 (Inherited: 0x28)
struct ULayer : UObject {
	struct FName LayerName; // 0x28(0x04)
	char bIsVisible : 1; // 0x2c(0x01)
	char pad_2C_1 : 7; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
	struct TArray<struct FLayerActorStats> ActorStats; // 0x30(0x10)
};

// Class Engine.LevelPartitionInterface
// Size: 0x28 (Inherited: 0x28)
struct ULevelPartitionInterface : UInterface {
};

// Class Engine.ActorContainer
// Size: 0x78 (Inherited: 0x28)
struct UActorContainer : UObject {
	struct TMap<struct FName, struct AActor*> Actors; // 0x28(0x50)
};

// Class Engine.LevelActorContainer
// Size: 0x38 (Inherited: 0x28)
struct ULevelActorContainer : UObject {
	struct TArray<struct AActor*> Actors; // 0x28(0x10)
};

// Class Engine.LevelBounds
// Size: 0x298 (Inherited: 0x288)
struct ALevelBounds : AActor {
	struct UBoxComponent* BoxComponent; // 0x288(0x08)
	bool bAutoUpdateBounds; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)
};

// Class Engine.LevelInstance
// Size: 0x308 (Inherited: 0x288)
struct ALevelInstance : AActor {
	char pad_288[0x8]; // 0x288(0x08)
	struct TSoftObjectPtr<UWorld> CookedWorldAsset; // 0x290(0x28)
	struct FGuid LevelInstanceSpawnGuid; // 0x2b8(0x10)
	char pad_2C8[0x40]; // 0x2c8(0x40)

	void OnRep_LevelInstanceSpawnGuid(); // Function Engine.LevelInstance.OnRep_LevelInstanceSpawnGuid // (Final|Native|Public) // @ game+0x93137c8
};

// Class Engine.LevelInstanceComponent
// Size: 0x2a0 (Inherited: 0x2a0)
struct ULevelInstanceComponent : USceneComponent {
};

// Class Engine.LevelInstanceEditorInstanceActor
// Size: 0x288 (Inherited: 0x288)
struct ALevelInstanceEditorInstanceActor : AActor {
};

// Class Engine.LevelStreamingAlwaysLoaded
// Size: 0x180 (Inherited: 0x180)
struct ULevelStreamingAlwaysLoaded : ULevelStreaming {
};

// Class Engine.LevelStreamingLevelInstanceEditor
// Size: 0x180 (Inherited: 0x180)
struct ULevelStreamingLevelInstanceEditor : ULevelStreamingAlwaysLoaded {
};

// Class Engine.LevelInstanceEditorObject
// Size: 0x28 (Inherited: 0x28)
struct ULevelInstanceEditorObject : UObject {
};

// Class Engine.LevelInstancePivot
// Size: 0x290 (Inherited: 0x288)
struct ALevelInstancePivot : AActor {
	char pad_288[0x8]; // 0x288(0x08)
};

// Class Engine.LevelInstanceEditorPivotInterface
// Size: 0x28 (Inherited: 0x28)
struct ULevelInstanceEditorPivotInterface : UInterface {
};

// Class Engine.LevelInstanceInterface
// Size: 0x28 (Inherited: 0x28)
struct ULevelInstanceInterface : UInterface {
};

// Class Engine.LevelStreamingLevelInstance
// Size: 0x1a0 (Inherited: 0x190)
struct ULevelStreamingLevelInstance : ULevelStreamingDynamic {
	char pad_190[0x10]; // 0x190(0x10)
};

// Class Engine.LevelInstanceSubsystem
// Size: 0x1c0 (Inherited: 0x30)
struct ULevelInstanceSubsystem : UWorldSubsystem {
	char pad_30[0x190]; // 0x30(0x190)
};

// Class Engine.LevelScriptBlueprint
// Size: 0xa8 (Inherited: 0xa8)
struct ULevelScriptBlueprint : UBlueprint {
};

// Class Engine.LevelStreamingPersistent
// Size: 0x180 (Inherited: 0x180)
struct ULevelStreamingPersistent : ULevelStreaming {
};

// Class Engine.LevelStreamingVolume
// Size: 0x2d8 (Inherited: 0x2c0)
struct ALevelStreamingVolume : AVolume {
	struct TArray<struct FName> StreamingLevelNames; // 0x2c0(0x10)
	char bEditorPreVisOnly : 1; // 0x2d0(0x01)
	char bDisabled : 1; // 0x2d0(0x01)
	char pad_2D0_2 : 6; // 0x2d0(0x01)
	char pad_2D1[0x3]; // 0x2d1(0x03)
	enum class EStreamingVolumeUsage StreamingUsage; // 0x2d4(0x01)
	char pad_2D5[0x3]; // 0x2d5(0x03)
};

// Class Engine.LightmappedSurfaceCollection
// Size: 0x40 (Inherited: 0x28)
struct ULightmappedSurfaceCollection : UObject {
	struct UModel* SourceModel; // 0x28(0x08)
	struct TArray<int32_t> Surfaces; // 0x30(0x10)
};

// Class Engine.LightMapTexture2D
// Size: 0x180 (Inherited: 0x178)
struct ULightMapTexture2D : UTexture2D {
	char pad_178[0x8]; // 0x178(0x08)
};

// Class Engine.LightMapVirtualTexture2D
// Size: 0x190 (Inherited: 0x178)
struct ULightMapVirtualTexture2D : UTexture2D {
	struct TArray<int8_t> TypeToLayer; // 0x178(0x10)
	char pad_188[0x8]; // 0x188(0x08)
};

// Class Engine.LightmassCharacterIndirectDetailVolume
// Size: 0x2c0 (Inherited: 0x2c0)
struct ALightmassCharacterIndirectDetailVolume : AVolume {
};

// Class Engine.LightmassImportanceVolume
// Size: 0x2c0 (Inherited: 0x2c0)
struct ALightmassImportanceVolume : AVolume {
};

// Class Engine.LightmassPortal
// Size: 0x290 (Inherited: 0x288)
struct ALightmassPortal : AActor {
	struct ULightmassPortalComponent* PortalComponent; // 0x288(0x08)
};

// Class Engine.LightmassPortalComponent
// Size: 0x2b0 (Inherited: 0x2a0)
struct ULightmassPortalComponent : USceneComponent {
	struct UBoxComponent* PreviewBox; // 0x2a0(0x08)
	char pad_2A8[0x8]; // 0x2a8(0x08)
};

// Class Engine.LightmassPrimitiveSettingsObject
// Size: 0x40 (Inherited: 0x28)
struct ULightmassPrimitiveSettingsObject : UObject {
	struct FLightmassPrimitiveSettings LightmassSettings; // 0x28(0x18)
};

// Class Engine.LightWeightInstanceBlueprintFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct ULightWeightInstanceBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	struct FActorInstanceHandle CreateNewLightWeightInstance(struct UObject* ActorClass, struct FTransform Transform, struct UDataLayerInstance* Layer, struct UWorld* World); // Function Engine.LightWeightInstanceBlueprintFunctionLibrary.CreateNewLightWeightInstance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9315ce4
	struct FActorInstanceHandle ConvertActorToLightWeightInstance(struct AActor* Actor); // Function Engine.LightWeightInstanceBlueprintFunctionLibrary.ConvertActorToLightWeightInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9315a20
};

// Class Engine.ActorInstanceHandleInterface
// Size: 0x48 (Inherited: 0x28)
struct UActorInstanceHandleInterface : UObject {
	char pad_28[0x20]; // 0x28(0x20)
};

// Class Engine.LightWeightInstanceManager
// Size: 0x328 (Inherited: 0x288)
struct ALightWeightInstanceManager : AActor {
	char pad_288[0x10]; // 0x288(0x10)
	struct AActor* RepresentedClass; // 0x298(0x08)
	struct AActor* AcceptedClass; // 0x2a0(0x08)
	struct TArray<struct FTransform> InstanceTransforms; // 0x2a8(0x10)
	char pad_2B8[0x50]; // 0x2b8(0x50)
	struct TArray<int32_t> FreeIndices; // 0x308(0x10)
	struct TArray<bool> ValidIndices; // 0x318(0x10)

	void OnRep_Transforms(); // Function Engine.LightWeightInstanceManager.OnRep_Transforms // (Native|Protected) // @ game+0x5c9cbec
};

// Class Engine.LightWeightInstanceStaticMeshManager
// Size: 0x390 (Inherited: 0x328)
struct ALightWeightInstanceStaticMeshManager : ALightWeightInstanceManager {
	char pad_328[0x8]; // 0x328(0x08)
	struct TSoftObjectPtr<UStaticMesh> StaticMesh; // 0x330(0x28)
	struct UHierarchicalInstancedStaticMeshComponent* InstancedStaticMeshComponent; // 0x358(0x08)
	struct TArray<int32_t> RenderingIndicesToDataIndices; // 0x360(0x10)
	struct TArray<int32_t> DataIndicesToRenderingIndices; // 0x370(0x10)
	char pad_380[0x10]; // 0x380(0x10)

	void OnRep_StaticMesh(); // Function Engine.LightWeightInstanceStaticMeshManager.OnRep_StaticMesh // (Final|Native|Protected) // @ game+0x93160ac
};

// Class Engine.LineBatchComponent
// Size: 0x570 (Inherited: 0x530)
struct ULineBatchComponent : UPrimitiveComponent {
	char pad_530[0x40]; // 0x530(0x40)
};

// Class Engine.LocationVolume
// Size: 0x2d0 (Inherited: 0x2c0)
struct ALocationVolume : AVolume {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct FColor DebugColor; // 0x2c8(0x04)
	char bIsRuntime : 1; // 0x2cc(0x01)
	char pad_2CC_1 : 7; // 0x2cc(0x01)
	char pad_2CD[0x3]; // 0x2cd(0x03)

	void Unload(); // Function Engine.LocationVolume.Unload // (Final|Native|Public|BlueprintCallable) // @ game+0x24841e4
	void Load(); // Function Engine.LocationVolume.Load // (Final|Native|Public|BlueprintCallable) // @ game+0x24841e4
	bool IsLoaded(); // Function Engine.LocationVolume.IsLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22fb320
};

// Class Engine.LODActor
// Size: 0x310 (Inherited: 0x288)
struct ALODActor : AActor {
	struct UStaticMeshComponent* StaticMeshComponent; // 0x288(0x08)
	struct TMap<struct FHLODInstancingKey, struct UInstancedStaticMeshComponent*> InstancedStaticMeshComponents; // 0x290(0x50)
	struct UHLODProxy* Proxy; // 0x2e0(0x08)
	struct FName Key; // 0x2e8(0x04)
	float LODDrawDistance; // 0x2ec(0x04)
	int32_t LODLevel; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
	struct TArray<struct AActor*> SubActors; // 0x2f8(0x10)
	char CachedNumHLODLevels; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)

	void OnSubActorEndPlay(struct AActor* Actor, enum class EEndPlayReason Reason); // Function Engine.LODActor.OnSubActorEndPlay // (Final|Native|Private) // @ game+0x1e906c4
};

// Class Engine.LODSyncComponent
// Size: 0x138 (Inherited: 0xa0)
struct ULODSyncComponent : UActorComponent {
	int32_t NumLODs; // 0xa0(0x04)
	int32_t ForcedLOD; // 0xa4(0x04)
	int32_t MinLOD; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
	struct TArray<struct FComponentSync> ComponentsToSync; // 0xb0(0x10)
	struct TMap<struct FName, struct FLODMappingData> CustomLODMapping; // 0xc0(0x50)
	int32_t CurrentLOD; // 0x110(0x04)
	int32_t CurrentNumLODs; // 0x114(0x04)
	struct TArray<struct UPrimitiveComponent*> DriveComponents; // 0x118(0x10)
	struct TArray<struct UPrimitiveComponent*> SubComponents; // 0x128(0x10)

	struct FString GetLODSyncDebugText(); // Function Engine.LODSyncComponent.GetLODSyncDebugText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9315ed8
};

// Class Engine.LODSyncInterface
// Size: 0x28 (Inherited: 0x28)
struct ULODSyncInterface : UInterface {
};

// Class Engine.MapBuildDataRegistry
// Size: 0x238 (Inherited: 0x28)
struct UMapBuildDataRegistry : UObject {
	enum class ELightingBuildQuality LevelLightingQuality; // 0x28(0x01)
	char pad_29[0x20f]; // 0x29(0x20f)
};

// Class Engine.MaterialInterfaceEditorOnlyData
// Size: 0x40 (Inherited: 0x28)
struct UMaterialInterfaceEditorOnlyData : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class Engine.MaterialEditorOnlyData
// Size: 0x618 (Inherited: 0x40)
struct UMaterialEditorOnlyData : UMaterialInterfaceEditorOnlyData {
	struct FColorMaterialInput BaseColor; // 0x40(0x30)
	struct FScalarMaterialInput Metallic; // 0x70(0x30)
	struct FScalarMaterialInput Specular; // 0xa0(0x30)
	struct FScalarMaterialInput Roughness; // 0xd0(0x30)
	struct FScalarMaterialInput Anisotropy; // 0x100(0x30)
	struct FVectorMaterialInput Normal; // 0x130(0x38)
	struct FVectorMaterialInput Tangent; // 0x168(0x38)
	struct FColorMaterialInput EmissiveColor; // 0x1a0(0x30)
	struct FScalarMaterialInput Opacity; // 0x1d0(0x30)
	struct FScalarMaterialInput OpacityMask; // 0x200(0x30)
	struct FVectorMaterialInput WorldPositionOffset; // 0x230(0x38)
	struct FColorMaterialInput SubsurfaceColor; // 0x268(0x30)
	struct FScalarMaterialInput ClearCoat; // 0x298(0x30)
	struct FScalarMaterialInput ClearCoatRoughness; // 0x2c8(0x30)
	struct FScalarMaterialInput AmbientOcclusion; // 0x2f8(0x30)
	struct FScalarMaterialInput Refraction; // 0x328(0x30)
	struct FVector2MaterialInput CustomizedUVs[0x8]; // 0x358(0x1c0)
	struct FMaterialAttributesInput MaterialAttributes; // 0x518(0x30)
	struct FScalarMaterialInput PixelDepthOffset; // 0x548(0x30)
	struct FShadingModelMaterialInput ShadingModelFromMaterialExpression; // 0x578(0x28)
	char pad_5A0[0x8]; // 0x5a0(0x08)
	struct FStrataMaterialInput FrontMaterial; // 0x5a8(0x28)
	char pad_5D0[0x8]; // 0x5d0(0x08)
	struct FMaterialExpressionCollection ExpressionCollection; // 0x5d8(0x30)
	struct TArray<struct FParameterGroupData> ParameterGroupData; // 0x608(0x10)
};

// Class Engine.Material
// Size: 0x1b0 (Inherited: 0x98)
struct UMaterial : UMaterialInterface {
	struct UPhysicalMaterial* PhysMaterial; // 0x98(0x08)
	struct UPhysicalMaterialMask* PhysMaterialMask; // 0xa0(0x08)
	struct UPhysicalMaterial* PhysicalMaterialMap[0x8]; // 0xa8(0x40)
	struct TArray<struct UPhysicalMaterial*> RenderTracePhysicalMaterialOutputs; // 0xe8(0x10)
	enum class EMaterialDomain MaterialDomain; // 0xf8(0x01)
	enum class EBlendMode BlendMode; // 0xf9(0x01)
	enum class EStrataBlendMode StrataBlendMode; // 0xfa(0x01)
	enum class EDecalBlendMode DecalBlendMode; // 0xfb(0x01)
	enum class EMaterialDecalResponse MaterialDecalResponse; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	uint32_t CachedConnectedInputs; // 0x100(0x04)
	enum class EMaterialShadingModel ShadingModel; // 0x104(0x01)
	char bCastDynamicShadowAsMasked : 1; // 0x105(0x01)
	char pad_105_1 : 7; // 0x105(0x01)
	struct FMaterialShadingModelField ShadingModels; // 0x106(0x02)
	float OpacityMaskClipValue; // 0x108(0x04)
	char bEnableSeparateTranslucency : 1; // 0x10c(0x01)
	char bEnableResponsiveAA : 1; // 0x10c(0x01)
	char bScreenSpaceReflections : 1; // 0x10c(0x01)
	char bContactShadows : 1; // 0x10c(0x01)
	char TwoSided : 1; // 0x10c(0x01)
	char DitheredLODTransition : 1; // 0x10c(0x01)
	char DitherOpacityMask : 1; // 0x10c(0x01)
	char bAllowNegativeEmissiveColor : 1; // 0x10c(0x01)
	enum class EMaterialTranslucencyPass TranslucencyPass; // 0x10d(0x01)
	enum class ETranslucencyLightingMode TranslucencyLightingMode; // 0x10e(0x01)
	char bEnableMobileSeparateTranslucency : 1; // 0x10f(0x01)
	char pad_10F_1 : 7; // 0x10f(0x01)
	int32_t NumCustomizedUVs; // 0x110(0x04)
	float TranslucencyDirectionalLightingIntensity; // 0x114(0x04)
	float TranslucentShadowDensityScale; // 0x118(0x04)
	float TranslucentSelfShadowDensityScale; // 0x11c(0x04)
	float TranslucentSelfShadowSecondDensityScale; // 0x120(0x04)
	float TranslucentSelfShadowSecondOpacity; // 0x124(0x04)
	float TranslucentBackscatteringExponent; // 0x128(0x04)
	struct FLinearColor TranslucentMultipleScatteringExtinction; // 0x12c(0x10)
	float TranslucentShadowStartOffset; // 0x13c(0x04)
	char bDisableDepthTest : 1; // 0x140(0x01)
	char bWriteOnlyAlpha : 1; // 0x140(0x01)
	char bGenerateSphericalParticleNormals : 1; // 0x140(0x01)
	char bTangentSpaceNormal : 1; // 0x140(0x01)
	char bUseEmissiveForDynamicAreaLighting : 1; // 0x140(0x01)
	char bUsedAsSpecialEngineMaterial : 1; // 0x140(0x01)
	char bUsedWithSkeletalMesh : 1; // 0x140(0x01)
	char bUsedWithEditorCompositing : 1; // 0x140(0x01)
	char bUsedWithParticleSprites : 1; // 0x141(0x01)
	char bUsedWithBeamTrails : 1; // 0x141(0x01)
	char bUsedWithMeshParticles : 1; // 0x141(0x01)
	char bUsedWithNiagaraSprites : 1; // 0x141(0x01)
	char bUsedWithNiagaraRibbons : 1; // 0x141(0x01)
	char bUsedWithNiagaraMeshParticles : 1; // 0x141(0x01)
	char bUsedWithGeometryCache : 1; // 0x141(0x01)
	char bUsedWithStaticLighting : 1; // 0x141(0x01)
	char bUsedWithMorphTargets : 1; // 0x142(0x01)
	char bUsedWithSplineMeshes : 1; // 0x142(0x01)
	char bUsedWithInstancedStaticMeshes : 1; // 0x142(0x01)
	char bUsedWithGeometryCollections : 1; // 0x142(0x01)
	char bUsesDistortion : 1; // 0x142(0x01)
	char bUsedWithClothing : 1; // 0x142(0x01)
	char pad_142_6 : 2; // 0x142(0x01)
	char pad_143[0x1]; // 0x143(0x01)
	char bUsedWithWater : 1; // 0x144(0x01)
	char bUsedWithHairStrands : 1; // 0x144(0x01)
	char bUsedWithLidarPointCloud : 1; // 0x144(0x01)
	char bUsedWithVirtualHeightfieldMesh : 1; // 0x144(0x01)
	char bUsedWithNanite : 1; // 0x144(0x01)
	char pad_144_5 : 3; // 0x144(0x01)
	char pad_145[0x3]; // 0x145(0x03)
	char bUsedWithUI : 1; // 0x148(0x01)
	char bAutomaticallySetUsageInEditor : 1; // 0x148(0x01)
	char bFullyRough : 1; // 0x148(0x01)
	char bUseFullPrecision : 1; // 0x148(0x01)
	char pad_148_4 : 4; // 0x148(0x01)
	enum class EMaterialFloatPrecisionMode FloatPrecisionMode; // 0x149(0x01)
	char bUseLightmapDirectionality : 1; // 0x14a(0x01)
	char bMobileEnableHighQualityBRDF : 1; // 0x14a(0x01)
	char bUseAlphaToCoverage : 1; // 0x14a(0x01)
	char pad_14A_3 : 5; // 0x14a(0x01)
	char pad_14B[0x1]; // 0x14b(0x01)
	char bForwardRenderUsePreintegratedGFForSimpleIBL : 1; // 0x14c(0x01)
	char pad_14C_1 : 7; // 0x14c(0x01)
	char pad_14D[0x3]; // 0x14d(0x03)
	char bUseHQForwardReflections : 1; // 0x150(0x01)
	char bForwardBlendsSkyLightCubemaps : 1; // 0x150(0x01)
	char bUsePlanarForwardReflections : 1; // 0x150(0x01)
	char bNormalCurvatureToRoughness : 1; // 0x150(0x01)
	char AllowTranslucentCustomDepthWrites : 1; // 0x150(0x01)
	char Wireframe : 1; // 0x150(0x01)
	char pad_150_6 : 2; // 0x150(0x01)
	enum class EMaterialShadingRate ShadingRate; // 0x151(0x01)
	char bCanMaskedBeAssumedOpaque : 1; // 0x152(0x01)
	char bIsMasked : 1; // 0x152(0x01)
	char bIsPreviewMaterial : 1; // 0x152(0x01)
	char bIsFunctionPreviewMaterial : 1; // 0x152(0x01)
	char bUseMaterialAttributes : 1; // 0x152(0x01)
	char bEnableExecWire : 1; // 0x152(0x01)
	char bEnableNewHLSLGenerator : 1; // 0x152(0x01)
	char bCastRayTracedShadows : 1; // 0x152(0x01)
	char bUseTranslucencyVertexFog : 1; // 0x153(0x01)
	char bApplyCloudFogging : 1; // 0x153(0x01)
	char bIsSky : 1; // 0x153(0x01)
	char bComputeFogPerPixel : 1; // 0x153(0x01)
	char bOutputTranslucentVelocity : 1; // 0x153(0x01)
	char bAllowDevelopmentShaderCompile : 1; // 0x153(0x01)
	char bIsMaterialEditorStatsMaterial : 1; // 0x153(0x01)
	char pad_153_7 : 1; // 0x153(0x01)
	enum class EBlendableLocation BlendableLocation; // 0x154(0x01)
	char BlendableOutputAlpha : 1; // 0x155(0x01)
	char bEnableStencilTest : 1; // 0x155(0x01)
	char pad_155_2 : 6; // 0x155(0x01)
	enum class EMaterialStencilCompare StencilCompare; // 0x156(0x01)
	char StencilRefValue; // 0x157(0x01)
	enum class ERefractionMode RefractionMode; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	int32_t BlendablePriority; // 0x15c(0x04)
	char bIsBlendable : 1; // 0x160(0x01)
	char pad_160_1 : 7; // 0x160(0x01)
	char pad_161[0x3]; // 0x161(0x03)
	uint32_t UsageFlagWarnings; // 0x164(0x04)
	float RefractionDepthBias; // 0x168(0x04)
	struct FGuid StateId; // 0x16c(0x10)
	char pad_17C[0x34]; // 0x17c(0x34)
};

// Class Engine.MaterialBillboardComponent
// Size: 0x540 (Inherited: 0x530)
struct UMaterialBillboardComponent : UPrimitiveComponent {
	struct TArray<struct FMaterialSpriteElement> Elements; // 0x530(0x10)

	void SetElements(struct TArray<struct FMaterialSpriteElement>& NewElements); // Function Engine.MaterialBillboardComponent.SetElements // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9317924
	void AddElement(struct UMaterialInterface* Material, struct UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, struct UCurveFloat* DistanceToSizeCurve); // Function Engine.MaterialBillboardComponent.AddElement // (Final|Native|Public|BlueprintCallable) // @ game+0x9317748
};

// Class Engine.MaterialExpressionAbs
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionAbs : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionAbsorptionMediumMaterialOutput
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionAbsorptionMediumMaterialOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput TransmittanceColor; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionActorPositionWS
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionActorPositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionAdd
// Size: 0x108 (Inherited: 0xb0)
struct UMaterialExpressionAdd : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
	float ConstA; // 0x100(0x04)
	float ConstB; // 0x104(0x04)
};

// Class Engine.MaterialExpressionAntialiasedTextureMask
// Size: 0x240 (Inherited: 0x238)
struct UMaterialExpressionAntialiasedTextureMask : UMaterialExpressionTextureSampleParameter2D {
	float Threshold; // 0x238(0x04)
	enum class ETextureColorChannel Channel; // 0x23c(0x01)
	char pad_23D[0x3]; // 0x23d(0x03)
};

// Class Engine.MaterialExpressionAppendVector
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionAppendVector : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionArccosine
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionArccosine : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionArccosineFast
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionArccosineFast : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionArcsine
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionArcsine : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionArcsineFast
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionArcsineFast : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionArctangent
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionArctangent : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionArctangent2
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionArctangent2 : UMaterialExpression {
	struct FExpressionInput Y; // 0xb0(0x28)
	struct FExpressionInput X; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionArctangent2Fast
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionArctangent2Fast : UMaterialExpression {
	struct FExpressionInput Y; // 0xb0(0x28)
	struct FExpressionInput X; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionArctangentFast
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionArctangentFast : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionAtmosphericFogColor
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionAtmosphericFogColor : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionAtmosphericLightColor
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionAtmosphericLightColor : UMaterialExpression {
};

// Class Engine.MaterialExpressionAtmosphericLightVector
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionAtmosphericLightVector : UMaterialExpression {
};

// Class Engine.MaterialExpressionBentNormalCustomOutput
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionBentNormalCustomOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionBinaryOp
// Size: 0x108 (Inherited: 0xb0)
struct UMaterialExpressionBinaryOp : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
	float ConstA; // 0x100(0x04)
	float ConstB; // 0x104(0x04)
};

// Class Engine.MaterialExpressionLess
// Size: 0x108 (Inherited: 0x108)
struct UMaterialExpressionLess : UMaterialExpressionBinaryOp {
};

// Class Engine.MaterialExpressionBlackBody
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionBlackBody : UMaterialExpression {
	struct FExpressionInput Temp; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionBlendMaterialAttributes
// Size: 0x140 (Inherited: 0xb0)
struct UMaterialExpressionBlendMaterialAttributes : UMaterialExpression {
	struct FMaterialAttributesInput A; // 0xb0(0x30)
	struct FMaterialAttributesInput B; // 0xe0(0x30)
	struct FExpressionInput Alpha; // 0x110(0x28)
	enum class EMaterialAttributeBlend PixelAttributeBlendType; // 0x138(0x01)
	enum class EMaterialAttributeBlend VertexAttributeBlendType; // 0x139(0x01)
	char pad_13A[0x6]; // 0x13a(0x06)
};

// Class Engine.MaterialExpressionBreakMaterialAttributes
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionBreakMaterialAttributes : UMaterialExpression {
	struct FMaterialAttributesInput MaterialAttributes; // 0xb0(0x30)
};

// Class Engine.MaterialExpressionBumpOffset
// Size: 0x138 (Inherited: 0xb0)
struct UMaterialExpressionBumpOffset : UMaterialExpression {
	struct FExpressionInput Coordinate; // 0xb0(0x28)
	struct FExpressionInput Height; // 0xd8(0x28)
	struct FExpressionInput HeightRatioInput; // 0x100(0x28)
	float HeightRatio; // 0x128(0x04)
	float ReferencePlane; // 0x12c(0x04)
	uint32_t ConstCoordinate; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
};

// Class Engine.MaterialExpressionCameraPositionWS
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionCameraPositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionCameraVectorWS
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionCameraVectorWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionCeil
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionCeil : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionParameter
// Size: 0xd0 (Inherited: 0xb0)
struct UMaterialExpressionParameter : UMaterialExpression {
	struct FName ParameterName; // 0xb0(0x04)
	struct FGuid ExpressionGUID; // 0xb4(0x10)
	struct FName Group; // 0xc4(0x04)
	int32_t SortPriority; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
};

// Class Engine.MaterialExpressionVectorParameter
// Size: 0x148 (Inherited: 0xd0)
struct UMaterialExpressionVectorParameter : UMaterialExpressionParameter {
	struct FLinearColor DefaultValue; // 0xd0(0x10)
	bool bUseCustomPrimitiveData; // 0xe0(0x01)
	char PrimitiveDataIndex; // 0xe1(0x01)
	char pad_E2[0x6]; // 0xe2(0x06)
	struct FParameterChannelNames ChannelNames; // 0xe8(0x60)
};

// Class Engine.MaterialExpressionChannelMaskParameter
// Size: 0x178 (Inherited: 0x148)
struct UMaterialExpressionChannelMaskParameter : UMaterialExpressionVectorParameter {
	enum class EChannelMaskParameterColor MaskChannel; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
	struct FExpressionInput Input; // 0x150(0x28)
};

// Class Engine.MaterialExpressionClamp
// Size: 0x138 (Inherited: 0xb0)
struct UMaterialExpressionClamp : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
	struct FExpressionInput min; // 0xd8(0x28)
	struct FExpressionInput max; // 0x100(0x28)
	enum class EClampMode ClampMode; // 0x128(0x01)
	char pad_129[0x3]; // 0x129(0x03)
	float MinDefault; // 0x12c(0x04)
	float MaxDefault; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
};

// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionClearCoatNormalCustomOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionCloudSampleAttribute
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionCloudSampleAttribute : UMaterialExpression {
};

// Class Engine.MaterialExpressionCollectionParameter
// Size: 0xd0 (Inherited: 0xb0)
struct UMaterialExpressionCollectionParameter : UMaterialExpression {
	struct UMaterialParameterCollection* Collection; // 0xb0(0x08)
	struct FName ParameterName; // 0xb8(0x04)
	struct FGuid ParameterId; // 0xbc(0x10)
	char pad_CC[0x4]; // 0xcc(0x04)
};

// Class Engine.MaterialExpressionComment
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionComment : UMaterialExpression {
	int32_t SizeX; // 0xb0(0x04)
	int32_t SizeY; // 0xb4(0x04)
	struct FString Text; // 0xb8(0x10)
	struct FLinearColor CommentColor; // 0xc8(0x10)
	int32_t FontSize; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
};

// Class Engine.MaterialExpressionComponentMask
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionComponentMask : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
	char R : 1; // 0xd8(0x01)
	char G : 1; // 0xd8(0x01)
	char B : 1; // 0xd8(0x01)
	char A : 1; // 0xd8(0x01)
	char pad_D8_4 : 4; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
};

// Class Engine.MaterialExpressionComposite
// Size: 0xd0 (Inherited: 0xb0)
struct UMaterialExpressionComposite : UMaterialExpression {
	struct FString SubgraphName; // 0xb0(0x10)
	struct UMaterialExpressionPinBase* InputExpressions; // 0xc0(0x08)
	struct UMaterialExpressionPinBase* OutputExpressions; // 0xc8(0x08)
};

// Class Engine.MaterialExpressionConstant
// Size: 0xb8 (Inherited: 0xb0)
struct UMaterialExpressionConstant : UMaterialExpression {
	float R; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class Engine.MaterialExpressionConstant2Vector
// Size: 0xb8 (Inherited: 0xb0)
struct UMaterialExpressionConstant2Vector : UMaterialExpression {
	float R; // 0xb0(0x04)
	float G; // 0xb4(0x04)
};

// Class Engine.MaterialExpressionConstant3Vector
// Size: 0xc0 (Inherited: 0xb0)
struct UMaterialExpressionConstant3Vector : UMaterialExpression {
	struct FLinearColor Constant; // 0xb0(0x10)
};

// Class Engine.MaterialExpressionConstant4Vector
// Size: 0xc0 (Inherited: 0xb0)
struct UMaterialExpressionConstant4Vector : UMaterialExpression {
	struct FLinearColor Constant; // 0xb0(0x10)
};

// Class Engine.MaterialExpressionConstantBiasScale
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionConstantBiasScale : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
	float Bias; // 0xd8(0x04)
	float Scale; // 0xdc(0x04)
};

// Class Engine.MaterialExpressionCosine
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionCosine : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
	float Period; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
};

// Class Engine.MaterialExpressionCrossProduct
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionCrossProduct : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionScalarParameter
// Size: 0xe0 (Inherited: 0xd0)
struct UMaterialExpressionScalarParameter : UMaterialExpressionParameter {
	float DefaultValue; // 0xd0(0x04)
	bool bUseCustomPrimitiveData; // 0xd4(0x01)
	char PrimitiveDataIndex; // 0xd5(0x01)
	char pad_D6[0x2]; // 0xd6(0x02)
	float SliderMin; // 0xd8(0x04)
	float SliderMax; // 0xdc(0x04)
};

// Class Engine.MaterialExpressionCurveAtlasRowParameter
// Size: 0x118 (Inherited: 0xe0)
struct UMaterialExpressionCurveAtlasRowParameter : UMaterialExpressionScalarParameter {
	struct UCurveLinearColor* Curve; // 0xe0(0x08)
	struct UCurveLinearColorAtlas* Atlas; // 0xe8(0x08)
	struct FExpressionInput InputTime; // 0xf0(0x28)
};

// Class Engine.MaterialExpressionCustom
// Size: 0x118 (Inherited: 0xb0)
struct UMaterialExpressionCustom : UMaterialExpression {
	struct FString Code; // 0xb0(0x10)
	enum class ECustomMaterialOutputType OutputType; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
	struct FString Description; // 0xc8(0x10)
	struct TArray<struct FCustomInput> Inputs; // 0xd8(0x10)
	struct TArray<struct FCustomOutput> AdditionalOutputs; // 0xe8(0x10)
	struct TArray<struct FCustomDefine> AdditionalDefines; // 0xf8(0x10)
	struct TArray<struct FString> IncludeFilePaths; // 0x108(0x10)
};

// Class Engine.MaterialExpressionDBufferTexture
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionDBufferTexture : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0xb0(0x28)
	enum class EDBufferTextureId DBufferTextureId; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
};

// Class Engine.MaterialExpressionDDX
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionDDX : UMaterialExpression {
	struct FExpressionInput Value; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionDDY
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionDDY : UMaterialExpression {
	struct FExpressionInput Value; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionDecalDerivative
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionDecalDerivative : UMaterialExpression {
};

// Class Engine.MaterialExpressionDecalLifetimeOpacity
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionDecalLifetimeOpacity : UMaterialExpression {
};

// Class Engine.MaterialExpressionDecalMipmapLevel
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionDecalMipmapLevel : UMaterialExpression {
	struct FExpressionInput TextureSize; // 0xb0(0x28)
	float ConstWidth; // 0xd8(0x04)
	float ConstHeight; // 0xdc(0x04)
};

// Class Engine.MaterialExpressionDeltaTime
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionDeltaTime : UMaterialExpression {
};

// Class Engine.MaterialExpressionDepthFade
// Size: 0x108 (Inherited: 0xb0)
struct UMaterialExpressionDepthFade : UMaterialExpression {
	struct FExpressionInput InOpacity; // 0xb0(0x28)
	struct FExpressionInput FadeDistance; // 0xd8(0x28)
	float OpacityDefault; // 0x100(0x04)
	float FadeDistanceDefault; // 0x104(0x04)
};

// Class Engine.MaterialExpressionDepthOfFieldFunction
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionDepthOfFieldFunction : UMaterialExpression {
	enum class EDepthOfFieldFunctionValue FunctionValue; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct FExpressionInput Depth; // 0xb8(0x28)
};

// Class Engine.MaterialExpressionDeriveNormalZ
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionDeriveNormalZ : UMaterialExpression {
	struct FExpressionInput InXY; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionDesaturation
// Size: 0x110 (Inherited: 0xb0)
struct UMaterialExpressionDesaturation : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
	struct FExpressionInput Fraction; // 0xd8(0x28)
	struct FLinearColor LuminanceFactors; // 0x100(0x10)
};

// Class Engine.MaterialExpressionDistance
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionDistance : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionDistanceCullFade
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionDistanceCullFade : UMaterialExpression {
};

// Class Engine.MaterialExpressionDistanceFieldApproxAO
// Size: 0x168 (Inherited: 0xb0)
struct UMaterialExpressionDistanceFieldApproxAO : UMaterialExpression {
	struct FExpressionInput Position; // 0xb0(0x28)
	struct FExpressionInput Normal; // 0xd8(0x28)
	struct FExpressionInput BaseDistance; // 0x100(0x28)
	float BaseDistanceDefault; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct FExpressionInput Radius; // 0x130(0x28)
	float RadiusDefault; // 0x158(0x04)
	uint32_t NumSteps; // 0x15c(0x04)
	float StepScaleDefault; // 0x160(0x04)
	char pad_164[0x4]; // 0x164(0x04)
};

// Class Engine.MaterialExpressionDistanceFieldGradient
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionDistanceFieldGradient : UMaterialExpression {
	struct FExpressionInput Position; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionDistanceFieldsRenderingSwitch
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionDistanceFieldsRenderingSwitch : UMaterialExpression {
	struct FExpressionInput No; // 0xb0(0x28)
	struct FExpressionInput Yes; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionDistanceToNearestSurface
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionDistanceToNearestSurface : UMaterialExpression {
	struct FExpressionInput Position; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionDivide
// Size: 0x108 (Inherited: 0xb0)
struct UMaterialExpressionDivide : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
	float ConstA; // 0x100(0x04)
	float ConstB; // 0x104(0x04)
};

// Class Engine.MaterialExpressionDotProduct
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionDotProduct : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionDoubleVectorParameter
// Size: 0xf0 (Inherited: 0xd0)
struct UMaterialExpressionDoubleVectorParameter : UMaterialExpressionParameter {
	struct FVector4d DefaultValue; // 0xd0(0x20)
};

// Class Engine.MaterialExpressionDynamicParameter
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionDynamicParameter : UMaterialExpression {
	struct TArray<struct FString> ParamNames; // 0xb0(0x10)
	struct FLinearColor DefaultValue; // 0xc0(0x10)
	uint32_t ParameterIndex; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
};

// Class Engine.MaterialExpressionExecBegin
// Size: 0xb8 (Inherited: 0xb0)
struct UMaterialExpressionExecBegin : UMaterialExpression {
	struct FExpressionExecOutput Exec; // 0xb0(0x08)
};

// Class Engine.MaterialExpressionExecEnd
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionExecEnd : UMaterialExpression {
};

// Class Engine.MaterialExpressionEyeAdaptation
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionEyeAdaptation : UMaterialExpression {
};

// Class Engine.MaterialExpressionEyeAdaptationInverse
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionEyeAdaptationInverse : UMaterialExpression {
	struct FExpressionInput LightValueInput; // 0xb0(0x28)
	struct FExpressionInput AlphaInput; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionFeatureLevelSwitch
// Size: 0x1a0 (Inherited: 0xb0)
struct UMaterialExpressionFeatureLevelSwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0xb0(0x28)
	struct FExpressionInput Inputs[0x5]; // 0xd8(0xc8)
};

// Class Engine.MaterialExpressionFloor
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionFloor : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionFmod
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionFmod : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionFontSample
// Size: 0xc0 (Inherited: 0xb0)
struct UMaterialExpressionFontSample : UMaterialExpression {
	struct UFont* Font; // 0xb0(0x08)
	int32_t FontTexturePage; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
};

// Class Engine.MaterialExpressionFontSampleParameter
// Size: 0xe0 (Inherited: 0xc0)
struct UMaterialExpressionFontSampleParameter : UMaterialExpressionFontSample {
	struct FName ParameterName; // 0xc0(0x04)
	struct FGuid ExpressionGUID; // 0xc4(0x10)
	struct FName Group; // 0xd4(0x04)
	int32_t SortPriority; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
};

// Class Engine.MaterialExpressionForLoop
// Size: 0x138 (Inherited: 0xb0)
struct UMaterialExpressionForLoop : UMaterialExpression {
	struct FExpressionExecOutput LoopBody; // 0xb0(0x08)
	struct FExpressionExecOutput Completed; // 0xb8(0x08)
	struct FExpressionInput StartIndex; // 0xc0(0x28)
	struct FExpressionInput EndIndex; // 0xe8(0x28)
	struct FExpressionInput IndexStep; // 0x110(0x28)
};

// Class Engine.MaterialExpressionFrac
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionFrac : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionFresnel
// Size: 0x138 (Inherited: 0xb0)
struct UMaterialExpressionFresnel : UMaterialExpression {
	struct FExpressionInput ExponentIn; // 0xb0(0x28)
	float Exponent; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
	struct FExpressionInput BaseReflectFractionIn; // 0xe0(0x28)
	float BaseReflectFraction; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct FExpressionInput Normal; // 0x110(0x28)
};

// Class Engine.MaterialExpressionFunctionInput
// Size: 0x170 (Inherited: 0xb0)
struct UMaterialExpressionFunctionInput : UMaterialExpression {
	struct FExpressionInput Preview; // 0xb0(0x28)
	struct FName InputName; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
	struct FString Description; // 0xe0(0x10)
	struct FGuid ID; // 0xf0(0x10)
	enum class EFunctionInputType InputType; // 0x100(0x01)
	char pad_101[0xf]; // 0x101(0x0f)
	struct FVector4 PreviewValue; // 0x110(0x20)
	char bUsePreviewValueAsDefault : 1; // 0x130(0x01)
	char pad_130_1 : 7; // 0x130(0x01)
	char pad_131[0x3]; // 0x131(0x03)
	int32_t SortPriority; // 0x134(0x04)
	char bCompilingFunctionPreview : 1; // 0x138(0x01)
	char pad_138_1 : 7; // 0x138(0x01)
	char pad_139[0x37]; // 0x139(0x37)
};

// Class Engine.MaterialExpressionFunctionOutput
// Size: 0x110 (Inherited: 0xb0)
struct UMaterialExpressionFunctionOutput : UMaterialExpression {
	struct FName OutputName; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct FString Description; // 0xb8(0x10)
	int32_t SortPriority; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct FExpressionInput A; // 0xd0(0x28)
	char bLastPreviewed : 1; // 0xf8(0x01)
	char pad_F8_1 : 7; // 0xf8(0x01)
	char pad_F9[0x3]; // 0xf9(0x03)
	struct FGuid ID; // 0xfc(0x10)
	char pad_10C[0x4]; // 0x10c(0x04)
};

// Class Engine.MaterialExpressionGenericConstant
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionGenericConstant : UMaterialExpression {
};

// Class Engine.MaterialExpressionConstantDouble
// Size: 0xb8 (Inherited: 0xb0)
struct UMaterialExpressionConstantDouble : UMaterialExpressionGenericConstant {
	double Value; // 0xb0(0x08)
};

// Class Engine.MaterialExpressionGetLocal
// Size: 0xb8 (Inherited: 0xb0)
struct UMaterialExpressionGetLocal : UMaterialExpression {
	struct FName LocalName; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class Engine.MaterialExpressionGetMaterialAttributes
// Size: 0xf0 (Inherited: 0xb0)
struct UMaterialExpressionGetMaterialAttributes : UMaterialExpression {
	struct FMaterialAttributesInput MaterialAttributes; // 0xb0(0x30)
	struct TArray<struct FGuid> AttributeGetTypes; // 0xe0(0x10)
};

// Class Engine.MaterialExpressionGIReplace
// Size: 0x128 (Inherited: 0xb0)
struct UMaterialExpressionGIReplace : UMaterialExpression {
	struct FExpressionInput Default; // 0xb0(0x28)
	struct FExpressionInput StaticIndirect; // 0xd8(0x28)
	struct FExpressionInput DynamicIndirect; // 0x100(0x28)
};

// Class Engine.MaterialExpressionHairAttributes
// Size: 0xb8 (Inherited: 0xb0)
struct UMaterialExpressionHairAttributes : UMaterialExpression {
	char bUseTangentSpace : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
};

// Class Engine.MaterialExpressionHairColor
// Size: 0x128 (Inherited: 0xb0)
struct UMaterialExpressionHairColor : UMaterialExpression {
	struct FExpressionInput Melanin; // 0xb0(0x28)
	struct FExpressionInput Redness; // 0xd8(0x28)
	struct FExpressionInput DyeColor; // 0x100(0x28)
};

// Class Engine.MaterialExpressionIf
// Size: 0x188 (Inherited: 0xb0)
struct UMaterialExpressionIf : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
	struct FExpressionInput AGreaterThanB; // 0x100(0x28)
	struct FExpressionInput AEqualsB; // 0x128(0x28)
	struct FExpressionInput ALessThanB; // 0x150(0x28)
	float EqualsThreshold; // 0x178(0x04)
	float ConstB; // 0x17c(0x04)
	float ConstAEqualsB; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
};

// Class Engine.MaterialExpressionIfThenElse
// Size: 0xe8 (Inherited: 0xb0)
struct UMaterialExpressionIfThenElse : UMaterialExpression {
	struct FExpressionExecOutput Then; // 0xb0(0x08)
	struct FExpressionExecOutput Else; // 0xb8(0x08)
	struct FExpressionInput Condition; // 0xc0(0x28)
};

// Class Engine.MaterialExpressionInverseLinearInterpolate
// Size: 0x138 (Inherited: 0xb0)
struct UMaterialExpressionInverseLinearInterpolate : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
	struct FExpressionInput Value; // 0x100(0x28)
	float ConstA; // 0x128(0x04)
	float ConstB; // 0x12c(0x04)
	float ConstValue; // 0x130(0x04)
	bool bClampResult; // 0x134(0x01)
	char pad_135[0x3]; // 0x135(0x03)
};

// Class Engine.MaterialExpressionLightmapUVs
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionLightmapUVs : UMaterialExpression {
};

// Class Engine.MaterialExpressionLightmassReplace
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionLightmassReplace : UMaterialExpression {
	struct FExpressionInput Realtime; // 0xb0(0x28)
	struct FExpressionInput Lightmass; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionLightVector
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionLightVector : UMaterialExpression {
};

// Class Engine.MaterialExpressionLinearInterpolate
// Size: 0x138 (Inherited: 0xb0)
struct UMaterialExpressionLinearInterpolate : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
	struct FExpressionInput Alpha; // 0x100(0x28)
	float ConstA; // 0x128(0x04)
	float ConstB; // 0x12c(0x04)
	float ConstAlpha; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
};

// Class Engine.MaterialExpressionLogarithm10
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionLogarithm10 : UMaterialExpression {
	struct FExpressionInput X; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionLogarithm2
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionLogarithm2 : UMaterialExpression {
	struct FExpressionInput X; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionMakeMaterialAttributes
// Size: 0x4c0 (Inherited: 0xb0)
struct UMaterialExpressionMakeMaterialAttributes : UMaterialExpression {
	struct FExpressionInput BaseColor; // 0xb0(0x28)
	struct FExpressionInput Metallic; // 0xd8(0x28)
	struct FExpressionInput Specular; // 0x100(0x28)
	struct FExpressionInput Roughness; // 0x128(0x28)
	struct FExpressionInput Anisotropy; // 0x150(0x28)
	struct FExpressionInput EmissiveColor; // 0x178(0x28)
	struct FExpressionInput Opacity; // 0x1a0(0x28)
	struct FExpressionInput OpacityMask; // 0x1c8(0x28)
	struct FExpressionInput Normal; // 0x1f0(0x28)
	struct FExpressionInput Tangent; // 0x218(0x28)
	struct FExpressionInput WorldPositionOffset; // 0x240(0x28)
	struct FExpressionInput SubsurfaceColor; // 0x268(0x28)
	struct FExpressionInput ClearCoat; // 0x290(0x28)
	struct FExpressionInput ClearCoatRoughness; // 0x2b8(0x28)
	struct FExpressionInput AmbientOcclusion; // 0x2e0(0x28)
	struct FExpressionInput Refraction; // 0x308(0x28)
	struct FExpressionInput CustomizedUVs[0x8]; // 0x330(0x140)
	struct FExpressionInput PixelDepthOffset; // 0x470(0x28)
	struct FExpressionInput ShadingModel; // 0x498(0x28)
};

// Class Engine.MaterialExpressionMapARPassthroughCameraUV
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionMapARPassthroughCameraUV : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionMaterialAttributeLayers
// Size: 0x218 (Inherited: 0xb0)
struct UMaterialExpressionMaterialAttributeLayers : UMaterialExpression {
	struct FMaterialAttributesInput Input; // 0xb0(0x30)
	struct FMaterialLayersFunctions DefaultLayers; // 0xe0(0x100)
	struct TArray<struct UMaterialExpressionMaterialFunctionCall*> LayerCallers; // 0x1e0(0x10)
	int32_t NumActiveLayerCallers; // 0x1f0(0x04)
	char pad_1F4[0x4]; // 0x1f4(0x04)
	struct TArray<struct UMaterialExpressionMaterialFunctionCall*> BlendCallers; // 0x1f8(0x10)
	int32_t NumActiveBlendCallers; // 0x208(0x04)
	bool bIsLayerGraphBuilt; // 0x20c(0x01)
	char pad_20D[0xb]; // 0x20d(0x0b)
};

// Class Engine.MaterialExpressionMaterialFunctionCall
// Size: 0xe8 (Inherited: 0xb0)
struct UMaterialExpressionMaterialFunctionCall : UMaterialExpression {
	struct UMaterialFunctionInterface* MaterialFunction; // 0xb0(0x08)
	struct TArray<struct FFunctionExpressionInput> FunctionInputs; // 0xb8(0x10)
	struct TArray<struct FFunctionExpressionOutput> FunctionOutputs; // 0xc8(0x10)
	struct FMaterialParameterInfo FunctionParameterInfo; // 0xd8(0x0c)
	char pad_E4[0x4]; // 0xe4(0x04)
};

// Class Engine.MaterialExpressionMaterialLayerOutput
// Size: 0x110 (Inherited: 0x110)
struct UMaterialExpressionMaterialLayerOutput : UMaterialExpressionFunctionOutput {
};

// Class Engine.MaterialExpressionMaterialProxyReplace
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionMaterialProxyReplace : UMaterialExpression {
	struct FExpressionInput Realtime; // 0xb0(0x28)
	struct FExpressionInput MaterialProxy; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionMax
// Size: 0x108 (Inherited: 0xb0)
struct UMaterialExpressionMax : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
	float ConstA; // 0x100(0x04)
	float ConstB; // 0x104(0x04)
};

// Class Engine.MaterialExpressionMin
// Size: 0x108 (Inherited: 0xb0)
struct UMaterialExpressionMin : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
	float ConstA; // 0x100(0x04)
	float ConstB; // 0x104(0x04)
};

// Class Engine.MaterialExpressionMultiply
// Size: 0x108 (Inherited: 0xb0)
struct UMaterialExpressionMultiply : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
	float ConstA; // 0x100(0x04)
	float ConstB; // 0x104(0x04)
};

// Class Engine.MaterialExpressionRerouteBase
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionRerouteBase : UMaterialExpression {
};

// Class Engine.MaterialExpressionNamedRerouteBase
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionNamedRerouteBase : UMaterialExpressionRerouteBase {
};

// Class Engine.MaterialExpressionNamedRerouteDeclaration
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionNamedRerouteDeclaration : UMaterialExpressionNamedRerouteBase {
	struct FExpressionInput Input; // 0xb0(0x28)
	struct FName Name; // 0xd8(0x04)
	struct FLinearColor NodeColor; // 0xdc(0x10)
	struct FGuid VariableGuid; // 0xec(0x10)
	char pad_FC[0x4]; // 0xfc(0x04)
};

// Class Engine.MaterialExpressionNamedRerouteUsage
// Size: 0xc8 (Inherited: 0xb0)
struct UMaterialExpressionNamedRerouteUsage : UMaterialExpressionNamedRerouteBase {
	struct UMaterialExpressionNamedRerouteDeclaration* Declaration; // 0xb0(0x08)
	struct FGuid DeclarationGuid; // 0xb8(0x10)
};

// Class Engine.MaterialExpressionNaniteReplace
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionNaniteReplace : UMaterialExpression {
	struct FExpressionInput Default; // 0xb0(0x28)
	struct FExpressionInput Nanite; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionNoise
// Size: 0x128 (Inherited: 0xb0)
struct UMaterialExpressionNoise : UMaterialExpression {
	struct FExpressionInput Position; // 0xb0(0x28)
	struct FExpressionInput FilterWidth; // 0xd8(0x28)
	float Scale; // 0x100(0x04)
	int32_t Quality; // 0x104(0x04)
	enum class ENoiseFunction NoiseFunction; // 0x108(0x01)
	char pad_109[0x3]; // 0x109(0x03)
	char bTurbulence : 1; // 0x10c(0x01)
	char pad_10C_1 : 7; // 0x10c(0x01)
	char pad_10D[0x3]; // 0x10d(0x03)
	int32_t Levels; // 0x110(0x04)
	float OutputMin; // 0x114(0x04)
	float OutputMax; // 0x118(0x04)
	float LevelScale; // 0x11c(0x04)
	char bTiling : 1; // 0x120(0x01)
	char pad_120_1 : 7; // 0x120(0x01)
	char pad_121[0x3]; // 0x121(0x03)
	uint32_t RepeatSize; // 0x124(0x04)
};

// Class Engine.MaterialExpressionNormalize
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionNormalize : UMaterialExpression {
	struct FExpressionInput VectorInput; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionObjectBounds
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionObjectBounds : UMaterialExpression {
};

// Class Engine.MaterialExpressionObjectOrientation
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionObjectOrientation : UMaterialExpression {
};

// Class Engine.MaterialExpressionObjectPositionWS
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionObjectPositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionObjectRadius
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionObjectRadius : UMaterialExpression {
};

// Class Engine.MaterialExpressionOneMinus
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionOneMinus : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionPanner
// Size: 0x138 (Inherited: 0xb0)
struct UMaterialExpressionPanner : UMaterialExpression {
	struct FExpressionInput Coordinate; // 0xb0(0x28)
	struct FExpressionInput Time; // 0xd8(0x28)
	struct FExpressionInput Speed; // 0x100(0x28)
	float SpeedX; // 0x128(0x04)
	float SpeedY; // 0x12c(0x04)
	uint32_t ConstCoordinate; // 0x130(0x04)
	bool bFractionalPart; // 0x134(0x01)
	char pad_135[0x3]; // 0x135(0x03)
};

// Class Engine.MaterialExpressionParticleColor
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionParticleColor : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleDirection
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionParticleDirection : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleMacroUV
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionParticleMacroUV : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleMotionBlurFade
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionParticleMotionBlurFade : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticlePositionWS
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionParticlePositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleRadius
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionParticleRadius : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleRandom
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionParticleRandom : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleRelativeTime
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionParticleRelativeTime : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleSize
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionParticleSize : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleSpeed
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionParticleSpeed : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleSubUV
// Size: 0x1c0 (Inherited: 0x1b8)
struct UMaterialExpressionParticleSubUV : UMaterialExpressionTextureSample {
	char bBlend : 1; // 0x1b8(0x01)
	char pad_1B8_1 : 7; // 0x1b8(0x01)
	char pad_1B9[0x7]; // 0x1b9(0x07)
};

// Class Engine.MaterialExpressionParticleSubUVProperties
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionParticleSubUVProperties : UMaterialExpression {
};

// Class Engine.MaterialExpressionPathTracingQualitySwitch
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionPathTracingQualitySwitch : UMaterialExpression {
	struct FExpressionInput Normal; // 0xb0(0x28)
	struct FExpressionInput PathTraced; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionPerInstanceCustomData
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionPerInstanceCustomData : UMaterialExpression {
	struct FExpressionInput DefaultValue; // 0xb0(0x28)
	float ConstDefaultValue; // 0xd8(0x04)
	uint32_t DataIndex; // 0xdc(0x04)
};

// Class Engine.MaterialExpressionPerInstanceCustomData3Vector
// Size: 0xf0 (Inherited: 0xb0)
struct UMaterialExpressionPerInstanceCustomData3Vector : UMaterialExpression {
	struct FExpressionInput DefaultValue; // 0xb0(0x28)
	struct FLinearColor ConstDefaultValue; // 0xd8(0x10)
	uint32_t DataIndex; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
};

// Class Engine.MaterialExpressionPerInstanceFadeAmount
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionPerInstanceFadeAmount : UMaterialExpression {
};

// Class Engine.MaterialExpressionPerInstanceRandom
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionPerInstanceRandom : UMaterialExpression {
};

// Class Engine.MaterialExpressionPinBase
// Size: 0xc8 (Inherited: 0xb0)
struct UMaterialExpressionPinBase : UMaterialExpression {
	struct TArray<struct FCompositeReroute> ReroutePins; // 0xb0(0x10)
	enum class EEdGraphPinDirection PinDirection; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
};

// Class Engine.MaterialExpressionPixelDepth
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionPixelDepth : UMaterialExpression {
};

// Class Engine.MaterialExpressionPixelNormalWS
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionPixelNormalWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionPower
// Size: 0x108 (Inherited: 0xb0)
struct UMaterialExpressionPower : UMaterialExpression {
	struct FExpressionInput Base; // 0xb0(0x28)
	struct FExpressionInput Exponent; // 0xd8(0x28)
	float ConstExponent; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
};

// Class Engine.MaterialExpressionPrecomputedAOMask
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionPrecomputedAOMask : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreSkinnedLocalBounds
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionPreSkinnedLocalBounds : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreSkinnedNormal
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionPreSkinnedNormal : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreSkinnedPosition
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionPreSkinnedPosition : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreviousFrameSwitch
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionPreviousFrameSwitch : UMaterialExpression {
	struct FExpressionInput CurrentFrame; // 0xb0(0x28)
	struct FExpressionInput PreviousFrame; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionQualitySwitch
// Size: 0x178 (Inherited: 0xb0)
struct UMaterialExpressionQualitySwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0xb0(0x28)
	struct FExpressionInput Inputs[0x4]; // 0xd8(0xa0)
};

// Class Engine.MaterialExpressionRayTracingQualitySwitch
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionRayTracingQualitySwitch : UMaterialExpression {
	struct FExpressionInput Normal; // 0xb0(0x28)
	struct FExpressionInput RayTraced; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionReflectionCapturePassSwitch
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionReflectionCapturePassSwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0xb0(0x28)
	struct FExpressionInput Reflection; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionReflectionVectorWS
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionReflectionVectorWS : UMaterialExpression {
	struct FExpressionInput CustomWorldNormal; // 0xb0(0x28)
	char bNormalizeCustomWorldNormal : 1; // 0xd8(0x01)
	char pad_D8_1 : 7; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
};

// Class Engine.MaterialExpressionReroute
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionReroute : UMaterialExpressionRerouteBase {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionRotateAboutAxis
// Size: 0x158 (Inherited: 0xb0)
struct UMaterialExpressionRotateAboutAxis : UMaterialExpression {
	struct FExpressionInput NormalizedRotationAxis; // 0xb0(0x28)
	struct FExpressionInput RotationAngle; // 0xd8(0x28)
	struct FExpressionInput PivotPoint; // 0x100(0x28)
	struct FExpressionInput Position; // 0x128(0x28)
	float Period; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
};

// Class Engine.MaterialExpressionRotator
// Size: 0x110 (Inherited: 0xb0)
struct UMaterialExpressionRotator : UMaterialExpression {
	struct FExpressionInput Coordinate; // 0xb0(0x28)
	struct FExpressionInput Time; // 0xd8(0x28)
	float CenterX; // 0x100(0x04)
	float CenterY; // 0x104(0x04)
	float Speed; // 0x108(0x04)
	uint32_t ConstCoordinate; // 0x10c(0x04)
};

// Class Engine.MaterialExpressionRound
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionRound : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
// Size: 0x1c8 (Inherited: 0xb0)
struct UMaterialExpressionRuntimeVirtualTextureOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput BaseColor; // 0xb0(0x28)
	struct FExpressionInput Specular; // 0xd8(0x28)
	struct FExpressionInput Roughness; // 0x100(0x28)
	struct FExpressionInput Normal; // 0x128(0x28)
	struct FExpressionInput WorldHeight; // 0x150(0x28)
	struct FExpressionInput Opacity; // 0x178(0x28)
	struct FExpressionInput Mask; // 0x1a0(0x28)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionRuntimeVirtualTextureReplace : UMaterialExpression {
	struct FExpressionInput Default; // 0xb0(0x28)
	struct FExpressionInput VirtualTextureOutput; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
// Size: 0x138 (Inherited: 0xb0)
struct UMaterialExpressionRuntimeVirtualTextureSample : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0xb0(0x28)
	struct FExpressionInput WorldPosition; // 0xd8(0x28)
	struct FExpressionInput MipValue; // 0x100(0x28)
	struct URuntimeVirtualTexture* VirtualTexture; // 0x128(0x08)
	enum class ERuntimeVirtualTextureMaterialType MaterialType; // 0x130(0x01)
	bool bSinglePhysicalSpace; // 0x131(0x01)
	bool bAdaptive; // 0x132(0x01)
	enum class ERuntimeVirtualTextureMipValueMode MipValueMode; // 0x133(0x01)
	enum class ERuntimeVirtualTextureTextureAddressMode TextureAddressMode; // 0x134(0x01)
	char pad_135[0x3]; // 0x135(0x03)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
// Size: 0x158 (Inherited: 0x138)
struct UMaterialExpressionRuntimeVirtualTextureSampleParameter : UMaterialExpressionRuntimeVirtualTextureSample {
	struct FName ParameterName; // 0x138(0x04)
	struct FGuid ExpressionGUID; // 0x13c(0x10)
	struct FName Group; // 0x14c(0x04)
	int32_t SortPriority; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
};

// Class Engine.MaterialExpressionSamplePhysicsVectorField
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionSamplePhysicsVectorField : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0xb0(0x28)
	enum class EFieldVectorType FieldTarget; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
};

// Class Engine.MaterialExpressionSamplePhysicsScalarField
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionSamplePhysicsScalarField : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0xb0(0x28)
	enum class EFieldScalarType FieldTarget; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
};

// Class Engine.MaterialExpressionSamplePhysicsIntegerField
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionSamplePhysicsIntegerField : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0xb0(0x28)
	enum class EFieldIntegerType FieldTarget; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
};

// Class Engine.MaterialExpressionSaturate
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionSaturate : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionSceneColor
// Size: 0x118 (Inherited: 0xb0)
struct UMaterialExpressionSceneColor : UMaterialExpression {
	enum class EMaterialSceneAttributeInputMode InputMode; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct FExpressionInput Input; // 0xb8(0x28)
	struct FExpressionInput OffsetFraction; // 0xe0(0x28)
	struct FVector2D ConstInput; // 0x108(0x10)
};

// Class Engine.MaterialExpressionSceneDepth
// Size: 0x118 (Inherited: 0xb0)
struct UMaterialExpressionSceneDepth : UMaterialExpression {
	enum class EMaterialSceneAttributeInputMode InputMode; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct FExpressionInput Input; // 0xb8(0x28)
	struct FExpressionInput Coordinates; // 0xe0(0x28)
	struct FVector2D ConstInput; // 0x108(0x10)
};

// Class Engine.MaterialExpressionSceneDepthWithoutWater
// Size: 0xf8 (Inherited: 0xb0)
struct UMaterialExpressionSceneDepthWithoutWater : UMaterialExpression {
	enum class EMaterialSceneAttributeInputMode InputMode; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct FExpressionInput Input; // 0xb8(0x28)
	struct FVector2D ConstInput; // 0xe0(0x10)
	float FallbackDepth; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
};

// Class Engine.MaterialExpressionSceneTexelSize
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionSceneTexelSize : UMaterialExpression {
};

// Class Engine.MaterialExpressionSceneTexture
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionSceneTexture : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0xb0(0x28)
	enum class ESceneTextureId SceneTextureId; // 0xd8(0x01)
	bool bFiltered; // 0xd9(0x01)
	char pad_DA[0x6]; // 0xda(0x06)
};

// Class Engine.MaterialExpressionScreenPosition
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionScreenPosition : UMaterialExpression {
};

// Class Engine.MaterialExpressionSetLocal
// Size: 0xe8 (Inherited: 0xb0)
struct UMaterialExpressionSetLocal : UMaterialExpression {
	struct FExpressionExecOutput Exec; // 0xb0(0x08)
	struct FExpressionInput Value; // 0xb8(0x28)
	struct FName LocalName; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
};

// Class Engine.MaterialExpressionSetMaterialAttributes
// Size: 0xd0 (Inherited: 0xb0)
struct UMaterialExpressionSetMaterialAttributes : UMaterialExpression {
	struct TArray<struct FExpressionInput> Inputs; // 0xb0(0x10)
	struct TArray<struct FGuid> AttributeSetTypes; // 0xc0(0x10)
};

// Class Engine.MaterialExpressionShaderStageSwitch
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionShaderStageSwitch : UMaterialExpression {
	struct FExpressionInput PixelShader; // 0xb0(0x28)
	struct FExpressionInput VertexShader; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionShadingModel
// Size: 0xb8 (Inherited: 0xb0)
struct UMaterialExpressionShadingModel : UMaterialExpression {
	enum class EMaterialShadingModel ShadingModel; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
};

// Class Engine.MaterialExpressionShadingPathSwitch
// Size: 0x150 (Inherited: 0xb0)
struct UMaterialExpressionShadingPathSwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0xb0(0x28)
	struct FExpressionInput Inputs[0x3]; // 0xd8(0x78)
};

// Class Engine.MaterialExpressionShadowReplace
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionShadowReplace : UMaterialExpression {
	struct FExpressionInput Default; // 0xb0(0x28)
	struct FExpressionInput Shadow; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionSign
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionSign : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionSine
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionSine : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
	float Period; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
};

// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
// Size: 0x150 (Inherited: 0xb0)
struct UMaterialExpressionSingleLayerWaterMaterialOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput ScatteringCoefficients; // 0xb0(0x28)
	struct FExpressionInput AbsorptionCoefficients; // 0xd8(0x28)
	struct FExpressionInput PhaseG; // 0x100(0x28)
	struct FExpressionInput ColorScaleBehindWater; // 0x128(0x28)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
// Size: 0xb8 (Inherited: 0xb0)
struct UMaterialExpressionSkyAtmosphereLightDirection : UMaterialExpression {
	int32_t LightIndex; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionSkyAtmosphereLightIlluminance : UMaterialExpression {
	int32_t LightIndex; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct FExpressionInput WorldPosition; // 0xb8(0x28)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
// Size: 0xb8 (Inherited: 0xb0)
struct UMaterialExpressionSkyAtmosphereLightDiskLuminance : UMaterialExpression {
	int32_t LightIndex; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionSkyAtmosphereAerialPerspective : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : UMaterialExpression {
};

// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionSkyAtmosphereViewLuminance : UMaterialExpression {
};

// Class Engine.MaterialExpressionSkyLightEnvMapSample
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionSkyLightEnvMapSample : UMaterialExpression {
	struct FExpressionInput Direction; // 0xb0(0x28)
	struct FExpressionInput Roughness; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionSmoothStep
// Size: 0x138 (Inherited: 0xb0)
struct UMaterialExpressionSmoothStep : UMaterialExpression {
	struct FExpressionInput min; // 0xb0(0x28)
	struct FExpressionInput max; // 0xd8(0x28)
	struct FExpressionInput Value; // 0x100(0x28)
	float ConstMin; // 0x128(0x04)
	float ConstMax; // 0x12c(0x04)
	float ConstValue; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
};

// Class Engine.MaterialExpressionSobol
// Size: 0x140 (Inherited: 0xb0)
struct UMaterialExpressionSobol : UMaterialExpression {
	struct FExpressionInput Cell; // 0xb0(0x28)
	struct FExpressionInput Index; // 0xd8(0x28)
	struct FExpressionInput Seed; // 0x100(0x28)
	uint32_t ConstIndex; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct FVector2D ConstSeed; // 0x130(0x10)
};

// Class Engine.MaterialExpressionSpeedTree
// Size: 0x160 (Inherited: 0xb0)
struct UMaterialExpressionSpeedTree : UMaterialExpression {
	struct FExpressionInput GeometryInput; // 0xb0(0x28)
	struct FExpressionInput WindInput; // 0xd8(0x28)
	struct FExpressionInput LODInput; // 0x100(0x28)
	struct FExpressionInput ExtraBendWS; // 0x128(0x28)
	enum class ESpeedTreeGeometryType GeometryType; // 0x150(0x01)
	enum class ESpeedTreeWindType WindType; // 0x151(0x01)
	enum class ESpeedTreeLODType LODType; // 0x152(0x01)
	char pad_153[0x1]; // 0x153(0x01)
	float BillboardThreshold; // 0x154(0x04)
	bool bAccurateWindVelocities; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
};

// Class Engine.MaterialExpressionSphereMask
// Size: 0x158 (Inherited: 0xb0)
struct UMaterialExpressionSphereMask : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
	struct FExpressionInput Radius; // 0x100(0x28)
	struct FExpressionInput Hardness; // 0x128(0x28)
	float AttenuationRadius; // 0x150(0x04)
	float HardnessPercent; // 0x154(0x04)
};

// Class Engine.MaterialExpressionSphericalParticleOpacity
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionSphericalParticleOpacity : UMaterialExpression {
	struct FExpressionInput Density; // 0xb0(0x28)
	float ConstantDensity; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
};

// Class Engine.MaterialExpressionSquareRoot
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionSquareRoot : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionStaticBool
// Size: 0xb8 (Inherited: 0xb0)
struct UMaterialExpressionStaticBool : UMaterialExpression {
	char Value : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
};

// Class Engine.MaterialExpressionStaticBoolParameter
// Size: 0xd8 (Inherited: 0xd0)
struct UMaterialExpressionStaticBoolParameter : UMaterialExpressionParameter {
	char DefaultValue : 1; // 0xd0(0x01)
	char pad_D0_1 : 7; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// Size: 0x100 (Inherited: 0xd0)
struct UMaterialExpressionStaticComponentMaskParameter : UMaterialExpressionParameter {
	struct FExpressionInput Input; // 0xd0(0x28)
	char DefaultR : 1; // 0xf8(0x01)
	char DefaultG : 1; // 0xf8(0x01)
	char DefaultB : 1; // 0xf8(0x01)
	char DefaultA : 1; // 0xf8(0x01)
	char pad_F8_4 : 4; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
};

// Class Engine.MaterialExpressionStaticSwitch
// Size: 0x130 (Inherited: 0xb0)
struct UMaterialExpressionStaticSwitch : UMaterialExpression {
	char DefaultValue : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct FExpressionInput A; // 0xb8(0x28)
	struct FExpressionInput B; // 0xe0(0x28)
	struct FExpressionInput Value; // 0x108(0x28)
};

// Class Engine.MaterialExpressionStaticSwitchParameter
// Size: 0x128 (Inherited: 0xd8)
struct UMaterialExpressionStaticSwitchParameter : UMaterialExpressionStaticBoolParameter {
	struct FExpressionInput A; // 0xd8(0x28)
	struct FExpressionInput B; // 0x100(0x28)
};

// Class Engine.MaterialExpressionStep
// Size: 0x108 (Inherited: 0xb0)
struct UMaterialExpressionStep : UMaterialExpression {
	struct FExpressionInput Y; // 0xb0(0x28)
	struct FExpressionInput X; // 0xd8(0x28)
	float ConstY; // 0x100(0x04)
	float ConstX; // 0x104(0x04)
};

// Class Engine.MaterialExpressionStrataBSDF
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionStrataBSDF : UMaterialExpression {
};

// Class Engine.MaterialExpressionStrataLegacyConversion
// Size: 0x3c8 (Inherited: 0xb0)
struct UMaterialExpressionStrataLegacyConversion : UMaterialExpressionStrataBSDF {
	struct FExpressionInput BaseColor; // 0xb0(0x28)
	struct FExpressionInput Metallic; // 0xd8(0x28)
	struct FExpressionInput Specular; // 0x100(0x28)
	struct FExpressionInput Roughness; // 0x128(0x28)
	struct FExpressionInput Anisotropy; // 0x150(0x28)
	struct FExpressionInput EmissiveColor; // 0x178(0x28)
	struct FExpressionInput Normal; // 0x1a0(0x28)
	struct FExpressionInput Tangent; // 0x1c8(0x28)
	struct FExpressionInput SubsurfaceColor; // 0x1f0(0x28)
	struct FExpressionInput ClearCoat; // 0x218(0x28)
	struct FExpressionInput ClearCoatRoughness; // 0x240(0x28)
	struct FExpressionInput Opacity; // 0x268(0x28)
	struct FExpressionInput TransmittanceColor; // 0x290(0x28)
	struct FExpressionInput WaterScatteringCoefficients; // 0x2b8(0x28)
	struct FExpressionInput WaterAbsorptionCoefficients; // 0x2e0(0x28)
	struct FExpressionInput WaterPhaseG; // 0x308(0x28)
	struct FExpressionInput ColorScaleBehindWater; // 0x330(0x28)
	struct FExpressionInput ClearCoatNormal; // 0x358(0x28)
	struct FExpressionInput ShadingModel; // 0x380(0x28)
	struct USubsurfaceProfile* SubsurfaceProfile; // 0x3a8(0x08)
	struct FStrataMaterialInfo ConvertedStrataMaterialInfo; // 0x3b0(0x18)
};

// Class Engine.MaterialExpressionStrataSlabBSDF
// Size: 0x3e0 (Inherited: 0xb0)
struct UMaterialExpressionStrataSlabBSDF : UMaterialExpressionStrataBSDF {
	struct FExpressionInput BaseColor; // 0xb0(0x28)
	struct FExpressionInput EdgeColor; // 0xd8(0x28)
	struct FExpressionInput Metallic; // 0x100(0x28)
	struct FExpressionInput Specular; // 0x128(0x28)
	struct FExpressionInput DiffuseAlbedo; // 0x150(0x28)
	struct FExpressionInput F0; // 0x178(0x28)
	struct FExpressionInput F90; // 0x1a0(0x28)
	struct FExpressionInput Roughness; // 0x1c8(0x28)
	struct FExpressionInput Anisotropy; // 0x1f0(0x28)
	struct FExpressionInput Normal; // 0x218(0x28)
	struct FExpressionInput Tangent; // 0x240(0x28)
	struct FExpressionInput SSSMFP; // 0x268(0x28)
	struct FExpressionInput SSSMFPScale; // 0x290(0x28)
	struct FExpressionInput SSSPhaseAnisotropy; // 0x2b8(0x28)
	struct FExpressionInput EmissiveColor; // 0x2e0(0x28)
	struct FExpressionInput SecondRoughness; // 0x308(0x28)
	struct FExpressionInput SecondRoughnessWeight; // 0x330(0x28)
	struct FExpressionInput Thickness; // 0x358(0x28)
	struct FExpressionInput FuzzAmount; // 0x380(0x28)
	struct FExpressionInput FuzzColor; // 0x3a8(0x28)
	struct USubsurfaceProfile* SubsurfaceProfile; // 0x3d0(0x08)
	char bUseMetalness : 1; // 0x3d8(0x01)
	char bUseSSSDiffusion : 1; // 0x3d8(0x01)
	char pad_3D8_2 : 6; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
};

// Class Engine.MaterialExpressionStrataVolumetricFogCloudBSDF
// Size: 0x150 (Inherited: 0xb0)
struct UMaterialExpressionStrataVolumetricFogCloudBSDF : UMaterialExpressionStrataBSDF {
	struct FExpressionInput Albedo; // 0xb0(0x28)
	struct FExpressionInput Extinction; // 0xd8(0x28)
	struct FExpressionInput EmissiveColor; // 0x100(0x28)
	struct FExpressionInput AmbientOcclusion; // 0x128(0x28)
};

// Class Engine.MaterialExpressionStrataUnlitBSDF
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionStrataUnlitBSDF : UMaterialExpressionStrataBSDF {
	struct FExpressionInput EmissiveColor; // 0xb0(0x28)
	struct FExpressionInput TransmittanceColor; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionStrataHairBSDF
// Size: 0x1c8 (Inherited: 0xb0)
struct UMaterialExpressionStrataHairBSDF : UMaterialExpressionStrataBSDF {
	struct FExpressionInput BaseColor; // 0xb0(0x28)
	struct FExpressionInput Scatter; // 0xd8(0x28)
	struct FExpressionInput Specular; // 0x100(0x28)
	struct FExpressionInput Roughness; // 0x128(0x28)
	struct FExpressionInput Backlit; // 0x150(0x28)
	struct FExpressionInput Tangent; // 0x178(0x28)
	struct FExpressionInput EmissiveColor; // 0x1a0(0x28)
};

// Class Engine.MaterialExpressionStrataSingleLayerWaterBSDF
// Size: 0x268 (Inherited: 0xb0)
struct UMaterialExpressionStrataSingleLayerWaterBSDF : UMaterialExpressionStrataBSDF {
	struct FExpressionInput BaseColor; // 0xb0(0x28)
	struct FExpressionInput Metallic; // 0xd8(0x28)
	struct FExpressionInput Specular; // 0x100(0x28)
	struct FExpressionInput Roughness; // 0x128(0x28)
	struct FExpressionInput Normal; // 0x150(0x28)
	struct FExpressionInput EmissiveColor; // 0x178(0x28)
	struct FExpressionInput TopMaterialOpacity; // 0x1a0(0x28)
	struct FExpressionInput WaterAlbedo; // 0x1c8(0x28)
	struct FExpressionInput WaterExtinction; // 0x1f0(0x28)
	struct FExpressionInput WaterPhaseG; // 0x218(0x28)
	struct FExpressionInput ColorScaleBehindWater; // 0x240(0x28)
};

// Class Engine.MaterialExpressionStrataLightFunction
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionStrataLightFunction : UMaterialExpressionStrataBSDF {
	struct FExpressionInput Color; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionStrataPostProcess
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionStrataPostProcess : UMaterialExpressionStrataBSDF {
	struct FExpressionInput Color; // 0xb0(0x28)
	struct FExpressionInput Opacity; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionStrataConvertToDecal
// Size: 0x108 (Inherited: 0xb0)
struct UMaterialExpressionStrataConvertToDecal : UMaterialExpressionStrataBSDF {
	struct FExpressionInput DecalMaterial; // 0xb0(0x28)
	struct FExpressionInput Coverage; // 0xd8(0x28)
	char bUseParameterBlending : 1; // 0x100(0x01)
	char pad_100_1 : 7; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
};

// Class Engine.MaterialExpressionStrataHorizontalMixing
// Size: 0x130 (Inherited: 0xb0)
struct UMaterialExpressionStrataHorizontalMixing : UMaterialExpressionStrataBSDF {
	struct FExpressionInput Background; // 0xb0(0x28)
	struct FExpressionInput Foreground; // 0xd8(0x28)
	struct FExpressionInput Mix; // 0x100(0x28)
	char bUseParameterBlending : 1; // 0x128(0x01)
	char pad_128_1 : 7; // 0x128(0x01)
	char pad_129[0x7]; // 0x129(0x07)
};

// Class Engine.MaterialExpressionStrataVerticalLayering
// Size: 0x108 (Inherited: 0xb0)
struct UMaterialExpressionStrataVerticalLayering : UMaterialExpressionStrataBSDF {
	struct FExpressionInput Top; // 0xb0(0x28)
	struct FExpressionInput Base; // 0xd8(0x28)
	char bUseParameterBlending : 1; // 0x100(0x01)
	char pad_100_1 : 7; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
};

// Class Engine.MaterialExpressionStrataAdd
// Size: 0x108 (Inherited: 0xb0)
struct UMaterialExpressionStrataAdd : UMaterialExpressionStrataBSDF {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
	char bUseParameterBlending : 1; // 0x100(0x01)
	char pad_100_1 : 7; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
};

// Class Engine.MaterialExpressionStrataWeight
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionStrataWeight : UMaterialExpressionStrataBSDF {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput Weight; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionStrataThinFilm
// Size: 0x128 (Inherited: 0xb0)
struct UMaterialExpressionStrataThinFilm : UMaterialExpressionStrataBSDF {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput Thickness; // 0xd8(0x28)
	struct FExpressionInput IOR; // 0x100(0x28)
};

// Class Engine.MaterialExpressionStrataTransmittanceToMFP
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionStrataTransmittanceToMFP : UMaterialExpressionStrataBSDF {
	struct FExpressionInput TransmittanceColor; // 0xb0(0x28)
	struct FExpressionInput Thickness; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionStrataMetalnessToDiffuseAlbedoF0
// Size: 0x128 (Inherited: 0xb0)
struct UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0 : UMaterialExpressionStrataBSDF {
	struct FExpressionInput BaseColor; // 0xb0(0x28)
	struct FExpressionInput Metallic; // 0xd8(0x28)
	struct FExpressionInput Specular; // 0x100(0x28)
};

// Class Engine.MaterialExpressionStrataHazinessToSecondaryRoughness
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionStrataHazinessToSecondaryRoughness : UMaterialExpressionStrataBSDF {
	struct FExpressionInput BaseRoughness; // 0xb0(0x28)
	struct FExpressionInput Haziness; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionSubtract
// Size: 0x108 (Inherited: 0xb0)
struct UMaterialExpressionSubtract : UMaterialExpression {
	struct FExpressionInput A; // 0xb0(0x28)
	struct FExpressionInput B; // 0xd8(0x28)
	float ConstA; // 0x100(0x04)
	float ConstB; // 0x104(0x04)
};

// Class Engine.MaterialExpressionTangent
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionTangent : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
	float Period; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
};

// Class Engine.MaterialExpressionTangentOutput
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionTangentOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionTemporalSobol
// Size: 0x118 (Inherited: 0xb0)
struct UMaterialExpressionTemporalSobol : UMaterialExpression {
	struct FExpressionInput Index; // 0xb0(0x28)
	struct FExpressionInput Seed; // 0xd8(0x28)
	uint32_t ConstIndex; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
	struct FVector2D ConstSeed; // 0x108(0x10)
};

// Class Engine.MaterialExpressionTextureCoordinate
// Size: 0xc0 (Inherited: 0xb0)
struct UMaterialExpressionTextureCoordinate : UMaterialExpression {
	int32_t CoordinateIndex; // 0xb0(0x04)
	float UTiling; // 0xb4(0x04)
	float VTiling; // 0xb8(0x04)
	char UnMirrorU : 1; // 0xbc(0x01)
	char UnMirrorV : 1; // 0xbc(0x01)
	char pad_BC_2 : 6; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
};

// Class Engine.MaterialExpressionTextureObject
// Size: 0xc0 (Inherited: 0xc0)
struct UMaterialExpressionTextureObject : UMaterialExpressionTextureBase {
};

// Class Engine.MaterialExpressionTextureObjectParameter
// Size: 0x238 (Inherited: 0x238)
struct UMaterialExpressionTextureObjectParameter : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureProperty
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionTextureProperty : UMaterialExpression {
	struct FExpressionInput TextureObject; // 0xb0(0x28)
	enum class EMaterialExposedTextureProperty Property; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
};

// Class Engine.MaterialExpressionTextureSampleParameter2DArray
// Size: 0x238 (Inherited: 0x238)
struct UMaterialExpressionTextureSampleParameter2DArray : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureSampleParameterCube
// Size: 0x238 (Inherited: 0x238)
struct UMaterialExpressionTextureSampleParameterCube : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureSampleParameterCubeArray
// Size: 0x238 (Inherited: 0x238)
struct UMaterialExpressionTextureSampleParameterCubeArray : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// Size: 0x240 (Inherited: 0x238)
struct UMaterialExpressionTextureSampleParameterSubUV : UMaterialExpressionTextureSampleParameter2D {
	char bBlend : 1; // 0x238(0x01)
	char pad_238_1 : 7; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)
};

// Class Engine.MaterialExpressionTextureSampleParameterVolume
// Size: 0x238 (Inherited: 0x238)
struct UMaterialExpressionTextureSampleParameterVolume : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionThinTranslucentMaterialOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput TransmittanceColor; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionTime
// Size: 0xb8 (Inherited: 0xb0)
struct UMaterialExpressionTime : UMaterialExpression {
	char bIgnorePause : 1; // 0xb0(0x01)
	char bOverride_Period : 1; // 0xb0(0x01)
	char pad_B0_2 : 6; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	float Period; // 0xb4(0x04)
};

// Class Engine.MaterialExpressionTransform
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionTransform : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
	enum class EMaterialVectorCoordTransformSource TransformSourceType; // 0xd8(0x01)
	enum class EMaterialVectorCoordTransform TransformType; // 0xd9(0x01)
	char pad_DA[0x6]; // 0xda(0x06)
};

// Class Engine.MaterialExpressionTransformPosition
// Size: 0xe0 (Inherited: 0xb0)
struct UMaterialExpressionTransformPosition : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
	enum class EMaterialPositionTransformSource TransformSourceType; // 0xd8(0x01)
	enum class EMaterialPositionTransformSource TransformType; // 0xd9(0x01)
	char pad_DA[0x6]; // 0xda(0x06)
};

// Class Engine.MaterialExpressionTruncate
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionTruncate : UMaterialExpression {
	struct FExpressionInput Input; // 0xb0(0x28)
};

// Class Engine.MaterialExpressionTwoSidedSign
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionTwoSidedSign : UMaterialExpression {
};

// Class Engine.MaterialExpressionVectorNoise
// Size: 0xe8 (Inherited: 0xb0)
struct UMaterialExpressionVectorNoise : UMaterialExpression {
	struct FExpressionInput Position; // 0xb0(0x28)
	enum class EVectorNoiseFunction NoiseFunction; // 0xd8(0x01)
	char pad_D9[0x3]; // 0xd9(0x03)
	int32_t Quality; // 0xdc(0x04)
	char bTiling : 1; // 0xe0(0x01)
	char pad_E0_1 : 7; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	uint32_t TileSize; // 0xe4(0x04)
};

// Class Engine.MaterialExpressionVertexColor
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionVertexColor : UMaterialExpression {
};

// Class Engine.MaterialExpressionVertexInterpolator
// Size: 0xe8 (Inherited: 0xb0)
struct UMaterialExpressionVertexInterpolator : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0xb0(0x28)
	char pad_D8[0x10]; // 0xd8(0x10)
};

// Class Engine.MaterialExpressionVertexNormalWS
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionVertexNormalWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionVertexTangentWS
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionVertexTangentWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionViewProperty
// Size: 0xb8 (Inherited: 0xb0)
struct UMaterialExpressionViewProperty : UMaterialExpression {
	enum class EMaterialExposedViewProperty Property; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
};

// Class Engine.MaterialExpressionViewSize
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionViewSize : UMaterialExpression {
};

// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
// Size: 0x100 (Inherited: 0xb0)
struct UMaterialExpressionVirtualTextureFeatureSwitch : UMaterialExpression {
	struct FExpressionInput No; // 0xb0(0x28)
	struct FExpressionInput Yes; // 0xd8(0x28)
};

// Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput
// Size: 0xb0 (Inherited: 0xb0)
struct UMaterialExpressionVolumetricAdvancedMaterialInput : UMaterialExpression {
};

// Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
// Size: 0x1f0 (Inherited: 0xb0)
struct UMaterialExpressionVolumetricAdvancedMaterialOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput PhaseG; // 0xb0(0x28)
	struct FExpressionInput PhaseG2; // 0xd8(0x28)
	struct FExpressionInput PhaseBlend; // 0x100(0x28)
	struct FExpressionInput MultiScatteringContribution; // 0x128(0x28)
	struct FExpressionInput MultiScatteringOcclusion; // 0x150(0x28)
	struct FExpressionInput MultiScatteringEccentricity; // 0x178(0x28)
	struct FExpressionInput ConservativeDensity; // 0x1a0(0x28)
	float ConstPhaseG; // 0x1c8(0x04)
	float ConstPhaseG2; // 0x1cc(0x04)
	float ConstPhaseBlend; // 0x1d0(0x04)
	bool PerSamplePhaseEvaluation; // 0x1d4(0x01)
	char pad_1D5[0x3]; // 0x1d5(0x03)
	uint32_t MultiScatteringApproximationOctaveCount; // 0x1d8(0x04)
	float ConstMultiScatteringContribution; // 0x1dc(0x04)
	float ConstMultiScatteringOcclusion; // 0x1e0(0x04)
	float ConstMultiScatteringEccentricity; // 0x1e4(0x04)
	bool bGroundContribution; // 0x1e8(0x01)
	bool bGrayScaleMaterial; // 0x1e9(0x01)
	bool bRayMarchVolumeShadow; // 0x1ea(0x01)
	char pad_1EB[0x5]; // 0x1eb(0x05)
};

// Class Engine.MaterialExpressionWhileLoop
// Size: 0xe8 (Inherited: 0xb0)
struct UMaterialExpressionWhileLoop : UMaterialExpression {
	struct FExpressionExecOutput LoopBody; // 0xb0(0x08)
	struct FExpressionExecOutput Completed; // 0xb8(0x08)
	struct FExpressionInput Condition; // 0xc0(0x28)
};

// Class Engine.MaterialExpressionWorldPosition
// Size: 0xb8 (Inherited: 0xb0)
struct UMaterialExpressionWorldPosition : UMaterialExpression {
	enum class EWorldPositionIncludedOffsets WorldPositionShaderOffset; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
};

// Class Engine.MaterialFunctionInterfaceEditorOnlyData
// Size: 0x28 (Inherited: 0x28)
struct UMaterialFunctionInterfaceEditorOnlyData : UObject {
};

// Class Engine.MaterialFunctionEditorOnlyData
// Size: 0x58 (Inherited: 0x28)
struct UMaterialFunctionEditorOnlyData : UMaterialFunctionInterfaceEditorOnlyData {
	struct FMaterialExpressionCollection ExpressionCollection; // 0x28(0x30)
};

// Class Engine.MaterialFunctionInterface
// Size: 0x40 (Inherited: 0x28)
struct UMaterialFunctionInterface : UObject {
	struct FGuid StateId; // 0x28(0x10)
	enum class EMaterialFunctionUsage MaterialFunctionUsage; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.MaterialFunction
// Size: 0x58 (Inherited: 0x40)
struct UMaterialFunction : UMaterialFunctionInterface {
	struct FString Description; // 0x40(0x10)
	char bExposeToLibrary : 1; // 0x50(0x01)
	char bPrefixParameterNames : 1; // 0x50(0x01)
	char bEnableExecWire : 1; // 0x50(0x01)
	char bEnableNewHLSLGenerator : 1; // 0x50(0x01)
	char pad_50_4 : 4; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Engine.MaterialFunctionInstance
// Size: 0xd0 (Inherited: 0x40)
struct UMaterialFunctionInstance : UMaterialFunctionInterface {
	struct UMaterialFunctionInterface* Parent; // 0x40(0x08)
	struct UMaterialFunctionInterface* Base; // 0x48(0x08)
	struct TArray<struct FScalarParameterValue> ScalarParameterValues; // 0x50(0x10)
	struct TArray<struct FVectorParameterValue> VectorParameterValues; // 0x60(0x10)
	struct TArray<struct FDoubleVectorParameterValue> DoubleVectorParameterValues; // 0x70(0x10)
	struct TArray<struct FTextureParameterValue> TextureParameterValues; // 0x80(0x10)
	struct TArray<struct FFontParameterValue> FontParameterValues; // 0x90(0x10)
	struct TArray<struct FStaticSwitchParameter> StaticSwitchParameterValues; // 0xa0(0x10)
	struct TArray<struct FStaticComponentMaskParameter> StaticComponentMaskParameterValues; // 0xb0(0x10)
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0xc0(0x10)
};

// Class Engine.MaterialFunctionMaterialLayer
// Size: 0x58 (Inherited: 0x58)
struct UMaterialFunctionMaterialLayer : UMaterialFunction {
};

// Class Engine.MaterialFunctionMaterialLayerInstance
// Size: 0xd0 (Inherited: 0xd0)
struct UMaterialFunctionMaterialLayerInstance : UMaterialFunctionInstance {
};

// Class Engine.MaterialFunctionMaterialLayerBlend
// Size: 0x58 (Inherited: 0x58)
struct UMaterialFunctionMaterialLayerBlend : UMaterialFunction {
};

// Class Engine.MaterialFunctionMaterialLayerBlendInstance
// Size: 0xd0 (Inherited: 0xd0)
struct UMaterialFunctionMaterialLayerBlendInstance : UMaterialFunctionInstance {
};

// Class Engine.MaterialInstanceEditorOnlyData
// Size: 0xe0 (Inherited: 0x40)
struct UMaterialInstanceEditorOnlyData : UMaterialInterfaceEditorOnlyData {
	struct FStaticParameterSetEditorOnlyData StaticParameters; // 0x40(0xa0)
};

// Class Engine.MaterialInstanceActor
// Size: 0x298 (Inherited: 0x288)
struct AMaterialInstanceActor : AActor {
	struct TArray<struct AActor*> TargetActors; // 0x288(0x10)
};

// Class Engine.MaterialInstanceDynamic
// Size: 0x208 (Inherited: 0x1b8)
struct UMaterialInstanceDynamic : UMaterialInstance {
	char pad_1B8[0x50]; // 0x1b8(0x50)

	void SetVectorParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, struct FLinearColor Value); // Function Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9319a84
	void SetVectorParameterValue(struct FName ParameterName, struct FLinearColor Value); // Function Engine.MaterialInstanceDynamic.SetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1e74e80
	void SetTextureParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, struct UTexture* Value); // Function Engine.MaterialInstanceDynamic.SetTextureParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x93199a0
	void SetTextureParameterValue(struct FName ParameterName, struct UTexture* Value); // Function Engine.MaterialInstanceDynamic.SetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x23220a8
	void SetScalarParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, float Value); // Function Engine.MaterialInstanceDynamic.SetScalarParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x93198b8
	void SetScalarParameterValue(struct FName ParameterName, float Value); // Function Engine.MaterialInstanceDynamic.SetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0xd629c0
	bool SetScalarParameterByIndex(int32_t ParameterIndex, float Value); // Function Engine.MaterialInstanceDynamic.SetScalarParameterByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x93197f0
	void SetRuntimeVirtualTextureParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, struct URuntimeVirtualTexture* Value); // Function Engine.MaterialInstanceDynamic.SetRuntimeVirtualTextureParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x931970c
	void SetRuntimeVirtualTextureParameterValue(struct FName ParameterName, struct URuntimeVirtualTexture* Value); // Function Engine.MaterialInstanceDynamic.SetRuntimeVirtualTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x9319648
	void SetDoubleVectorParameterValue(struct FName ParameterName, struct FVector4 Value); // Function Engine.MaterialInstanceDynamic.SetDoubleVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93193c0
	void K2_InterpolateMaterialInstanceParams(struct UMaterialInstance* SourceA, struct UMaterialInstance* SourceB, float Alpha); // Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams // (Final|Native|Public|BlueprintCallable) // @ game+0x9318cb4
	struct FLinearColor K2_GetVectorParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValueByInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9318bd8
	struct FLinearColor K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x23bc7d4
	struct UTexture* K2_GetTextureParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9318a48
	struct UTexture* K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x24dead8
	float K2_GetScalarParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x93189a4
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x23f591c
	void K2_CopyMaterialInstanceParameters(struct UMaterialInterface* Source, bool bQuickParametersOnly); // Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters // (Final|Native|Public|BlueprintCallable) // @ game+0x270c4e0
	bool InitializeScalarParameterAndGetIndex(struct FName& ParameterName, float Value, int32_t& OutParameterIndex); // Function Engine.MaterialInstanceDynamic.InitializeScalarParameterAndGetIndex // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x93187f0
	void CopyParameterOverrides(struct UMaterialInstance* MaterialInstance); // Function Engine.MaterialInstanceDynamic.CopyParameterOverrides // (Final|Native|Public|BlueprintCallable) // @ game+0x93184b8
	void CopyInterpParameters(struct UMaterialInstance* Source); // Function Engine.MaterialInstanceDynamic.CopyInterpParameters // (Final|Native|Public) // @ game+0x93182f4
};

// Class Engine.MaterialParameterCollection
// Size: 0x70 (Inherited: 0x28)
struct UMaterialParameterCollection : UObject {
	struct FGuid StateId; // 0x28(0x10)
	struct TArray<struct FCollectionScalarParameter> ScalarParameters; // 0x38(0x10)
	struct TArray<struct FCollectionVectorParameter> VectorParameters; // 0x48(0x10)
	char pad_58[0x18]; // 0x58(0x18)

	struct TArray<struct FName> GetVectorParameterNames(); // Function Engine.MaterialParameterCollection.GetVectorParameterNames // (Final|Native|Public|BlueprintCallable) // @ game+0x931a790
	struct FLinearColor GetVectorParameterDefaultValue(struct FName ParameterName, bool& bParameterFound); // Function Engine.MaterialParameterCollection.GetVectorParameterDefaultValue // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x931a674
	struct TArray<struct FName> GetScalarParameterNames(); // Function Engine.MaterialParameterCollection.GetScalarParameterNames // (Final|Native|Public|BlueprintCallable) // @ game+0x931a5f8
	float GetScalarParameterDefaultValue(struct FName ParameterName, bool& bParameterFound); // Function Engine.MaterialParameterCollection.GetScalarParameterDefaultValue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x931a528
};

// Class Engine.MaterialParameterCollectionInstance
// Size: 0x120 (Inherited: 0x28)
struct UMaterialParameterCollectionInstance : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UMaterialParameterCollection* Collection; // 0x30(0x08)
	char pad_38[0xe8]; // 0x38(0xe8)
};

// Class Engine.MeshDeformer
// Size: 0x28 (Inherited: 0x28)
struct UMeshDeformer : UObject {
};

// Class Engine.MeshDeformerInstance
// Size: 0x28 (Inherited: 0x28)
struct UMeshDeformerInstance : UObject {
};

// Class Engine.MeshMergeCullingVolume
// Size: 0x2c0 (Inherited: 0x2c0)
struct AMeshMergeCullingVolume : AVolume {
};

// Class Engine.MeshSimplificationSettings
// Size: 0x38 (Inherited: 0x30)
struct UMeshSimplificationSettings : UDeveloperSettings {
	struct FName MeshReductionModuleName; // 0x30(0x04)
	bool bMeshReductionBackwardCompatible; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
};

// Class Engine.MeshVertexPainterKismetLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMeshVertexPainterKismetLibrary : UBlueprintFunctionLibrary {

	void RemovePaintedVertices(struct UStaticMeshComponent* StaticMeshComponent); // Function Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x931c224
	void PaintVerticesSingleColor(struct UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& FillColor, bool bConvertToSRGB); // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x931bee4
	void PaintVerticesLerpAlongAxis(struct UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& StartColor, struct FLinearColor& EndColor, enum class EVertexPaintAxis Axis, bool bConvertToSRGB); // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x931b8e8
};

// Class Engine.MicroTransactionBase
// Size: 0x68 (Inherited: 0x38)
struct UMicroTransactionBase : UPlatformInterfaceBase {
	struct TArray<struct FPurchaseInfo> AvailableProducts; // 0x38(0x10)
	struct FString LastError; // 0x48(0x10)
	struct FString LastErrorSolution; // 0x58(0x10)
};

// Class Engine.MirrorDataTable
// Size: 0x1a0 (Inherited: 0xb0)
struct UMirrorDataTable : UDataTable {
	struct TArray<struct FMirrorFindReplaceExpression> MirrorFindReplaceExpressions; // 0xb0(0x10)
	enum class EAxis MirrorAxis; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
	struct USkeleton* Skeleton; // 0xc8(0x08)
	char pad_D0[0xd0]; // 0xd0(0xd0)
};

// Class Engine.ModelComponent
// Size: 0x570 (Inherited: 0x530)
struct UModelComponent : UPrimitiveComponent {
	char pad_530[0x18]; // 0x530(0x18)
	struct UBodySetup* ModelBodySetup; // 0x548(0x08)
	char pad_550[0x20]; // 0x550(0x20)
};

// Class Engine.MorphTarget
// Size: 0x40 (Inherited: 0x28)
struct UMorphTarget : UObject {
	struct USkeletalMesh* BaseSkelMesh; // 0x28(0x08)
	char pad_30[0x10]; // 0x30(0x10)
};

// Class Engine.NavAgentInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavAgentInterface : UInterface {
};

// Class Engine.NavAreaBase
// Size: 0x30 (Inherited: 0x28)
struct UNavAreaBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.NavCollisionBase
// Size: 0x70 (Inherited: 0x28)
struct UNavCollisionBase : UObject {
	char bIsDynamicObstacle : 1; // 0x28(0x01)
	char pad_28_1 : 7; // 0x28(0x01)
	char pad_29[0x47]; // 0x29(0x47)
};

// Class Engine.NavEdgeProviderInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavEdgeProviderInterface : UInterface {
};

// Class Engine.NavigationDataChunk
// Size: 0x30 (Inherited: 0x28)
struct UNavigationDataChunk : UObject {
	struct FName NavigationDataName; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Engine.NavigationDataChunkActor
// Size: 0x2d0 (Inherited: 0x288)
struct ANavigationDataChunkActor : APartitionActor {
	struct TArray<struct UNavigationDataChunk*> NavDataChunks; // 0x288(0x10)
	struct FBox DataChunkActorBounds; // 0x298(0x38)
};

// Class Engine.NavigationDataInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavigationDataInterface : UInterface {
};

// Class Engine.NavigationSystemBase
// Size: 0x28 (Inherited: 0x28)
struct UNavigationSystemBase : UObject {
};

// Class Engine.NavigationSystemConfig
// Size: 0x50 (Inherited: 0x28)
struct UNavigationSystemConfig : UObject {
	struct FSoftClassPath NavigationSystemClass; // 0x28(0x18)
	struct FNavAgentSelector SupportedAgentsMask; // 0x40(0x04)
	struct FName DefaultAgentName; // 0x44(0x04)
	char bIsOverriden : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.NullNavSysConfig
// Size: 0x50 (Inherited: 0x50)
struct UNullNavSysConfig : UNavigationSystemConfig {
};

// Class Engine.NavLinkDefinition
// Size: 0x50 (Inherited: 0x28)
struct UNavLinkDefinition : UObject {
	struct TArray<struct FNavigationLink> Links; // 0x28(0x10)
	struct TArray<struct FNavigationSegmentLink> SegmentLinks; // 0x38(0x10)
	char pad_48[0x8]; // 0x48(0x08)
};

// Class Engine.NavPathObserverInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavPathObserverInterface : UInterface {
};

// Class Engine.NavRelevantInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavRelevantInterface : UInterface {
};

// Class Engine.SimulatedClientNetConnection
// Size: 0x32c0 (Inherited: 0x32c0)
struct USimulatedClientNetConnection : UNetConnection {
};

// Class Engine.NetFaultConfig
// Size: 0x88 (Inherited: 0x88)
struct UNetFaultConfig : UEscalationManagerConfig {
};

// Class Engine.NetPushModelHelpers
// Size: 0x28 (Inherited: 0x28)
struct UNetPushModelHelpers : UBlueprintFunctionLibrary {

	void MarkPropertyDirtyFromRepIndex(struct UObject* Object, int32_t RepIndex, struct FName PropertyName); // Function Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f5be40
	void MarkPropertyDirty(struct UObject* Object, struct FName PropertyName); // Function Engine.NetPushModelHelpers.MarkPropertyDirty // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x931cab8
};

// Class Engine.NetworkPredictionInterface
// Size: 0x28 (Inherited: 0x28)
struct UNetworkPredictionInterface : UInterface {
};

// Class Engine.NetworkSettings
// Size: 0x48 (Inherited: 0x30)
struct UNetworkSettings : UDeveloperSettings {
	char bVerifyPeer : 1; // 0x30(0x01)
	char bEnableMultiplayerWorldOriginRebasing : 1; // 0x30(0x01)
	char pad_30_2 : 6; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles; // 0x38(0x10)
};

// Class Engine.NetworkSubsystem
// Size: 0x80 (Inherited: 0x30)
struct UNetworkSubsystem : UWorldSubsystem {
	char pad_30[0x50]; // 0x30(0x50)
};

// Class Engine.NodeMappingContainer
// Size: 0x168 (Inherited: 0x28)
struct UNodeMappingContainer : UObject {
	struct TMap<struct FName, struct FNodeItem> SourceItems; // 0x28(0x50)
	struct TMap<struct FName, struct FNodeItem> TargetItems; // 0x78(0x50)
	struct TMap<struct FName, struct FName> SourceToTarget; // 0xc8(0x50)
	struct TSoftObjectPtr<UObject> SourceAsset; // 0x118(0x28)
	struct TSoftObjectPtr<UObject> TargetAsset; // 0x140(0x28)
};

// Class Engine.NodeMappingProviderInterface
// Size: 0x28 (Inherited: 0x28)
struct UNodeMappingProviderInterface : UInterface {
};

// Class Engine.Note
// Size: 0x288 (Inherited: 0x288)
struct ANote : AActor {
};

// Class Engine.ObjectElementAssetDataInterface
// Size: 0x30 (Inherited: 0x28)
struct UObjectElementAssetDataInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ObjectElementCounterInterface
// Size: 0x30 (Inherited: 0x28)
struct UObjectElementCounterInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ObjectElementObjectInterface
// Size: 0x30 (Inherited: 0x28)
struct UObjectElementObjectInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ObjectElementSelectionInterface
// Size: 0x30 (Inherited: 0x28)
struct UObjectElementSelectionInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ObjectLibrary
// Size: 0xa8 (Inherited: 0x28)
struct UObjectLibrary : UObject {
	ClassPtrProperty ObjectBaseClass; // 0x28(0x08)
	bool bHasBlueprintClasses; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct UObject*> Objects; // 0x38(0x10)
	struct TArray<struct TWeakObjectPtr<struct UObject>> WeakObjects; // 0x48(0x10)
	bool bUseWeakReferences; // 0x58(0x01)
	bool bIsFullyLoaded; // 0x59(0x01)
	char pad_5A[0x4e]; // 0x5a(0x4e)
};

// Class Engine.ObjectReferencer
// Size: 0x38 (Inherited: 0x28)
struct UObjectReferencer : UObject {
	struct TArray<struct UObject*> ReferencedObjects; // 0x28(0x10)
};

// Class Engine.ObjectTraceWorldSubsystem
// Size: 0x40 (Inherited: 0x30)
struct UObjectTraceWorldSubsystem : UWorldSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
};

// Class Engine.PackageMapClient
// Size: 0x408 (Inherited: 0xe0)
struct UPackageMapClient : UPackageMap {
	char pad_E0[0x328]; // 0xe0(0x328)
};

// Class Engine.PackedLevelActor
// Size: 0x308 (Inherited: 0x308)
struct APackedLevelActor : ALevelInstance {
};

// Class Engine.PainCausingVolume
// Size: 0x2f8 (Inherited: 0x2d0)
struct APainCausingVolume : APhysicsVolume {
	char bPainCausing : 1; // 0x2d0(0x01)
	char pad_2D0_1 : 7; // 0x2d0(0x01)
	char pad_2D1[0x3]; // 0x2d1(0x03)
	float DamagePerSec; // 0x2d4(0x04)
	struct UDamageType* DamageType; // 0x2d8(0x08)
	float PainInterval; // 0x2e0(0x04)
	char bEntryPain : 1; // 0x2e4(0x01)
	char BACKUP_bPainCausing : 1; // 0x2e4(0x01)
	char pad_2E4_2 : 6; // 0x2e4(0x01)
	char pad_2E5[0x3]; // 0x2e5(0x03)
	struct AController* DamageInstigator; // 0x2e8(0x08)
	char pad_2F0[0x8]; // 0x2f0(0x08)
};

// Class Engine.ParticleEmitter
// Size: 0x1b8 (Inherited: 0x28)
struct UParticleEmitter : UObject {
	struct FName EmitterName; // 0x28(0x04)
	int32_t SubUVDataOffset; // 0x2c(0x04)
	enum class EEmitterRenderMode EmitterRenderMode; // 0x30(0x01)
	enum class EParticleSignificanceLevel SignificanceLevel; // 0x31(0x01)
	char pad_32[0x1]; // 0x32(0x01)
	char bUseLegacySpawningBehavior : 1; // 0x33(0x01)
	char pad_33_1 : 3; // 0x33(0x01)
	char ConvertedModules : 1; // 0x33(0x01)
	char bIsSoloing : 1; // 0x33(0x01)
	char bCookedOut : 1; // 0x33(0x01)
	char bDisabledLODsKeepEmitterAlive : 1; // 0x33(0x01)
	char bDisableWhenInsignficant : 1; // 0x34(0x01)
	char pad_34_1 : 7; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	struct TArray<struct UParticleLODLevel*> LODLevels; // 0x38(0x10)
	int32_t PeakActiveParticles; // 0x48(0x04)
	int32_t InitialAllocationCount; // 0x4c(0x04)
	float QualityLevelSpawnRateScale; // 0x50(0x04)
	uint32_t DetailModeBitmask; // 0x54(0x04)
	char pad_58[0x160]; // 0x58(0x160)
};

// Class Engine.ParticleEventManager
// Size: 0x288 (Inherited: 0x288)
struct AParticleEventManager : AActor {
};

// Class Engine.ParticleLODLevel
// Size: 0xb8 (Inherited: 0x28)
struct UParticleLODLevel : UObject {
	int32_t Level; // 0x28(0x04)
	char bEnabled : 1; // 0x2c(0x01)
	char pad_2C_1 : 7; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
	struct UParticleModuleRequired* RequiredModule; // 0x30(0x08)
	struct TArray<struct UParticleModule*> Modules; // 0x38(0x10)
	struct UParticleModuleTypeDataBase* TypeDataModule; // 0x48(0x08)
	struct UParticleModuleSpawn* SpawnModule; // 0x50(0x08)
	struct UParticleModuleEventGenerator* EventGenerator; // 0x58(0x08)
	struct TArray<struct UParticleModuleSpawnBase*> SpawningModules; // 0x60(0x10)
	struct TArray<struct UParticleModule*> SpawnModules; // 0x70(0x10)
	struct TArray<struct UParticleModule*> UpdateModules; // 0x80(0x10)
	struct TArray<struct UParticleModuleOrbit*> OrbitModules; // 0x90(0x10)
	struct TArray<struct UParticleModuleEventReceiverBase*> EventReceiverModules; // 0xa0(0x10)
	char ConvertedModules : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	int32_t PeakActiveParticles; // 0xb4(0x04)
};

// Class Engine.ParticleModuleAccelerationBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleAccelerationBase : UParticleModule {
	char bAlwaysInWorldSpace : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleAcceleration
// Size: 0xa0 (Inherited: 0x38)
struct UParticleModuleAcceleration : UParticleModuleAccelerationBase {
	struct FRawDistributionVector Acceleration; // 0x38(0x60)
	char bApplyOwnerScale : 1; // 0x98(0x01)
	char pad_98_1 : 7; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Engine.ParticleModuleAccelerationConstant
// Size: 0x50 (Inherited: 0x38)
struct UParticleModuleAccelerationConstant : UParticleModuleAccelerationBase {
	struct FVector Acceleration; // 0x38(0x18)
};

// Class Engine.ParticleModuleAccelerationDrag
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleAccelerationDrag : UParticleModuleAccelerationBase {
	struct UDistributionFloat* DragCoefficient; // 0x38(0x08)
	struct FRawDistributionFloat DragCoefficientRaw; // 0x40(0x30)
};

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleAccelerationDragScaleOverLife : UParticleModuleAccelerationBase {
	struct UDistributionFloat* DragScale; // 0x38(0x08)
	struct FRawDistributionFloat DragScaleRaw; // 0x40(0x30)
};

// Class Engine.ParticleModuleAccelerationOverLifetime
// Size: 0x98 (Inherited: 0x38)
struct UParticleModuleAccelerationOverLifetime : UParticleModuleAccelerationBase {
	struct FRawDistributionVector AccelOverLife; // 0x38(0x60)
};

// Class Engine.ParticleModuleAttractorBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleAttractorBase : UParticleModule {
};

// Class Engine.ParticleModuleAttractorLine
// Size: 0xc0 (Inherited: 0x30)
struct UParticleModuleAttractorLine : UParticleModuleAttractorBase {
	struct FVector EndPoint0; // 0x30(0x18)
	struct FVector EndPoint1; // 0x48(0x18)
	struct FRawDistributionFloat Range; // 0x60(0x30)
	struct FRawDistributionFloat Strength; // 0x90(0x30)
};

// Class Engine.ParticleModuleAttractorParticle
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleAttractorParticle : UParticleModuleAttractorBase {
	struct FName EmitterName; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FRawDistributionFloat Range; // 0x38(0x30)
	char bStrengthByDistance : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct FRawDistributionFloat Strength; // 0x70(0x30)
	char bAffectBaseVelocity : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	enum class EAttractorParticleSelectionMethod SelectionMethod; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	char bRenewSource : 1; // 0xa8(0x01)
	char bInheritSourceVel : 1; // 0xa8(0x01)
	char pad_A8_2 : 6; // 0xa8(0x01)
	char pad_A9[0x3]; // 0xa9(0x03)
	int32_t LastSelIndex; // 0xac(0x04)
};

// Class Engine.ParticleModuleAttractorPoint
// Size: 0xf8 (Inherited: 0x30)
struct UParticleModuleAttractorPoint : UParticleModuleAttractorBase {
	struct FRawDistributionVector Position; // 0x30(0x60)
	struct FRawDistributionFloat Range; // 0x90(0x30)
	struct FRawDistributionFloat Strength; // 0xc0(0x30)
	char StrengthByDistance : 1; // 0xf0(0x01)
	char bAffectBaseVelocity : 1; // 0xf0(0x01)
	char bOverrideVelocity : 1; // 0xf0(0x01)
	char bUseWorldSpacePosition : 1; // 0xf0(0x01)
	char Positive_X : 1; // 0xf0(0x01)
	char Positive_Y : 1; // 0xf0(0x01)
	char Positive_Z : 1; // 0xf0(0x01)
	char Negative_X : 1; // 0xf0(0x01)
	char Negative_Y : 1; // 0xf1(0x01)
	char Negative_Z : 1; // 0xf1(0x01)
	char pad_F1_2 : 6; // 0xf1(0x01)
	char pad_F2[0x6]; // 0xf2(0x06)
};

// Class Engine.ParticleModuleAttractorPointGravity
// Size: 0x88 (Inherited: 0x30)
struct UParticleModuleAttractorPointGravity : UParticleModuleAttractorBase {
	struct FVector Position; // 0x30(0x18)
	float Radius; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct UDistributionFloat* Strength; // 0x50(0x08)
	struct FRawDistributionFloat StrengthRaw; // 0x58(0x30)
};

// Class Engine.ParticleModuleBeamBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleBeamBase : UParticleModule {
};

// Class Engine.ParticleModuleBeamModifier
// Size: 0x138 (Inherited: 0x30)
struct UParticleModuleBeamModifier : UParticleModuleBeamBase {
	enum class BeamModifierType ModifierType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FBeamModifierOptions PositionOptions; // 0x34(0x04)
	struct FRawDistributionVector Position; // 0x38(0x60)
	struct FBeamModifierOptions TangentOptions; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FRawDistributionVector Tangent; // 0xa0(0x60)
	char bAbsoluteTangent : 1; // 0x100(0x01)
	char pad_100_1 : 7; // 0x100(0x01)
	char pad_101[0x3]; // 0x101(0x03)
	struct FBeamModifierOptions StrengthOptions; // 0x104(0x04)
	struct FRawDistributionFloat Strength; // 0x108(0x30)
};

// Class Engine.ParticleModuleBeamNoise
// Size: 0x1c0 (Inherited: 0x30)
struct UParticleModuleBeamNoise : UParticleModuleBeamBase {
	char bLowFreq_Enabled : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t Frequency; // 0x34(0x04)
	int32_t Frequency_LowRange; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRawDistributionVector NoiseRange; // 0x40(0x60)
	struct FRawDistributionFloat NoiseRangeScale; // 0xa0(0x30)
	char bNRScaleEmitterTime : 1; // 0xd0(0x01)
	char pad_D0_1 : 7; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
	struct FRawDistributionVector NoiseSpeed; // 0xd8(0x60)
	char bSmooth : 1; // 0x138(0x01)
	char pad_138_1 : 7; // 0x138(0x01)
	char pad_139[0x3]; // 0x139(0x03)
	float NoiseLockRadius; // 0x13c(0x04)
	char bNoiseLock : 1; // 0x140(0x01)
	char bOscillate : 1; // 0x140(0x01)
	char pad_140_2 : 6; // 0x140(0x01)
	char pad_141[0x3]; // 0x141(0x03)
	float NoiseLockTime; // 0x144(0x04)
	float NoiseTension; // 0x148(0x04)
	char bUseNoiseTangents : 1; // 0x14c(0x01)
	char pad_14C_1 : 7; // 0x14c(0x01)
	char pad_14D[0x3]; // 0x14d(0x03)
	struct FRawDistributionFloat NoiseTangentStrength; // 0x150(0x30)
	int32_t NoiseTessellation; // 0x180(0x04)
	char bTargetNoise : 1; // 0x184(0x01)
	char pad_184_1 : 7; // 0x184(0x01)
	char pad_185[0x3]; // 0x185(0x03)
	float FrequencyDistance; // 0x188(0x04)
	char bApplyNoiseScale : 1; // 0x18c(0x01)
	char pad_18C_1 : 7; // 0x18c(0x01)
	char pad_18D[0x3]; // 0x18d(0x03)
	struct FRawDistributionFloat NoiseScale; // 0x190(0x30)
};

// Class Engine.ParticleModuleBeamSource
// Size: 0x148 (Inherited: 0x30)
struct UParticleModuleBeamSource : UParticleModuleBeamBase {
	enum class Beam2SourceTargetMethod SourceMethod; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FName SourceName; // 0x34(0x04)
	char bSourceAbsolute : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FRawDistributionVector Source; // 0x40(0x60)
	char bLockSource : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	enum class Beam2SourceTargetTangentMethod SourceTangentMethod; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	struct FRawDistributionVector SourceTangent; // 0xa8(0x60)
	char bLockSourceTangent : 1; // 0x108(0x01)
	char pad_108_1 : 7; // 0x108(0x01)
	char pad_109[0x7]; // 0x109(0x07)
	struct FRawDistributionFloat SourceStrength; // 0x110(0x30)
	char bLockSourceStength : 1; // 0x140(0x01)
	char pad_140_1 : 7; // 0x140(0x01)
	char pad_141[0x7]; // 0x141(0x07)
};

// Class Engine.ParticleModuleBeamTarget
// Size: 0x148 (Inherited: 0x30)
struct UParticleModuleBeamTarget : UParticleModuleBeamBase {
	enum class Beam2SourceTargetMethod TargetMethod; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FName TargetName; // 0x34(0x04)
	struct FRawDistributionVector Target; // 0x38(0x60)
	char bTargetAbsolute : 1; // 0x98(0x01)
	char bLockTarget : 1; // 0x98(0x01)
	char pad_98_2 : 6; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	enum class Beam2SourceTargetTangentMethod TargetTangentMethod; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	struct FRawDistributionVector TargetTangent; // 0xa0(0x60)
	char bLockTargetTangent : 1; // 0x100(0x01)
	char pad_100_1 : 7; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
	struct FRawDistributionFloat TargetStrength; // 0x108(0x30)
	char bLockTargetStength : 1; // 0x138(0x01)
	char pad_138_1 : 7; // 0x138(0x01)
	char pad_139[0x3]; // 0x139(0x03)
	float LockRadius; // 0x13c(0x04)
	char pad_140[0x8]; // 0x140(0x08)
};

// Class Engine.ParticleModuleCameraBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleCameraBase : UParticleModule {
};

// Class Engine.ParticleModuleCameraOffset
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleCameraOffset : UParticleModuleCameraBase {
	struct FRawDistributionFloat CameraOffset; // 0x30(0x30)
	char bSpawnTimeOnly : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	enum class EParticleCameraOffsetUpdateMethod UpdateMethod; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.ParticleModuleCollisionBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleCollisionBase : UParticleModule {
};

// Class Engine.ParticleModuleCollision
// Size: 0x1c0 (Inherited: 0x30)
struct UParticleModuleCollision : UParticleModuleCollisionBase {
	struct FRawDistributionVector DampingFactor; // 0x30(0x60)
	struct FRawDistributionVector DampingFactorRotation; // 0x90(0x60)
	struct FRawDistributionFloat MaxCollisions; // 0xf0(0x30)
	enum class EParticleCollisionComplete CollisionCompletionOption; // 0x120(0x01)
	char pad_121[0x7]; // 0x121(0x07)
	struct TArray<enum class EObjectTypeQuery> CollisionTypes; // 0x128(0x10)
	char pad_138[0x8]; // 0x138(0x08)
	char bApplyPhysics : 1; // 0x140(0x01)
	char bIgnoreTriggerVolumes : 1; // 0x140(0x01)
	char pad_140_2 : 6; // 0x140(0x01)
	char pad_141[0x7]; // 0x141(0x07)
	struct FRawDistributionFloat ParticleMass; // 0x148(0x30)
	float DirScalar; // 0x178(0x04)
	char bPawnsDoNotDecrementCount : 1; // 0x17c(0x01)
	char bOnlyVerticalNormalsDecrementCount : 1; // 0x17c(0x01)
	char pad_17C_2 : 6; // 0x17c(0x01)
	char pad_17D[0x3]; // 0x17d(0x03)
	float VerticalFudgeFactor; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct FRawDistributionFloat DelayAmount; // 0x188(0x30)
	char bDropDetail : 1; // 0x1b8(0x01)
	char bCollideOnlyIfVisible : 1; // 0x1b8(0x01)
	char bIgnoreSourceActor : 1; // 0x1b8(0x01)
	char pad_1B8_3 : 5; // 0x1b8(0x01)
	char pad_1B9[0x3]; // 0x1b9(0x03)
	float MaxCollisionDistance; // 0x1bc(0x04)
};

// Class Engine.ParticleModuleCollisionGPU
// Size: 0xa8 (Inherited: 0x30)
struct UParticleModuleCollisionGPU : UParticleModuleCollisionBase {
	struct FRawDistributionFloat Resilience; // 0x30(0x30)
	struct FRawDistributionFloat ResilienceScaleOverLife; // 0x60(0x30)
	float Friction; // 0x90(0x04)
	float RandomSpread; // 0x94(0x04)
	float RandomDistribution; // 0x98(0x04)
	float RadiusScale; // 0x9c(0x04)
	float RadiusBias; // 0xa0(0x04)
	enum class EParticleCollisionResponse Response; // 0xa4(0x01)
	enum class EParticleCollisionMode CollisionMode; // 0xa5(0x01)
	char pad_A6[0x2]; // 0xa6(0x02)
};

// Class Engine.ParticleModuleColorBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleColorBase : UParticleModule {
};

// Class Engine.ParticleModuleColor
// Size: 0xc8 (Inherited: 0x30)
struct UParticleModuleColor : UParticleModuleColorBase {
	struct FRawDistributionVector StartColor; // 0x30(0x60)
	struct FRawDistributionFloat StartAlpha; // 0x90(0x30)
	char bClampAlpha : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
};

// Class Engine.ParticleModuleColorOverLife
// Size: 0xc8 (Inherited: 0x30)
struct UParticleModuleColorOverLife : UParticleModuleColorBase {
	struct FRawDistributionVector ColorOverLife; // 0x30(0x60)
	struct FRawDistributionFloat AlphaOverLife; // 0x90(0x30)
	char bClampAlpha : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
};

// Class Engine.ParticleModuleColorScaleOverLife
// Size: 0xc8 (Inherited: 0x30)
struct UParticleModuleColorScaleOverLife : UParticleModuleColorBase {
	struct FRawDistributionVector ColorScaleOverLife; // 0x30(0x60)
	struct FRawDistributionFloat AlphaScaleOverLife; // 0x90(0x30)
	char bEmitterTime : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
};

// Class Engine.ParticleModuleColor_Seeded
// Size: 0xe0 (Inherited: 0xc8)
struct UParticleModuleColor_Seeded : UParticleModuleColor {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xc8(0x18)
};

// Class Engine.ParticleModuleEventBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleEventBase : UParticleModule {
};

// Class Engine.ParticleModuleEventGenerator
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleEventGenerator : UParticleModuleEventBase {
	struct TArray<struct FParticleEvent_GenerateInfo> Events; // 0x30(0x10)
};

// Class Engine.ParticleModuleEventReceiverBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleEventReceiverBase : UParticleModuleEventBase {
	enum class EParticleEventType EventGeneratorType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FName EventName; // 0x34(0x04)
};

// Class Engine.ParticleModuleEventReceiverKillParticles
// Size: 0x40 (Inherited: 0x38)
struct UParticleModuleEventReceiverKillParticles : UParticleModuleEventReceiverBase {
	char bStopSpawning : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.ParticleModuleEventReceiverSpawn
// Size: 0xe8 (Inherited: 0x38)
struct UParticleModuleEventReceiverSpawn : UParticleModuleEventReceiverBase {
	struct FRawDistributionFloat SpawnCount; // 0x38(0x30)
	char bUseParticleTime : 1; // 0x68(0x01)
	char bUsePSysLocation : 1; // 0x68(0x01)
	char bInheritVelocity : 1; // 0x68(0x01)
	char pad_68_3 : 5; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct FRawDistributionVector InheritVelocityScale; // 0x70(0x60)
	struct TArray<struct UPhysicalMaterial*> PhysicalMaterials; // 0xd0(0x10)
	char bBanPhysicalMaterials : 1; // 0xe0(0x01)
	char pad_E0_1 : 7; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
};

// Class Engine.ParticleModuleEventSendToGame
// Size: 0x28 (Inherited: 0x28)
struct UParticleModuleEventSendToGame : UObject {
};

// Class Engine.ParticleModuleKillBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleKillBase : UParticleModule {
};

// Class Engine.ParticleModuleKillBox
// Size: 0xf8 (Inherited: 0x30)
struct UParticleModuleKillBox : UParticleModuleKillBase {
	struct FRawDistributionVector LowerLeftCorner; // 0x30(0x60)
	struct FRawDistributionVector UpperRightCorner; // 0x90(0x60)
	char bAbsolute : 1; // 0xf0(0x01)
	char bKillInside : 1; // 0xf0(0x01)
	char bAxisAlignedAndFixedSize : 1; // 0xf0(0x01)
	char pad_F0_3 : 5; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
};

// Class Engine.ParticleModuleKillHeight
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleKillHeight : UParticleModuleKillBase {
	struct FRawDistributionFloat Height; // 0x30(0x30)
	char bAbsolute : 1; // 0x60(0x01)
	char bFloor : 1; // 0x60(0x01)
	char bApplyPSysScale : 1; // 0x60(0x01)
	char pad_60_3 : 5; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
};

// Class Engine.ParticleModuleLifetimeBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleLifetimeBase : UParticleModule {
};

// Class Engine.ParticleModuleLifetime
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleLifetime : UParticleModuleLifetimeBase {
	struct FRawDistributionFloat LifeTime; // 0x30(0x30)
};

// Class Engine.ParticleModuleLifetime_Seeded
// Size: 0x78 (Inherited: 0x60)
struct UParticleModuleLifetime_Seeded : UParticleModuleLifetime {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x18)
};

// Class Engine.ParticleModuleLightBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleLightBase : UParticleModule {
};

// Class Engine.ParticleModuleLight
// Size: 0x138 (Inherited: 0x30)
struct UParticleModuleLight : UParticleModuleLightBase {
	bool bUseInverseSquaredFalloff; // 0x30(0x01)
	bool bAffectsTranslucency; // 0x31(0x01)
	bool bPreviewLightRadius; // 0x32(0x01)
	char pad_33[0x1]; // 0x33(0x01)
	float SpawnFraction; // 0x34(0x04)
	struct FRawDistributionVector ColorScaleOverLife; // 0x38(0x60)
	struct FRawDistributionFloat BrightnessOverLife; // 0x98(0x30)
	struct FRawDistributionFloat RadiusScale; // 0xc8(0x30)
	struct FRawDistributionFloat LightExponent; // 0xf8(0x30)
	struct FLightingChannels LightingChannels; // 0x128(0x01)
	char pad_129[0x3]; // 0x129(0x03)
	float VolumetricScatteringIntensity; // 0x12c(0x04)
	bool bHighQualityLights; // 0x130(0x01)
	bool bShadowCastingLights; // 0x131(0x01)
	char pad_132[0x6]; // 0x132(0x06)
};

// Class Engine.ParticleModuleLight_Seeded
// Size: 0x150 (Inherited: 0x138)
struct UParticleModuleLight_Seeded : UParticleModuleLight {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x138(0x18)
};

// Class Engine.ParticleModuleLocationBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleLocationBase : UParticleModule {
};

// Class Engine.ParticleModuleLocation
// Size: 0x98 (Inherited: 0x30)
struct UParticleModuleLocation : UParticleModuleLocationBase {
	struct FRawDistributionVector StartLocation; // 0x30(0x60)
	float DistributeOverNPoints; // 0x90(0x04)
	float DistributeThreshold; // 0x94(0x04)
};

// Class Engine.ParticleModuleLocationBoneSocket
// Size: 0x78 (Inherited: 0x30)
struct UParticleModuleLocationBoneSocket : UParticleModuleLocationBase {
	enum class ELocationBoneSocketSource SourceType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FVector UniversalOffset; // 0x38(0x18)
	struct TArray<struct FLocationBoneSocketInfo> SourceLocations; // 0x50(0x10)
	enum class ELocationBoneSocketSelectionMethod SelectionMethod; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	char bUpdatePositionEachFrame : 1; // 0x64(0x01)
	char bOrientMeshEmitters : 1; // 0x64(0x01)
	char bInheritBoneVelocity : 1; // 0x64(0x01)
	char pad_64_3 : 5; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	float InheritVelocityScale; // 0x68(0x04)
	struct FName SkelMeshActorParamName; // 0x6c(0x04)
	int32_t NumPreSelectedIndices; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class Engine.ParticleModuleLocationDirect
// Size: 0x1b0 (Inherited: 0x30)
struct UParticleModuleLocationDirect : UParticleModuleLocationBase {
	struct FRawDistributionVector Location; // 0x30(0x60)
	struct FRawDistributionVector LocationOffset; // 0x90(0x60)
	struct FRawDistributionVector ScaleFactor; // 0xf0(0x60)
	struct FRawDistributionVector Direction; // 0x150(0x60)
};

// Class Engine.ParticleModuleLocationEmitter
// Size: 0x48 (Inherited: 0x30)
struct UParticleModuleLocationEmitter : UParticleModuleLocationBase {
	struct FName EmitterName; // 0x30(0x04)
	enum class ELocationEmitterSelectionMethod SelectionMethod; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	char InheritSourceVelocity : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float InheritSourceVelocityScale; // 0x3c(0x04)
	char bInheritSourceRotation : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float InheritSourceRotationScale; // 0x44(0x04)
};

// Class Engine.ParticleModuleLocationEmitterDirect
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleLocationEmitterDirect : UParticleModuleLocationBase {
	struct FName EmitterName; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.ParticleModuleLocationPrimitiveBase
// Size: 0xc8 (Inherited: 0x30)
struct UParticleModuleLocationPrimitiveBase : UParticleModuleLocationBase {
	char Positive_X : 1; // 0x30(0x01)
	char Positive_Y : 1; // 0x30(0x01)
	char Positive_Z : 1; // 0x30(0x01)
	char Negative_X : 1; // 0x30(0x01)
	char Negative_Y : 1; // 0x30(0x01)
	char Negative_Z : 1; // 0x30(0x01)
	char SurfaceOnly : 1; // 0x30(0x01)
	char Velocity : 1; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FRawDistributionFloat VelocityScale; // 0x38(0x30)
	struct FRawDistributionVector StartLocation; // 0x68(0x60)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// Size: 0x138 (Inherited: 0xc8)
struct UParticleModuleLocationPrimitiveCylinder : UParticleModuleLocationPrimitiveBase {
	char RadialVelocity : 1; // 0xc8(0x01)
	char pad_C8_1 : 7; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)
	struct FRawDistributionFloat StartRadius; // 0xd0(0x30)
	struct FRawDistributionFloat StartHeight; // 0x100(0x30)
	enum class CylinderHeightAxis HeightAxis; // 0x130(0x01)
	char pad_131[0x7]; // 0x131(0x07)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// Size: 0x150 (Inherited: 0x138)
struct UParticleModuleLocationPrimitiveCylinder_Seeded : UParticleModuleLocationPrimitiveCylinder {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x138(0x18)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere
// Size: 0xf8 (Inherited: 0xc8)
struct UParticleModuleLocationPrimitiveSphere : UParticleModuleLocationPrimitiveBase {
	struct FRawDistributionFloat StartRadius; // 0xc8(0x30)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// Size: 0x110 (Inherited: 0xf8)
struct UParticleModuleLocationPrimitiveSphere_Seeded : UParticleModuleLocationPrimitiveSphere {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xf8(0x18)
};

// Class Engine.ParticleModuleLocationPrimitiveTriangle
// Size: 0x120 (Inherited: 0x30)
struct UParticleModuleLocationPrimitiveTriangle : UParticleModuleLocationBase {
	struct FRawDistributionVector StartOffset; // 0x30(0x60)
	struct FRawDistributionFloat Height; // 0x90(0x30)
	struct FRawDistributionFloat Angle; // 0xc0(0x30)
	struct FRawDistributionFloat Thickness; // 0xf0(0x30)
};

// Class Engine.ParticleModuleLocationSkelVertSurface
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleLocationSkelVertSurface : UParticleModuleLocationBase {
	enum class ELocationSkelVertSurfaceSource SourceType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FVector UniversalOffset; // 0x38(0x18)
	char bUpdatePositionEachFrame : 1; // 0x50(0x01)
	char bOrientMeshEmitters : 1; // 0x50(0x01)
	char bInheritBoneVelocity : 1; // 0x50(0x01)
	char pad_50_3 : 5; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	float InheritVelocityScale; // 0x54(0x04)
	struct FName SkelMeshActorParamName; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct TArray<struct FName> ValidAssociatedBones; // 0x60(0x10)
	char bEnforceNormalCheck : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct FVector NormalToCompare; // 0x78(0x18)
	float NormalCheckToleranceDegrees; // 0x90(0x04)
	float NormalCheckTolerance; // 0x94(0x04)
	struct TArray<int32_t> ValidMaterialIndices; // 0x98(0x10)
	char bInheritVertexColor : 1; // 0xa8(0x01)
	char bInheritUV : 1; // 0xa8(0x01)
	char pad_A8_2 : 6; // 0xa8(0x01)
	char pad_A9[0x3]; // 0xa9(0x03)
	uint32_t InheritUVChannel; // 0xac(0x04)
};

// Class Engine.ParticleModuleLocationWorldOffset
// Size: 0x98 (Inherited: 0x98)
struct UParticleModuleLocationWorldOffset : UParticleModuleLocation {
};

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// Size: 0xb0 (Inherited: 0x98)
struct UParticleModuleLocationWorldOffset_Seeded : UParticleModuleLocationWorldOffset {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x98(0x18)
};

// Class Engine.ParticleModuleLocation_Seeded
// Size: 0xb0 (Inherited: 0x98)
struct UParticleModuleLocation_Seeded : UParticleModuleLocation {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x98(0x18)
};

// Class Engine.ParticleModuleMaterialBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleMaterialBase : UParticleModule {
};

// Class Engine.ParticleModuleMeshMaterial
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleMeshMaterial : UParticleModuleMaterialBase {
	struct TArray<struct UMaterialInterface*> MeshMaterials; // 0x30(0x10)
};

// Class Engine.ParticleModuleRotationBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleRotationBase : UParticleModule {
};

// Class Engine.ParticleModuleMeshRotation
// Size: 0x98 (Inherited: 0x30)
struct UParticleModuleMeshRotation : UParticleModuleRotationBase {
	struct FRawDistributionVector StartRotation; // 0x30(0x60)
	char bInheritParent : 1; // 0x90(0x01)
	char pad_90_1 : 7; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class Engine.ParticleModuleRotationRateBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleRotationRateBase : UParticleModule {
};

// Class Engine.ParticleModuleMeshRotationRate
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleMeshRotationRate : UParticleModuleRotationRateBase {
	struct FRawDistributionVector StartRotationRate; // 0x30(0x60)
};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleMeshRotationRateMultiplyLife : UParticleModuleRotationRateBase {
	struct FRawDistributionVector LifeMultiplier; // 0x30(0x60)
};

// Class Engine.ParticleModuleMeshRotationRateOverLife
// Size: 0x98 (Inherited: 0x30)
struct UParticleModuleMeshRotationRateOverLife : UParticleModuleRotationRateBase {
	struct FRawDistributionVector RotRate; // 0x30(0x60)
	char bScaleRotRate : 1; // 0x90(0x01)
	char pad_90_1 : 7; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// Size: 0xa8 (Inherited: 0x90)
struct UParticleModuleMeshRotationRate_Seeded : UParticleModuleMeshRotationRate {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x90(0x18)
};

// Class Engine.ParticleModuleMeshRotation_Seeded
// Size: 0xb0 (Inherited: 0x98)
struct UParticleModuleMeshRotation_Seeded : UParticleModuleMeshRotation {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x98(0x18)
};

// Class Engine.ParticleModuleOrbitBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleOrbitBase : UParticleModule {
	char bUseEmitterTime : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleOrbit
// Size: 0x178 (Inherited: 0x38)
struct UParticleModuleOrbit : UParticleModuleOrbitBase {
	enum class EOrbitChainMode ChainMode; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FRawDistributionVector OffsetAmount; // 0x40(0x60)
	struct FOrbitOptions OffsetOptions; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
	struct FRawDistributionVector RotationAmount; // 0xa8(0x60)
	struct FOrbitOptions RotationOptions; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct FRawDistributionVector RotationRateAmount; // 0x110(0x60)
	struct FOrbitOptions RotationRateOptions; // 0x170(0x04)
	char pad_174[0x4]; // 0x174(0x04)
};

// Class Engine.ParticleModuleOrientationBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleOrientationBase : UParticleModule {
};

// Class Engine.ParticleModuleOrientationAxisLock
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleOrientationAxisLock : UParticleModuleOrientationBase {
	enum class EParticleAxisLock LockAxisFlags; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleParameterBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleParameterBase : UParticleModule {
};

// Class Engine.ParticleModuleParameterDynamic
// Size: 0x48 (Inherited: 0x30)
struct UParticleModuleParameterDynamic : UParticleModuleParameterBase {
	struct TArray<struct FEmitterDynamicParameter> DynamicParams; // 0x30(0x10)
	int32_t UpdateFlags; // 0x40(0x04)
	char bUsesVelocity : 1; // 0x44(0x01)
	char pad_44_1 : 7; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
};

// Class Engine.ParticleModuleParameterDynamic_Seeded
// Size: 0x60 (Inherited: 0x48)
struct UParticleModuleParameterDynamic_Seeded : UParticleModuleParameterDynamic {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x48(0x18)
};

// Class Engine.ParticleModulePivotOffset
// Size: 0x40 (Inherited: 0x30)
struct UParticleModulePivotOffset : UParticleModuleLocationBase {
	struct FVector2D PivotOffset; // 0x30(0x10)
};

// Class Engine.ParticleModuleRequired
// Size: 0x178 (Inherited: 0x30)
struct UParticleModuleRequired : UParticleModule {
	struct UMaterialInterface* Material; // 0x30(0x08)
	float MinFacingCameraBlendDistance; // 0x38(0x04)
	float MaxFacingCameraBlendDistance; // 0x3c(0x04)
	struct FVector EmitterOrigin; // 0x40(0x18)
	struct FRotator EmitterRotation; // 0x58(0x18)
	enum class EParticleScreenAlignment ScreenAlignment; // 0x70(0x01)
	char bUseLocalSpace : 1; // 0x71(0x01)
	char bKillOnDeactivate : 1; // 0x71(0x01)
	char bKillOnCompleted : 1; // 0x71(0x01)
	char pad_71_3 : 5; // 0x71(0x01)
	enum class EParticleSortMode SortMode; // 0x72(0x01)
	char bUseLegacyEmitterTime : 1; // 0x73(0x01)
	char bRemoveHMDRoll : 1; // 0x73(0x01)
	char bSupportLargeWorldCoordinates : 1; // 0x73(0x01)
	char bEmitterDurationUseRange : 1; // 0x73(0x01)
	char pad_73_4 : 4; // 0x73(0x01)
	float EmitterDuration; // 0x74(0x04)
	struct FRawDistributionFloat SpawnRate; // 0x78(0x30)
	struct TArray<struct FParticleBurst> BurstList; // 0xa8(0x10)
	float EmitterDelay; // 0xb8(0x04)
	float EmitterDelayLow; // 0xbc(0x04)
	char bDelayFirstLoopOnly : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	enum class EParticleSubUVInterpMethod InterpolationMethod; // 0xc1(0x01)
	char bScaleUV : 1; // 0xc2(0x01)
	char bEmitterDelayUseRange : 1; // 0xc2(0x01)
	char pad_C2_2 : 6; // 0xc2(0x01)
	enum class EParticleBurstMethod ParticleBurstMethod; // 0xc3(0x01)
	char bOverrideSystemMacroUV : 1; // 0xc4(0x01)
	char bUseMaxDrawCount : 1; // 0xc4(0x01)
	char pad_C4_2 : 6; // 0xc4(0x01)
	enum class EOpacitySourceMode OpacitySourceMode; // 0xc5(0x01)
	enum class EEmitterNormalsMode EmitterNormalsMode; // 0xc6(0x01)
	char bOrbitModuleAffectsVelocityAlignment : 1; // 0xc7(0x01)
	char pad_C7_1 : 7; // 0xc7(0x01)
	int32_t SubImages_Horizontal; // 0xc8(0x04)
	int32_t SubImages_Vertical; // 0xcc(0x04)
	float RandomImageTime; // 0xd0(0x04)
	int32_t RandomImageChanges; // 0xd4(0x04)
	struct FVector MacroUVPosition; // 0xd8(0x18)
	float MacroUVRadius; // 0xf0(0x04)
	enum class EParticleUVFlipMode UVFlippingMode; // 0xf4(0x01)
	enum class ESubUVBoundingVertexCount BoundingMode; // 0xf5(0x01)
	char bDurationRecalcEachLoop : 1; // 0xf6(0x01)
	char pad_F6_1 : 7; // 0xf6(0x01)
	char pad_F7[0x1]; // 0xf7(0x01)
	struct FVector NormalsSphereCenter; // 0xf8(0x18)
	float AlphaThreshold; // 0x110(0x04)
	int32_t EmitterLoops; // 0x114(0x04)
	struct UTexture2D* CutoutTexture; // 0x118(0x08)
	int32_t MaxDrawCount; // 0x120(0x04)
	float EmitterDurationLow; // 0x124(0x04)
	struct FVector NormalsCylinderDirection; // 0x128(0x18)
	struct TArray<struct FName> NamedMaterialOverrides; // 0x140(0x10)
	char pad_150[0x28]; // 0x150(0x28)
};

// Class Engine.ParticleModuleRotation
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleRotation : UParticleModuleRotationBase {
	struct FRawDistributionFloat StartRotation; // 0x30(0x30)
};

// Class Engine.ParticleModuleRotationOverLifetime
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleRotationOverLifetime : UParticleModuleRotationBase {
	struct FRawDistributionFloat RotationOverLife; // 0x30(0x30)
	char Scale : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
};

// Class Engine.ParticleModuleRotationRate
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleRotationRate : UParticleModuleRotationRateBase {
	struct FRawDistributionFloat StartRotationRate; // 0x30(0x30)
};

// Class Engine.ParticleModuleRotationRateMultiplyLife
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleRotationRateMultiplyLife : UParticleModuleRotationRateBase {
	struct FRawDistributionFloat LifeMultiplier; // 0x30(0x30)
};

// Class Engine.ParticleModuleRotationRate_Seeded
// Size: 0x78 (Inherited: 0x60)
struct UParticleModuleRotationRate_Seeded : UParticleModuleRotationRate {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x18)
};

// Class Engine.ParticleModuleRotation_Seeded
// Size: 0x78 (Inherited: 0x60)
struct UParticleModuleRotation_Seeded : UParticleModuleRotation {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x18)
};

// Class Engine.ParticleModuleSizeBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleSizeBase : UParticleModule {
};

// Class Engine.ParticleModuleSize
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleSize : UParticleModuleSizeBase {
	struct FRawDistributionVector StartSize; // 0x30(0x60)
};

// Class Engine.ParticleModuleSizeMultiplyLife
// Size: 0x98 (Inherited: 0x30)
struct UParticleModuleSizeMultiplyLife : UParticleModuleSizeBase {
	struct FRawDistributionVector LifeMultiplier; // 0x30(0x60)
	char MultiplyX : 1; // 0x90(0x01)
	char MultiplyY : 1; // 0x90(0x01)
	char MultiplyZ : 1; // 0x90(0x01)
	char pad_90_3 : 5; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class Engine.ParticleModuleSizeScale
// Size: 0x98 (Inherited: 0x30)
struct UParticleModuleSizeScale : UParticleModuleSizeBase {
	struct FRawDistributionVector SizeScale; // 0x30(0x60)
	char EnableX : 1; // 0x90(0x01)
	char EnableY : 1; // 0x90(0x01)
	char EnableZ : 1; // 0x90(0x01)
	char pad_90_3 : 5; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class Engine.ParticleModuleSizeScaleBySpeed
// Size: 0x50 (Inherited: 0x30)
struct UParticleModuleSizeScaleBySpeed : UParticleModuleSizeBase {
	struct FVector2D SpeedScale; // 0x30(0x10)
	struct FVector2D MaxScale; // 0x40(0x10)
};

// Class Engine.ParticleModuleSize_Seeded
// Size: 0xa8 (Inherited: 0x90)
struct UParticleModuleSize_Seeded : UParticleModuleSize {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x90(0x18)
};

// Class Engine.ParticleModuleSourceMovement
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleSourceMovement : UParticleModuleLocationBase {
	struct FRawDistributionVector SourceMovementScale; // 0x30(0x60)
};

// Class Engine.ParticleModuleSpawnBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleSpawnBase : UParticleModule {
	char bProcessSpawnRate : 1; // 0x30(0x01)
	char bProcessBurstList : 1; // 0x30(0x01)
	char pad_30_2 : 6; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleSpawn
// Size: 0xe0 (Inherited: 0x38)
struct UParticleModuleSpawn : UParticleModuleSpawnBase {
	struct FRawDistributionFloat Rate; // 0x38(0x30)
	struct FRawDistributionFloat RateScale; // 0x68(0x30)
	struct TArray<struct FParticleBurst> BurstList; // 0x98(0x10)
	struct FRawDistributionFloat BurstScale; // 0xa8(0x30)
	enum class EParticleBurstMethod ParticleBurstMethod; // 0xd8(0x01)
	char pad_D9[0x3]; // 0xd9(0x03)
	char bApplyGlobalSpawnRateScale : 1; // 0xdc(0x01)
	char pad_DC_1 : 7; // 0xdc(0x01)
	char pad_DD[0x3]; // 0xdd(0x03)
};

// Class Engine.ParticleModuleSpawnPerUnit
// Size: 0x78 (Inherited: 0x38)
struct UParticleModuleSpawnPerUnit : UParticleModuleSpawnBase {
	float UnitScalar; // 0x38(0x04)
	float MovementTolerance; // 0x3c(0x04)
	struct FRawDistributionFloat SpawnPerUnit; // 0x40(0x30)
	float MaxFrameDistance; // 0x70(0x04)
	char bIgnoreSpawnRateWhenMoving : 1; // 0x74(0x01)
	char bIgnoreMovementAlongX : 1; // 0x74(0x01)
	char bIgnoreMovementAlongY : 1; // 0x74(0x01)
	char bIgnoreMovementAlongZ : 1; // 0x74(0x01)
	char pad_74_4 : 4; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
};

// Class Engine.ParticleModuleSubUVBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleSubUVBase : UParticleModule {
};

// Class Engine.ParticleModuleSubUV
// Size: 0x70 (Inherited: 0x30)
struct UParticleModuleSubUV : UParticleModuleSubUVBase {
	struct USubUVAnimation* Animation; // 0x30(0x08)
	struct FRawDistributionFloat SubImageIndex; // 0x38(0x30)
	char bUseRealTime : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.ParticleModuleSubUVMovie
// Size: 0xb0 (Inherited: 0x70)
struct UParticleModuleSubUVMovie : UParticleModuleSubUV {
	char bUseEmitterTime : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct FRawDistributionFloat FrameRate; // 0x78(0x30)
	int32_t StartingFrame; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Engine.ParticleModuleTrailBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleTrailBase : UParticleModule {
};

// Class Engine.ParticleModuleTrailSource
// Size: 0x88 (Inherited: 0x30)
struct UParticleModuleTrailSource : UParticleModuleTrailBase {
	enum class ETrail2SourceMethod SourceMethod; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FName SourceName; // 0x34(0x04)
	struct FRawDistributionFloat SourceStrength; // 0x38(0x30)
	char bLockSourceStength : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x3]; // 0x69(0x03)
	int32_t SourceOffsetCount; // 0x6c(0x04)
	struct TArray<struct FVector> SourceOffsetDefaults; // 0x70(0x10)
	enum class EParticleSourceSelectionMethod SelectionMethod; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	char bInheritRotation : 1; // 0x84(0x01)
	char pad_84_1 : 7; // 0x84(0x01)
	char pad_85[0x3]; // 0x85(0x03)
};

// Class Engine.ParticleModuleTypeDataBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleTypeDataBase : UParticleModule {
};

// Class Engine.ParticleModuleTypeDataAnimTrail
// Size: 0x48 (Inherited: 0x30)
struct UParticleModuleTypeDataAnimTrail : UParticleModuleTypeDataBase {
	char bDeadTrailsOnDeactivate : 1; // 0x30(0x01)
	char bEnablePreviousTangentRecalculation : 1; // 0x30(0x01)
	char bTangentRecalculationEveryFrame : 1; // 0x30(0x01)
	char pad_30_3 : 5; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float TilingDistance; // 0x34(0x04)
	float DistanceTessellationStepSize; // 0x38(0x04)
	float TangentTessellationStepSize; // 0x3c(0x04)
	float WidthTessellationStepSize; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.ParticleModuleTypeDataBeam2
// Size: 0x148 (Inherited: 0x30)
struct UParticleModuleTypeDataBeam2 : UParticleModuleTypeDataBase {
	enum class EBeam2Method BeamMethod; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t TextureTile; // 0x34(0x04)
	float TextureTileDistance; // 0x38(0x04)
	int32_t Sheets; // 0x3c(0x04)
	int32_t MaxBeamCount; // 0x40(0x04)
	float Speed; // 0x44(0x04)
	int32_t InterpolationPoints; // 0x48(0x04)
	char bAlwaysOn : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	int32_t UpVectorStepSize; // 0x50(0x04)
	struct FName BranchParentName; // 0x54(0x04)
	struct FRawDistributionFloat Distance; // 0x58(0x30)
	enum class EBeamTaperMethod TaperMethod; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
	struct FRawDistributionFloat TaperFactor; // 0x90(0x30)
	struct FRawDistributionFloat TaperScale; // 0xc0(0x30)
	char RenderGeometry : 1; // 0xf0(0x01)
	char RenderDirectLine : 1; // 0xf0(0x01)
	char RenderLines : 1; // 0xf0(0x01)
	char RenderTessellation : 1; // 0xf0(0x01)
	char pad_F0_4 : 4; // 0xf0(0x01)
	char pad_F1[0x57]; // 0xf1(0x57)
};

// Class Engine.ParticleModuleTypeDataGpu
// Size: 0x5d0 (Inherited: 0x30)
struct UParticleModuleTypeDataGpu : UParticleModuleTypeDataBase {
	struct FGPUSpriteEmitterInfo EmitterInfo; // 0x30(0x350)
	struct FGPUSpriteResourceData ResourceData; // 0x380(0x240)
	float CameraMotionBlurAmount; // 0x5c0(0x04)
	char bClearExistingParticlesOnInit : 1; // 0x5c4(0x01)
	char pad_5C4_1 : 7; // 0x5c4(0x01)
	char pad_5C5[0xb]; // 0x5c5(0x0b)
};

// Class Engine.ParticleModuleTypeDataMesh
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleTypeDataMesh : UParticleModuleTypeDataBase {
	struct UStaticMesh* Mesh; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)
	float LODSizeScale; // 0x40(0x04)
	char bUseStaticMeshLODs : 1; // 0x44(0x01)
	char CastShadows : 1; // 0x44(0x01)
	char DoCollisions : 1; // 0x44(0x01)
	char pad_44_3 : 5; // 0x44(0x01)
	enum class EMeshScreenAlignment MeshAlignment; // 0x45(0x01)
	char bOverrideMaterial : 1; // 0x46(0x01)
	char bOverrideDefaultMotionBlurSettings : 1; // 0x46(0x01)
	char bEnableMotionBlur : 1; // 0x46(0x01)
	char pad_46_3 : 5; // 0x46(0x01)
	char pad_47[0x1]; // 0x47(0x01)
	struct FRawDistributionVector RollPitchYawRange; // 0x48(0x60)
	enum class EParticleAxisLock AxisLockOption; // 0xa8(0x01)
	char bCameraFacing : 1; // 0xa9(0x01)
	char pad_A9_1 : 7; // 0xa9(0x01)
	enum class EMeshCameraFacingUpAxis CameraFacingUpAxisOption; // 0xaa(0x01)
	enum class EMeshCameraFacingOptions CameraFacingOption; // 0xab(0x01)
	char bApplyParticleRotationAsSpin : 1; // 0xac(0x01)
	char bFaceCameraDirectionRatherThanPosition : 1; // 0xac(0x01)
	char bCollisionsConsiderPartilceSize : 1; // 0xac(0x01)
	char pad_AC_3 : 5; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
};

// Class Engine.ParticleModuleTypeDataRibbon
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleTypeDataRibbon : UParticleModuleTypeDataBase {
	int32_t MaxTessellationBetweenParticles; // 0x30(0x04)
	int32_t SheetsPerTrail; // 0x34(0x04)
	int32_t MaxTrailCount; // 0x38(0x04)
	int32_t MaxParticleInTrailCount; // 0x3c(0x04)
	char bDeadTrailsOnDeactivate : 1; // 0x40(0x01)
	char bDeadTrailsOnSourceLoss : 1; // 0x40(0x01)
	char bClipSourceSegement : 1; // 0x40(0x01)
	char bEnablePreviousTangentRecalculation : 1; // 0x40(0x01)
	char bTangentRecalculationEveryFrame : 1; // 0x40(0x01)
	char bSpawnInitialParticle : 1; // 0x40(0x01)
	char pad_40_6 : 2; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	enum class ETrailsRenderAxisOption RenderAxis; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	float TangentSpawningScalar; // 0x48(0x04)
	char bRenderGeometry : 1; // 0x4c(0x01)
	char bRenderSpawnPoints : 1; // 0x4c(0x01)
	char bRenderTangents : 1; // 0x4c(0x01)
	char bRenderTessellation : 1; // 0x4c(0x01)
	char pad_4C_4 : 4; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float TilingDistance; // 0x50(0x04)
	float DistanceTessellationStepSize; // 0x54(0x04)
	char bEnableTangentDiffInterpScale : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	float TangentTessellationScalar; // 0x5c(0x04)
};

// Class Engine.ParticleModuleVectorFieldBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleVectorFieldBase : UParticleModule {
};

// Class Engine.ParticleModuleVectorFieldGlobal
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleVectorFieldGlobal : UParticleModuleVectorFieldBase {
	char bOverrideGlobalVectorFieldTightness : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float GlobalVectorFieldScale; // 0x34(0x04)
	float GlobalVectorFieldTightness; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.ParticleModuleVectorFieldLocal
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleVectorFieldLocal : UParticleModuleVectorFieldBase {
	struct UVectorField* VectorField; // 0x30(0x08)
	struct FVector RelativeTranslation; // 0x38(0x18)
	struct FRotator RelativeRotation; // 0x50(0x18)
	struct FVector RelativeScale3D; // 0x68(0x18)
	float Intensity; // 0x80(0x04)
	float Tightness; // 0x84(0x04)
	char bIgnoreComponentTransform : 1; // 0x88(0x01)
	char bTileX : 1; // 0x88(0x01)
	char bTileY : 1; // 0x88(0x01)
	char bTileZ : 1; // 0x88(0x01)
	char bUseFixDT : 1; // 0x88(0x01)
	char pad_88_5 : 3; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class Engine.ParticleModuleVectorFieldRotation
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleVectorFieldRotation : UParticleModuleVectorFieldBase {
	struct FVector MinInitialRotation; // 0x30(0x18)
	struct FVector MaxInitialRotation; // 0x48(0x18)
};

// Class Engine.ParticleModuleVectorFieldRotationRate
// Size: 0x48 (Inherited: 0x30)
struct UParticleModuleVectorFieldRotationRate : UParticleModuleVectorFieldBase {
	struct FVector RotationRate; // 0x30(0x18)
};

// Class Engine.ParticleModuleVectorFieldScale
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleVectorFieldScale : UParticleModuleVectorFieldBase {
	struct UDistributionFloat* VectorFieldScale; // 0x30(0x08)
	struct FRawDistributionFloat VectorFieldScaleRaw; // 0x38(0x30)
};

// Class Engine.ParticleModuleVectorFieldScaleOverLife
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleVectorFieldScaleOverLife : UParticleModuleVectorFieldBase {
	struct UDistributionFloat* VectorFieldScaleOverLife; // 0x30(0x08)
	struct FRawDistributionFloat VectorFieldScaleOverLifeRaw; // 0x38(0x30)
};

// Class Engine.ParticleModuleVelocityBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleVelocityBase : UParticleModule {
	char bInWorldSpace : 1; // 0x30(0x01)
	char bApplyOwnerScale : 1; // 0x30(0x01)
	char pad_30_2 : 6; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleVelocity
// Size: 0xc8 (Inherited: 0x38)
struct UParticleModuleVelocity : UParticleModuleVelocityBase {
	struct FRawDistributionVector StartVelocity; // 0x38(0x60)
	struct FRawDistributionFloat StartVelocityRadial; // 0x98(0x30)
};

// Class Engine.ParticleModuleVelocityCone
// Size: 0xb0 (Inherited: 0x38)
struct UParticleModuleVelocityCone : UParticleModuleVelocityBase {
	struct FRawDistributionFloat Angle; // 0x38(0x30)
	struct FRawDistributionFloat Velocity; // 0x68(0x30)
	struct FVector Direction; // 0x98(0x18)
};

// Class Engine.ParticleModuleVelocityInheritParent
// Size: 0x98 (Inherited: 0x38)
struct UParticleModuleVelocityInheritParent : UParticleModuleVelocityBase {
	struct FRawDistributionVector Scale; // 0x38(0x60)
};

// Class Engine.ParticleModuleVelocityOverLifetime
// Size: 0xa0 (Inherited: 0x38)
struct UParticleModuleVelocityOverLifetime : UParticleModuleVelocityBase {
	struct FRawDistributionVector VelOverLife; // 0x38(0x60)
	char Absolute : 1; // 0x98(0x01)
	char pad_98_1 : 7; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Engine.ParticleModuleVelocity_Seeded
// Size: 0xe0 (Inherited: 0xc8)
struct UParticleModuleVelocity_Seeded : UParticleModuleVelocity {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xc8(0x18)
};

// Class Engine.ParticleSpriteEmitter
// Size: 0x1b8 (Inherited: 0x1b8)
struct UParticleSpriteEmitter : UParticleEmitter {
};

// Class Engine.ParticleSystemComponent
// Size: 0x840 (Inherited: 0x530)
struct UParticleSystemComponent : UFXSystemComponent {
	struct UParticleSystem* Template; // 0x530(0x08)
	struct TArray<struct UMaterialInterface*> EmitterMaterials; // 0x538(0x10)
	struct TArray<struct USkeletalMeshComponent*> SkelMeshComponents; // 0x548(0x10)
	char pad_558[0x1]; // 0x558(0x01)
	char bResetOnDetach : 1; // 0x559(0x01)
	char bUpdateOnDedicatedServer : 1; // 0x559(0x01)
	char pad_559_2 : 2; // 0x559(0x01)
	char bAllowRecycling : 1; // 0x559(0x01)
	char bAutoManageAttachment : 1; // 0x559(0x01)
	char bAutoAttachWeldSimulatedBodies : 1; // 0x559(0x01)
	char pad_559_7 : 1; // 0x559(0x01)
	char pad_55A_0 : 2; // 0x55a(0x01)
	char bWarmingUp : 1; // 0x55a(0x01)
	char bOverrideLODMethod : 1; // 0x55a(0x01)
	char bSkipUpdateDynamicDataDuringTick : 1; // 0x55a(0x01)
	char pad_55A_5 : 3; // 0x55a(0x01)
	char pad_55B[0xa]; // 0x55b(0x0a)
	enum class ParticleSystemLODMethod LODMethod; // 0x565(0x01)
	enum class EParticleSignificanceLevel RequiredSignificance; // 0x566(0x01)
	char pad_567[0x1]; // 0x567(0x01)
	struct TArray<struct FParticleSysParam> InstanceParameters; // 0x568(0x10)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x578(0x10)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x588(0x10)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x598(0x10)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x5a8(0x10)
	bool bOldPositionValid; // 0x5b8(0x01)
	char pad_5B9[0x7]; // 0x5b9(0x07)
	struct FVector OldPosition; // 0x5c0(0x18)
	struct FVector PartSysVelocity; // 0x5d8(0x18)
	float WarmupTime; // 0x5f0(0x04)
	float WarmupTickRate; // 0x5f4(0x04)
	char pad_5F8[0x4]; // 0x5f8(0x04)
	float SecondsBeforeInactive; // 0x5fc(0x04)
	char pad_600[0x4]; // 0x600(0x04)
	float MaxTimeBeforeForceUpdateTransform; // 0x604(0x04)
	char pad_608[0x20]; // 0x608(0x20)
	struct TArray<struct UParticleSystemReplay*> ReplayClips; // 0x628(0x10)
	char pad_638[0x8]; // 0x638(0x08)
	float CustomTimeDilation; // 0x640(0x04)
	char pad_644[0x54]; // 0x644(0x54)
	struct TWeakObjectPtr<struct USceneComponent> AutoAttachParent; // 0x698(0x08)
	struct FName AutoAttachSocketName; // 0x6a0(0x04)
	enum class EAttachmentRule AutoAttachLocationRule; // 0x6a4(0x01)
	enum class EAttachmentRule AutoAttachRotationRule; // 0x6a5(0x01)
	enum class EAttachmentRule AutoAttachScaleRule; // 0x6a6(0x01)
	char pad_6A7[0x51]; // 0x6a7(0x51)
	struct FMulticastInlineDelegate OnSystemFinished; // 0x6f8(0x10)
	char pad_708[0x138]; // 0x708(0x138)

	void SetTrailSourceData(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.SetTrailSourceData // (Final|Native|Public|BlueprintCallable) // @ game+0x931ee18
	void SetTemplate(struct UParticleSystem* NewTemplate); // Function Engine.ParticleSystemComponent.SetTemplate // (Final|Native|Public|BlueprintCallable) // @ game+0x15161a4
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface* Param); // Function Engine.ParticleSystemComponent.SetMaterialParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x931ed54
	void SetBeamTargetTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetTangent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x931eb80
	void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetStrength // (Native|Public|BlueprintCallable) // @ game+0x931ea80
	void SetBeamTargetPoint(int32_t EmitterIndex, struct FVector NewTargetPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetPoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x931e974
	void SetBeamSourceTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceTangent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x931e868
	void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceStrength // (Native|Public|BlueprintCallable) // @ game+0x931e768
	void SetBeamSourcePoint(int32_t EmitterIndex, struct FVector NewSourcePoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourcePoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x931e65c
	void SetBeamEndPoint(int32_t EmitterIndex, struct FVector NewEndPoint); // Function Engine.ParticleSystemComponent.SetBeamEndPoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x931e584
	void SetAutoAttachParams(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachLocation LocationType); // Function Engine.ParticleSystemComponent.SetAutoAttachParams // (Final|Native|Public|BlueprintCallable) // @ game+0x931e3a8
	int32_t GetNumActiveParticles(); // Function Engine.ParticleSystemComponent.GetNumActiveParticles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x931e2a4
	struct UMaterialInterface* GetNamedMaterial(struct FName InName); // Function Engine.ParticleSystemComponent.GetNamedMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x931e210
	bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetTangent // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x931e0fc
	bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength); // Function Engine.ParticleSystemComponent.GetBeamTargetStrength // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x931dff0
	bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTargetPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x931dedc
	bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamSourceTangent // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x931ddc8
	bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength); // Function Engine.ParticleSystemComponent.GetBeamSourceStrength // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x931dcbc
	bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutSourcePoint); // Function Engine.ParticleSystemComponent.GetBeamSourcePoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x931dba8
	bool GetBeamEndPoint(int32_t EmitterIndex, struct FVector& OutEndPoint); // Function Engine.ParticleSystemComponent.GetBeamEndPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x931dac8
	void GenerateParticleEvent(struct FName InEventName, float InEmitterTime, struct FVector InLocation, struct FVector InDirection, struct FVector InVelocity); // Function Engine.ParticleSystemComponent.GenerateParticleEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x931d928
	void EndTrails(); // Function Engine.ParticleSystemComponent.EndTrails // (Final|Native|Public|BlueprintCallable) // @ game+0x22abc4c
	struct UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(struct FName InName, struct UMaterialInterface* SourceMaterial); // Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x931d860
	void BeginTrails(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.BeginTrails // (Final|Native|Public|BlueprintCallable) // @ game+0x931d644
};

// Class Engine.ParticleSystemReplay
// Size: 0x40 (Inherited: 0x28)
struct UParticleSystemReplay : UObject {
	int32_t ClipIDNumber; // 0x28(0x04)
	char pad_2C[0x14]; // 0x2c(0x14)
};

// Class Engine.PathFollowingAgentInterface
// Size: 0x28 (Inherited: 0x28)
struct UPathFollowingAgentInterface : UInterface {
};

// Class Engine.PawnNoiseEmitterComponent
// Size: 0xd8 (Inherited: 0xa0)
struct UPawnNoiseEmitterComponent : UActorComponent {
	char bAIPerceptionSystemCompatibilityMode : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
	struct FVector LastRemoteNoisePosition; // 0xa8(0x18)
	float NoiseLifetime; // 0xc0(0x04)
	float LastRemoteNoiseVolume; // 0xc4(0x04)
	float LastRemoteNoiseTime; // 0xc8(0x04)
	float LastLocalNoiseVolume; // 0xcc(0x04)
	float LastLocalNoiseTime; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)

	void MakeNoise(struct AActor* NoiseMaker, float Loudness, struct FVector& NoiseLocation); // Function Engine.PawnNoiseEmitterComponent.MakeNoise // (BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9320688
};

// Class Engine.PhysicalAnimationComponent
// Size: 0xe0 (Inherited: 0xa0)
struct UPhysicalAnimationComponent : UActorComponent {
	float StrengthMultiplyer; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0xa8(0x08)
	char pad_B0[0x30]; // 0xb0(0x30)

	void SetStrengthMultiplyer(float InStrengthMultiplyer); // Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer // (Final|Native|Public|BlueprintCallable) // @ game+0x9320c1c
	void SetSkeletalMeshComponent(struct USkeletalMeshComponent* InSkeletalMeshComponent); // Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9320a1c
	struct FTransform GetBodyTargetTransform(struct FName BodyName); // Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93202d4
	void ApplyPhysicalAnimationSettingsBelow(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x93200fc
	void ApplyPhysicalAnimationSettings(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9320018
	void ApplyPhysicalAnimationProfileBelow(struct FName BodyName, struct FName ProfileName, bool bIncludeSelf, bool bClearNotFound); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x931fecc
};

// Class Engine.PhysicalMaterialMask
// Size: 0x38 (Inherited: 0x28)
struct UPhysicalMaterialMask : UObject {
	int32_t UVChannelIndex; // 0x28(0x04)
	enum class TextureAddress AddressX; // 0x2c(0x01)
	enum class TextureAddress AddressY; // 0x2d(0x01)
	char pad_2E[0xa]; // 0x2e(0x0a)
};

// Class Engine.PhysicsAsset
// Size: 0x150 (Inherited: 0x28)
struct UPhysicsAsset : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<int32_t> BoundsBodies; // 0x30(0x10)
	struct TArray<struct USkeletalBodySetup*> SkeletalBodySetups; // 0x40(0x10)
	struct TArray<struct UPhysicsConstraintTemplate*> ConstraintSetup; // 0x50(0x10)
	struct FPhysicsAssetSolverSettings SolverSettings; // 0x60(0x1c)
	struct FSolverIterations SolverIterations; // 0x7c(0x18)
	enum class EPhysicsAssetSolverType SolverType; // 0x94(0x01)
	char bNotForDedicatedServer : 1; // 0x95(0x01)
	char pad_95_1 : 7; // 0x95(0x01)
	char pad_96[0xa2]; // 0x96(0xa2)
	struct UThumbnailInfo* ThumbnailInfo; // 0x138(0x08)
	struct TArray<struct UBodySetup*> BodySetup; // 0x140(0x10)
};

// Class Engine.SkeletalBodySetup
// Size: 0x2f8 (Inherited: 0x2e0)
struct USkeletalBodySetup : UBodySetup {
	bool bSkipScaleFromAnimation; // 0x2e0(0x01)
	char pad_2E1[0x7]; // 0x2e1(0x07)
	struct TArray<struct FPhysicalAnimationProfile> PhysicalAnimationData; // 0x2e8(0x10)
};

// Class Engine.PhysicsCollisionHandler
// Size: 0x40 (Inherited: 0x28)
struct UPhysicsCollisionHandler : UObject {
	float ImpactThreshold; // 0x28(0x04)
	float ImpactReFireDelay; // 0x2c(0x04)
	struct USoundBase* DefaultImpactSound; // 0x30(0x08)
	float LastImpactSoundTime; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.RigidBodyBase
// Size: 0x288 (Inherited: 0x288)
struct ARigidBodyBase : AActor {
};

// Class Engine.PhysicsConstraintActor
// Size: 0x2a8 (Inherited: 0x288)
struct APhysicsConstraintActor : ARigidBodyBase {
	struct UPhysicsConstraintComponent* ConstraintComp; // 0x288(0x08)
	struct AActor* ConstraintActor1; // 0x290(0x08)
	struct AActor* ConstraintActor2; // 0x298(0x08)
	char bDisableCollision : 1; // 0x2a0(0x01)
	char pad_2A0_1 : 7; // 0x2a0(0x01)
	char pad_2A1[0x7]; // 0x2a1(0x07)
};

// Class Engine.PhysicsConstraintComponent
// Size: 0x560 (Inherited: 0x2a0)
struct UPhysicsConstraintComponent : USceneComponent {
	struct AActor* ConstraintActor1; // 0x2a0(0x08)
	struct FConstrainComponentPropName ComponentName1; // 0x2a8(0x04)
	char pad_2AC[0x4]; // 0x2ac(0x04)
	struct AActor* ConstraintActor2; // 0x2b0(0x08)
	struct FConstrainComponentPropName ComponentName2; // 0x2b8(0x04)
	char pad_2BC[0x14]; // 0x2bc(0x14)
	struct UPhysicsConstraintTemplate* ConstraintSetup; // 0x2d0(0x08)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0x2d8(0x10)
	struct FMulticastInlineDelegate OnPlasticDeformation; // 0x2e8(0x10)
	struct FConstraintInstance ConstraintInstance; // 0x2f8(0x268)

	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing // (Final|Native|Public|BlueprintCallable) // @ game+0x9323488
	void SetOrientationDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP // (Final|Native|Public|BlueprintCallable) // @ game+0x9323404
	void SetLinearZLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearZLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x9323310
	void SetLinearYLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearYLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x932321c
	void SetLinearXLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearXLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x9323128
	void SetLinearVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x932309c
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x9322f8c
	void SetLinearPositionTarget(struct FVector& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9322e70
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x9322d60
	void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, enum class EConstraintPlasticityType PlasticityType); // Function Engine.PhysicsConstraintComponent.SetLinearPlasticity // (Final|Native|Public|BlueprintCallable) // @ game+0x9322c40
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetLinearDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x9322b40
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetLinearBreakable // (Final|Native|Public|BlueprintCallable) // @ game+0x93229cc
	void SetDisableCollision(bool bDisableCollision); // Function Engine.PhysicsConstraintComponent.SetDisableCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x93228c4
	void SetContactTransferScale(float ContactTransferScale); // Function Engine.PhysicsConstraintComponent.SetContactTransferScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9322834
	void SetConstraintReferencePosition(enum class EConstraintFrame Frame, struct FVector& RefPosition); // Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x932270c
	void SetConstraintReferenceOrientation(enum class EConstraintFrame Frame, struct FVector& PriAxis, struct FVector& SecAxis); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93225e4
	void SetConstraintReferenceFrame(enum class EConstraintFrame Frame, struct FTransform& RefFrame); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93224b0
	void SetConstrainedComponents(struct UPrimitiveComponent* Component1, struct FName BoneName1, struct UPrimitiveComponent* Component2, struct FName BoneName2); // Function Engine.PhysicsConstraintComponent.SetConstrainedComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x932223c
	void SetAngularVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93221b0
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing // (Final|Native|Public|BlueprintCallable) // @ game+0x93220e8
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP // (Final|Native|Public|BlueprintCallable) // @ game+0x9322064
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x9321f9c
	void SetAngularTwistLimit(enum class EAngularConstraintMotion ConstraintType, float TwistLimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x9321ec0
	void SetAngularSwing2Limit(enum class EAngularConstraintMotion MotionType, float Swing2LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit // (Final|Native|Public|BlueprintCallable) // @ game+0x9321de4
	void SetAngularSwing1Limit(enum class EAngularConstraintMotion MotionType, float Swing1LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit // (Final|Native|Public|BlueprintCallable) // @ game+0x9321d08
	void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold); // Function Engine.PhysicsConstraintComponent.SetAngularPlasticity // (Final|Native|Public|BlueprintCallable) // @ game+0x9321b94
	void SetAngularOrientationTarget(struct FRotator& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9321afc
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x9321a34
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetAngularDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x9321934
	void SetAngularDriveMode(enum class EAngularDriveMode DriveMode); // Function Engine.PhysicsConstraintComponent.SetAngularDriveMode // (Final|Native|Public|BlueprintCallable) // @ game+0x93218b0
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetAngularBreakable // (Final|Native|Public|BlueprintCallable) // @ game+0x932173c
	bool IsBroken(); // Function Engine.PhysicsConstraintComponent.IsBroken // (Final|Native|Public|BlueprintCallable) // @ game+0x9321714
	float GetCurrentTwist(); // Function Engine.PhysicsConstraintComponent.GetCurrentTwist // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93211c4
	float GetCurrentSwing2(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing2 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9321190
	float GetCurrentSwing1(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing1 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x932115c
	void GetConstraintForce(struct FVector& OutLinearForce, struct FVector& OutAngularForce); // Function Engine.PhysicsConstraintComponent.GetConstraintForce // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9321048
	struct FConstraintInstanceAccessor GetConstraint(); // Function Engine.PhysicsConstraintComponent.GetConstraint // (Final|Native|Public|BlueprintCallable) // @ game+0x9321014
	void GetConstrainedComponents(struct UPrimitiveComponent*& OutComponent1, struct FName& OutBoneName1, struct UPrimitiveComponent*& OutComponent2, struct FName& OutBoneName2); // Function Engine.PhysicsConstraintComponent.GetConstrainedComponents // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9320e70
	void BreakConstraint(); // Function Engine.PhysicsConstraintComponent.BreakConstraint // (Final|Native|Public|BlueprintCallable) // @ game+0x9320e54
};

// Class Engine.PhysicsConstraintTemplate
// Size: 0x400 (Inherited: 0x28)
struct UPhysicsConstraintTemplate : UObject {
	struct FConstraintInstance DefaultInstance; // 0x28(0x268)
	struct TArray<struct FPhysicsConstraintProfileHandle> ProfileHandles; // 0x290(0x10)
	struct FConstraintProfileProperties DefaultProfile; // 0x2a0(0x160)
};

// Class Engine.PhysicsFieldComponent
// Size: 0x340 (Inherited: 0x2a0)
struct UPhysicsFieldComponent : USceneComponent {
	char pad_2A0[0xa0]; // 0x2a0(0xa0)
};

// Class Engine.PhysicsHandleComponent
// Size: 0x4c0 (Inherited: 0xa0)
struct UPhysicsHandleComponent : UActorComponent {
	struct UPrimitiveComponent* GrabbedComponent; // 0xa0(0x08)
	char pad_A8[0x4]; // 0xa8(0x04)
	char pad_AC_0 : 1; // 0xac(0x01)
	char bSoftAngularConstraint : 1; // 0xac(0x01)
	char bSoftLinearConstraint : 1; // 0xac(0x01)
	char bInterpolateTarget : 1; // 0xac(0x01)
	char pad_AC_4 : 4; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
	float LinearDamping; // 0xb0(0x04)
	float LinearStiffness; // 0xb4(0x04)
	float AngularDamping; // 0xb8(0x04)
	float AngularStiffness; // 0xbc(0x04)
	char pad_C0[0xc0]; // 0xc0(0xc0)
	float InterpolationSpeed; // 0x180(0x04)
	char pad_184[0x33c]; // 0x184(0x33c)

	void SetTargetRotation(struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x932370c
	void SetTargetLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93235d8
	void SetTargetLocation(struct FVector NewLocation); // Function Engine.PhysicsHandleComponent.SetTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9323550
	void SetLinearStiffness(float NewLinearStiffness); // Function Engine.PhysicsHandleComponent.SetLinearStiffness // (Final|Native|Public|BlueprintCallable) // @ game+0x9322efc
	void SetLinearDamping(float NewLinearDamping); // Function Engine.PhysicsHandleComponent.SetLinearDamping // (Final|Native|Public|BlueprintCallable) // @ game+0x9322ab0
	void SetInterpolationSpeed(float NewInterpolationSpeed); // Function Engine.PhysicsHandleComponent.SetInterpolationSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x9322948
	void SetAngularStiffness(float NewAngularStiffness); // Function Engine.PhysicsHandleComponent.SetAngularStiffness // (Final|Native|Public|BlueprintCallable) // @ game+0x9321c78
	void SetAngularDamping(float NewAngularDamping); // Function Engine.PhysicsHandleComponent.SetAngularDamping // (Final|Native|Public|BlueprintCallable) // @ game+0x9321820
	void ReleaseComponent(); // Function Engine.PhysicsHandleComponent.ReleaseComponent // (Native|Public|BlueprintCallable) // @ game+0x13743d0
	void GrabComponentAtLocationWithRotation(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector Location, struct FRotator Rotation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93215a8
	void GrabComponentAtLocation(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9321480
	void GrabComponent(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, bool bConstrainRotation); // Function Engine.PhysicsHandleComponent.GrabComponent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x932132c
	void GetTargetLocationAndRotation(struct FVector& TargetLocation, struct FRotator& TargetRotation); // Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93211f8
	struct UPrimitiveComponent* GetGrabbedComponent(); // Function Engine.PhysicsHandleComponent.GetGrabbedComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x248b320
};

// Class Engine.PhysicsSettings
// Size: 0x1e0 (Inherited: 0xd8)
struct UPhysicsSettings : UPhysicsSettingsCore {
	struct FRigidBodyErrorCorrection PhysicErrorCorrection; // 0xd8(0x34)
	enum class ESettingsLockedAxis LockedAxis; // 0x10c(0x01)
	enum class ESettingsDOF DefaultDegreesOfFreedom; // 0x10d(0x01)
	bool bSuppressFaceRemapTable; // 0x10e(0x01)
	bool bSupportUVFromHitResults; // 0x10f(0x01)
	bool bDisableActiveActors; // 0x110(0x01)
	bool bDisableKinematicStaticPairs; // 0x111(0x01)
	bool bDisableKinematicKinematicPairs; // 0x112(0x01)
	bool bDisableCCD; // 0x113(0x01)
	bool bEnableEnhancedDeterminism; // 0x114(0x01)
	char pad_115[0x3]; // 0x115(0x03)
	float AnimPhysicsMinDeltaTime; // 0x118(0x04)
	bool bSimulateAnimPhysicsAfterReset; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)
	float MinPhysicsDeltaTime; // 0x120(0x04)
	float MaxPhysicsDeltaTime; // 0x124(0x04)
	bool bSubstepping; // 0x128(0x01)
	bool bSubsteppingAsync; // 0x129(0x01)
	bool bTickPhysicsAsync; // 0x12a(0x01)
	char pad_12B[0x1]; // 0x12b(0x01)
	float AsyncFixedTimeStepSize; // 0x12c(0x04)
	float MaxSubstepDeltaTime; // 0x130(0x04)
	int32_t MaxSubsteps; // 0x134(0x04)
	float SyncSceneSmoothingFactor; // 0x138(0x04)
	float InitialAverageFrameRate; // 0x13c(0x04)
	int32_t PhysXTreeRebuildRate; // 0x140(0x04)
	char pad_144[0x4]; // 0x144(0x04)
	struct TArray<struct FPhysicalSurfaceName> PhysicalSurfaces; // 0x148(0x10)
	struct FBroadphaseSettings DefaultBroadphaseSettings; // 0x158(0x80)
	float MinDeltaVelocityForHitEvents; // 0x1d8(0x04)
	struct FChaosPhysicsSettings ChaosSettings; // 0x1dc(0x03)
	char pad_1DF[0x1]; // 0x1df(0x01)
};

// Class Engine.PhysicsSpringComponent
// Size: 0x2d0 (Inherited: 0x2a0)
struct UPhysicsSpringComponent : USceneComponent {
	float SpringStiffness; // 0x2a0(0x04)
	float SpringDamping; // 0x2a4(0x04)
	float SpringLengthAtRest; // 0x2a8(0x04)
	float SpringRadius; // 0x2ac(0x04)
	enum class ECollisionChannel SpringChannel; // 0x2b0(0x01)
	bool bIgnoreSelf; // 0x2b1(0x01)
	char pad_2B2[0x2]; // 0x2b2(0x02)
	float SpringCompression; // 0x2b4(0x04)
	char pad_2B8[0x18]; // 0x2b8(0x18)

	struct FVector GetSpringRestingPoint(); // Function Engine.PhysicsSpringComponent.GetSpringRestingPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9324b78
	struct FVector GetSpringDirection(); // Function Engine.PhysicsSpringComponent.GetSpringDirection // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9324b44
	struct FVector GetSpringCurrentEndPoint(); // Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9324b0c
	float GetNormalizedCompressionScalar(); // Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9324a18
};

// Class Engine.PhysicsThreadLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPhysicsThreadLibrary : UBlueprintFunctionLibrary {

	void AddForce(struct FBodyInstanceAsyncPhysicsTickHandle Handle, struct FVector Force, bool bAccelChange); // Function Engine.PhysicsThreadLibrary.AddForce // (Final|Native|Static|Private|HasDefaults|BlueprintCallable) // @ game+0x9323a4c
};

// Class Engine.PhysicsThruster
// Size: 0x290 (Inherited: 0x288)
struct APhysicsThruster : ARigidBodyBase {
	struct UPhysicsThrusterComponent* ThrusterComponent; // 0x288(0x08)
};

// Class Engine.PhysicsThrusterComponent
// Size: 0x2b0 (Inherited: 0x2a0)
struct UPhysicsThrusterComponent : USceneComponent {
	float ThrustStrength; // 0x2a0(0x04)
	char pad_2A4[0xc]; // 0x2a4(0x0c)
};

// Class Engine.SceneCapture
// Size: 0x298 (Inherited: 0x288)
struct ASceneCapture : AActor {
	struct UStaticMeshComponent* MeshComp; // 0x288(0x08)
	struct USceneComponent* SceneComponent; // 0x290(0x08)
};

// Class Engine.PlanarReflection
// Size: 0x2a8 (Inherited: 0x298)
struct APlanarReflection : ASceneCapture {
	struct UPlanarReflectionComponent* PlanarReflectionComponent; // 0x298(0x08)
	bool bShowPreviewPlane; // 0x2a0(0x01)
	char pad_2A1[0x7]; // 0x2a1(0x07)

	void OnInterpToggle(bool bEnable); // Function Engine.PlanarReflection.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x9324fbc
};

// Class Engine.PlanarReflectionComponent
// Size: 0x4c0 (Inherited: 0x360)
struct UPlanarReflectionComponent : USceneCaptureComponent {
	struct UBoxComponent* PreviewBox; // 0x358(0x08)
	float NormalDistortionStrength; // 0x360(0x04)
	float PrefilterRoughness; // 0x364(0x04)
	float PrefilterRoughnessDistance; // 0x368(0x04)
	int32_t ScreenPercentage; // 0x36c(0x04)
	float ExtraFOV; // 0x370(0x04)
	float DistanceFromPlaneFadeStart; // 0x374(0x04)
	float DistanceFromPlaneFadeEnd; // 0x378(0x04)
	float DistanceFromPlaneFadeoutStart; // 0x37c(0x04)
	float DistanceFromPlaneFadeoutEnd; // 0x380(0x04)
	float AngleFromPlaneFadeStart; // 0x384(0x04)
	float AngleFromPlaneFadeEnd; // 0x388(0x04)
	bool bShowPreviewPlane; // 0x38c(0x01)
	bool bRenderSceneTwoSided; // 0x38d(0x01)
	char pad_396[0x12a]; // 0x396(0x12a)
};

// Class Engine.PlaneReflectionCapture
// Size: 0x290 (Inherited: 0x290)
struct APlaneReflectionCapture : AReflectionCapture {
};

// Class Engine.PlaneReflectionCaptureComponent
// Size: 0x330 (Inherited: 0x320)
struct UPlaneReflectionCaptureComponent : UReflectionCaptureComponent {
	float InfluenceRadiusScale; // 0x318(0x04)
	struct UDrawSphereComponent* PreviewInfluenceRadius; // 0x320(0x08)
	struct UBoxComponent* PreviewCaptureBox; // 0x328(0x08)
};

// Class Engine.PlatformEventsComponent
// Size: 0xc0 (Inherited: 0xa0)
struct UPlatformEventsComponent : UActorComponent {
	struct FMulticastInlineDelegate PlatformChangedToLaptopModeDelegate; // 0xa0(0x10)
	struct FMulticastInlineDelegate PlatformChangedToTabletModeDelegate; // 0xb0(0x10)

	bool SupportsConvertibleLaptops(); // Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops // (Final|Native|Public|BlueprintCallable) // @ game+0x9325d64
	void PlatformEventDelegate__DelegateSignature(); // DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0xd67374
	bool IsInTabletMode(); // Function Engine.PlatformEventsComponent.IsInTabletMode // (Final|Native|Public|BlueprintCallable) // @ game+0x9324cc8
	bool IsInLaptopMode(); // Function Engine.PlatformEventsComponent.IsInLaptopMode // (Final|Native|Public|BlueprintCallable) // @ game+0x9324c9c
};

// Class Engine.PlatformInputDeviceMapperLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPlatformInputDeviceMapperLibrary : UBlueprintFunctionLibrary {

	struct FPlatformUserId PlatformUserId_None(); // Function Engine.PlatformInputDeviceMapperLibrary.PlatformUserId_None // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93251d0
	bool NotEqual_PlatformUserId(struct FPlatformUserId A, struct FPlatformUserId B); // Function Engine.PlatformInputDeviceMapperLibrary.NotEqual_PlatformUserId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9324efc
	bool NotEqual_InputDeviceId(struct FInputDeviceId A, struct FInputDeviceId B); // Function Engine.PlatformInputDeviceMapperLibrary.NotEqual_InputDeviceId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9324efc
	bool IsValidPlatformId(struct FPlatformUserId UserId); // Function Engine.PlatformInputDeviceMapperLibrary.IsValidPlatformId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9324e80
	bool IsValidInputDevice(struct FInputDeviceId DeviceID); // Function Engine.PlatformInputDeviceMapperLibrary.IsValidInputDevice // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9324e0c
	bool IsUnpairedUserId(struct FPlatformUserId PlatformId); // Function Engine.PlatformInputDeviceMapperLibrary.IsUnpairedUserId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9324d80
	bool IsInputDeviceMappedToUnpairedUser(struct FInputDeviceId InputDevice); // Function Engine.PlatformInputDeviceMapperLibrary.IsInputDeviceMappedToUnpairedUser // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9324cf4
	struct FInputDeviceId InputDeviceId_None(); // Function Engine.PlatformInputDeviceMapperLibrary.InputDeviceId_None // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9324c84
	struct FPlatformUserId GetUserForUnpairedInputDevices(); // Function Engine.PlatformInputDeviceMapperLibrary.GetUserForUnpairedInputDevices // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9324c4c
	struct FPlatformUserId GetUserForInputDevice(struct FInputDeviceId DeviceID); // Function Engine.PlatformInputDeviceMapperLibrary.GetUserForInputDevice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9324bb8
	struct FInputDeviceId GetPrimaryInputDeviceForUser(struct FPlatformUserId UserId); // Function Engine.PlatformInputDeviceMapperLibrary.GetPrimaryInputDeviceForUser // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9324a78
	enum class EInputDeviceConnectionState GetInputDeviceConnectionState(struct FInputDeviceId DeviceID); // Function Engine.PlatformInputDeviceMapperLibrary.GetInputDeviceConnectionState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x932498c
	struct FInputDeviceId GetDefaultInputDevice(); // Function Engine.PlatformInputDeviceMapperLibrary.GetDefaultInputDevice // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93244b8
	int32_t GetAllInputDevicesForUser(struct FPlatformUserId UserId, struct TArray<struct FInputDeviceId>& OutInputDevices); // Function Engine.PlatformInputDeviceMapperLibrary.GetAllInputDevicesForUser // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x93242c0
	int32_t GetAllInputDevices(struct TArray<struct FInputDeviceId>& OutInputDevices); // Function Engine.PlatformInputDeviceMapperLibrary.GetAllInputDevices // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x932414c
	int32_t GetAllConnectedInputDevices(struct TArray<struct FInputDeviceId>& OutInputDevices); // Function Engine.PlatformInputDeviceMapperLibrary.GetAllConnectedInputDevices // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9323fd8
	int32_t GetAllActiveUsers(struct TArray<struct FPlatformUserId>& OutUsers); // Function Engine.PlatformInputDeviceMapperLibrary.GetAllActiveUsers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x9323e64
	bool EqualEqual_PlatformUserId(struct FPlatformUserId A, struct FPlatformUserId B); // Function Engine.PlatformInputDeviceMapperLibrary.EqualEqual_PlatformUserId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9323d10
	bool EqualEqual_InputDeviceId(struct FInputDeviceId A, struct FInputDeviceId B); // Function Engine.PlatformInputDeviceMapperLibrary.EqualEqual_InputDeviceId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9323d10
};

// Class Engine.PlatformInterfaceWebResponse
// Size: 0xb0 (Inherited: 0x28)
struct UPlatformInterfaceWebResponse : UObject {
	struct FString OriginalURL; // 0x28(0x10)
	int32_t ResponseCode; // 0x38(0x04)
	int32_t tag; // 0x3c(0x04)
	struct FString StringResponse; // 0x40(0x10)
	struct TArray<char> BinaryResponse; // 0x50(0x10)
	char pad_60[0x50]; // 0x60(0x50)

	int32_t GetNumHeaders(); // Function Engine.PlatformInterfaceWebResponse.GetNumHeaders // (Native|Public) // @ game+0x5d0ea64
	struct FString GetHeaderValue(struct FString HeaderName); // Function Engine.PlatformInterfaceWebResponse.GetHeaderValue // (Native|Public) // @ game+0x93247e8
	void GetHeader(int32_t HeaderIndex, struct FString& Header, struct FString& Value); // Function Engine.PlatformInterfaceWebResponse.GetHeader // (Native|Public|HasOutParms) // @ game+0x932451c
};

// Class Engine.PlayerStartPIE
// Size: 0x2b8 (Inherited: 0x2b8)
struct APlayerStartPIE : APlayerStart {
};

// Class Engine.PluginCommandlet
// Size: 0xa0 (Inherited: 0x80)
struct UPluginCommandlet : UCommandlet {
	char pad_80[0x20]; // 0x80(0x20)
};

// Class Engine.PointLight
// Size: 0x2a0 (Inherited: 0x298)
struct APointLight : ALight {
	struct UPointLightComponent* PointLightComponent; // 0x298(0x08)

	void SetRadius(float NewRadius); // Function Engine.PointLight.SetRadius // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9330dd8
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLight.SetLightFalloffExponent // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9330c44
};

// Class Engine.Polys
// Size: 0x38 (Inherited: 0x28)
struct UPolys : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Engine.PoseableMeshComponent
// Size: 0x9e0 (Inherited: 0x840)
struct UPoseableMeshComponent : USkinnedMeshComponent {
	char pad_840[0x1a0]; // 0x840(0x1a0)

	void SetBoneTransformByName(struct FName BoneName, struct FTransform& InTransform, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneTransformByName // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9330ac8
	void SetBoneScaleByName(struct FName BoneName, struct FVector InScale3D, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneScaleByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93309c0
	void SetBoneRotationByName(struct FName BoneName, struct FRotator InRotation, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneRotationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93308b8
	void SetBoneLocationByName(struct FName BoneName, struct FVector InLocation, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneLocationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93307b0
	void ResetBoneTransformByName(struct FName BoneName); // Function Engine.PoseableMeshComponent.ResetBoneTransformByName // (Final|Native|Public|BlueprintCallable) // @ game+0x93305ac
	struct FTransform GetBoneTransformByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneTransformByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9330244
	struct FVector GetBoneScaleByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneScaleByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x933013c
	struct FRotator GetBoneRotationByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneRotationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9330030
	struct FVector GetBoneLocationByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneLocationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x932ff2c
	void CopyPoseFromSkeletalComponent(struct USkeletalMeshComponent* InComponentToCopy); // Function Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x932feac
};

// Class Engine.PoseAsset
// Size: 0x100 (Inherited: 0x80)
struct UPoseAsset : UAnimationAsset {
	struct FPoseDataContainer PoseContainer; // 0x80(0x60)
	bool bAdditivePose; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	int32_t BasePoseIndex; // 0xe4(0x04)
	struct FName RetargetSource; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TArray<struct FTransform> RetargetSourceAssetReferencePose; // 0xf0(0x10)
};

// Class Engine.PoseWatchFolder
// Size: 0x28 (Inherited: 0x28)
struct UPoseWatchFolder : UObject {
};

// Class Engine.PoseWatchElement
// Size: 0x28 (Inherited: 0x28)
struct UPoseWatchElement : UObject {
};

// Class Engine.PoseWatchPoseElement
// Size: 0x28 (Inherited: 0x28)
struct UPoseWatchPoseElement : UPoseWatchElement {
};

// Class Engine.PoseWatch
// Size: 0x28 (Inherited: 0x28)
struct UPoseWatch : UObject {
};

// Class Engine.PostProcessComponent
// Size: 0x990 (Inherited: 0x2a0)
struct UPostProcessComponent : USceneComponent {
	char pad_2A0[0x10]; // 0x2a0(0x10)
	struct FPostProcessSettings Settings; // 0x2b0(0x6d0)
	float Priority; // 0x980(0x04)
	float BlendRadius; // 0x984(0x04)
	float BlendWeight; // 0x988(0x04)
	char bEnabled : 1; // 0x98c(0x01)
	char bUnbound : 1; // 0x98c(0x01)
	char pad_98C_2 : 6; // 0x98c(0x01)
	char pad_98D[0x3]; // 0x98d(0x03)

	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.PostProcessComponent.AddOrUpdateBlendable // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9331f68
};

// Class Engine.PostProcessVolume
// Size: 0x9b0 (Inherited: 0x2c0)
struct APostProcessVolume : AVolume {
	char pad_2C0[0x10]; // 0x2c0(0x10)
	struct FPostProcessSettings Settings; // 0x2d0(0x6d0)
	float Priority; // 0x9a0(0x04)
	float BlendRadius; // 0x9a4(0x04)
	float BlendWeight; // 0x9a8(0x04)
	char bEnabled : 1; // 0x9ac(0x01)
	char bUnbound : 1; // 0x9ac(0x01)
	char pad_9AC_2 : 6; // 0x9ac(0x01)
	char pad_9AD[0x3]; // 0x9ad(0x03)

	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.PostProcessVolume.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x9331e8c
};

// Class Engine.PrecomputedVisibilityOverrideVolume
// Size: 0x2f0 (Inherited: 0x2c0)
struct APrecomputedVisibilityOverrideVolume : AVolume {
	struct TArray<struct AActor*> OverrideVisibleActors; // 0x2c0(0x10)
	struct TArray<struct AActor*> OverrideInvisibleActors; // 0x2d0(0x10)
	struct TArray<struct FName> OverrideInvisibleLevels; // 0x2e0(0x10)
};

// Class Engine.PrecomputedVisibilityVolume
// Size: 0x2c0 (Inherited: 0x2c0)
struct APrecomputedVisibilityVolume : AVolume {
};

// Class Engine.PreviewCollectionInterface
// Size: 0x28 (Inherited: 0x28)
struct UPreviewCollectionInterface : UInterface {
};

// Class Engine.PreviewMeshCollection
// Size: 0x50 (Inherited: 0x30)
struct UPreviewMeshCollection : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	struct USkeleton* Skeleton; // 0x38(0x08)
	struct TArray<struct FPreviewMeshCollectionEntry> SkeletalMeshes; // 0x40(0x10)
};

// Class Engine.PrimaryAssetLabel
// Size: 0x68 (Inherited: 0x30)
struct UPrimaryAssetLabel : UPrimaryDataAsset {
	struct FPrimaryAssetRules Rules; // 0x30(0x0c)
	char bLabelAssetsInMyDirectory : 1; // 0x3c(0x01)
	char bIsRuntimeLabel : 1; // 0x3c(0x01)
	char pad_3C_2 : 6; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	struct TArray<struct TSoftObjectPtr<UObject>> ExplicitAssets; // 0x40(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> ExplicitBlueprints; // 0x50(0x10)
	struct FCollectionReference AssetCollection; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.ProxyLODMeshSimplificationSettings
// Size: 0x38 (Inherited: 0x30)
struct UProxyLODMeshSimplificationSettings : UDeveloperSettings {
	struct FName ProxyLODMeshReductionModuleName; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.RadialForceActor
// Size: 0x290 (Inherited: 0x288)
struct ARadialForceActor : ARigidBodyBase {
	struct URadialForceComponent* ForceComponent; // 0x288(0x08)

	void ToggleForce(); // Function Engine.RadialForceActor.ToggleForce // (Native|Public|BlueprintCallable) // @ game+0x23e4cc8
	void FireImpulse(); // Function Engine.RadialForceActor.FireImpulse // (Native|Public|BlueprintCallable) // @ game+0x230a2e8
	void EnableForce(); // Function Engine.RadialForceActor.EnableForce // (Native|Public|BlueprintCallable) // @ game+0xfe5030
	void DisableForce(); // Function Engine.RadialForceActor.DisableForce // (Native|Public|BlueprintCallable) // @ game+0xdf3528
};

// Class Engine.RadialForceComponent
// Size: 0x2d0 (Inherited: 0x2a0)
struct URadialForceComponent : USceneComponent {
	float Radius; // 0x2a0(0x04)
	enum class ERadialImpulseFalloff Falloff; // 0x2a4(0x01)
	char pad_2A5[0x3]; // 0x2a5(0x03)
	float ImpulseStrength; // 0x2a8(0x04)
	char bImpulseVelChange : 1; // 0x2ac(0x01)
	char bIgnoreOwningActor : 1; // 0x2ac(0x01)
	char pad_2AC_2 : 6; // 0x2ac(0x01)
	char pad_2AD[0x3]; // 0x2ad(0x03)
	float ForceStrength; // 0x2b0(0x04)
	float DestructibleDamage; // 0x2b4(0x04)
	struct TArray<enum class EObjectTypeQuery> ObjectTypesToAffect; // 0x2b8(0x10)
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void RemoveObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.RemoveObjectTypeToAffect // (Native|Public|BlueprintCallable) // @ game+0x93377a0
	void FireImpulse(); // Function Engine.RadialForceComponent.FireImpulse // (Native|Public|BlueprintCallable) // @ game+0x73eda74
	void AddObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.AddObjectTypeToAffect // (Native|Public|BlueprintCallable) // @ game+0x9337508
};

// Class Engine.RectLight
// Size: 0x2a0 (Inherited: 0x298)
struct ARectLight : ALight {
	struct URectLightComponent* RectLightComponent; // 0x298(0x08)
};

// Class Engine.RectLightComponent
// Size: 0x420 (Inherited: 0x400)
struct URectLightComponent : ULocalLightComponent {
	float SourceWidth; // 0x400(0x04)
	float SourceHeight; // 0x404(0x04)
	float BarnDoorAngle; // 0x408(0x04)
	float BarnDoorLength; // 0x40c(0x04)
	struct UTexture* SourceTexture; // 0x410(0x08)
	char pad_418[0x8]; // 0x418(0x08)

	void SetSourceWidth(float NewValue); // Function Engine.RectLightComponent.SetSourceWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x9337a50
	void SetSourceTexture(struct UTexture* NewValue); // Function Engine.RectLightComponent.SetSourceTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x93379b0
	void SetSourceHeight(float NewValue); // Function Engine.RectLightComponent.SetSourceHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x933792c
	void SetBarnDoorLength(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorLength // (Final|Native|Public|BlueprintCallable) // @ game+0x93378a8
	void SetBarnDoorAngle(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x9337824
};

// Class Engine.RendererSettings
// Size: 0x1c0 (Inherited: 0x30)
struct URendererSettings : UDeveloperSettings {
	enum class EMobileShadingPath MobileShadingPath; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	char bMobileSupportGPUScene : 1; // 0x34(0x01)
	char pad_34_1 : 7; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	int32_t MaxMobileCascades; // 0x38(0x04)
	enum class EMobileAntiAliasingMethod MobileAntiAliasing; // 0x3c(0x01)
	enum class EMobileFloatPrecisionMode MobileFloatPrecisionMode; // 0x3d(0x01)
	char pad_3E[0x2]; // 0x3e(0x02)
	char bMobileAllowDitheredLODTransition : 1; // 0x40(0x01)
	char bMobileVirtualTextures : 1; // 0x40(0x01)
	char bReflectionCaptureCompression : 1; // 0x40(0x01)
	char bMobileDisableVertexFog : 1; // 0x40(0x01)
	char bDiscardUnusedQualityLevels : 1; // 0x40(0x01)
	char pad_40_5 : 3; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	enum class EShaderCompressionFormat ShaderCompressionFormat; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	char bOcclusionCulling : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float MinScreenRadiusForLights; // 0x4c(0x04)
	float MinScreenRadiusForEarlyZPass; // 0x50(0x04)
	float MinScreenRadiusForCSMdepth; // 0x54(0x04)
	char bPrecomputedVisibilityWarning : 1; // 0x58(0x01)
	char bTextureStreaming : 1; // 0x58(0x01)
	char bUseDXT5NormalMaps : 1; // 0x58(0x01)
	char bVirtualTextures : 1; // 0x58(0x01)
	char bVirtualTextureEnableAutoImport : 1; // 0x58(0x01)
	char bVirtualTexturedLightmaps : 1; // 0x58(0x01)
	char bVirtualTextureAnisotropicFiltering : 1; // 0x58(0x01)
	char pad_58_7 : 1; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	uint32_t VirtualTextureTileSize; // 0x5c(0x04)
	uint32_t VirtualTextureTileBorderSize; // 0x60(0x04)
	uint32_t VirtualTextureFeedbackFactor; // 0x64(0x04)
	enum class EWorkingColorSpace WorkingColorSpaceChoice; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct FVector2D RedChromaticityCoordinate; // 0x70(0x10)
	struct FVector2D GreenChromaticityCoordinate; // 0x80(0x10)
	struct FVector2D BlueChromaticityCoordinate; // 0x90(0x10)
	struct FVector2D WhiteChromaticityCoordinate; // 0xa0(0x10)
	char bClearCoatEnableSecondNormal : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	enum class EDynamicGlobalIlluminationMethod DynamicGlobalIllumination; // 0xb4(0x01)
	enum class EReflectionMethod Reflections; // 0xb5(0x01)
	char pad_B6[0x2]; // 0xb6(0x02)
	int32_t ReflectionCaptureResolution; // 0xb8(0x04)
	char ReflectionEnvironmentLightmapMixBasedOnRoughness : 1; // 0xbc(0x01)
	char bUseHardwareRayTracingForLumen : 1; // 0xbc(0x01)
	char pad_BC_2 : 6; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
	enum class ELumenRayLightingMode LumenRayLightingMode; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	char LumenFrontLayerTranslucencyReflections : 1; // 0xc4(0x01)
	char pad_C4_1 : 7; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	enum class ELumenSoftwareTracingMode LumenSoftwareTracingMode; // 0xc8(0x01)
	enum class EShadowMapMethod ShadowMapMethod; // 0xc9(0x01)
	char pad_CA[0x2]; // 0xca(0x02)
	char bEnableRayTracing : 1; // 0xcc(0x01)
	char bEnableRayTracingShadows : 1; // 0xcc(0x01)
	char bEnableRayTracingSkylight : 1; // 0xcc(0x01)
	char bEnableRayTracingTextureLOD : 1; // 0xcc(0x01)
	char bEnablePathTracing : 1; // 0xcc(0x01)
	char bGenerateMeshDistanceFields : 1; // 0xcc(0x01)
	char pad_CC_6 : 2; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)
	float DistanceFieldVoxelDensity; // 0xd0(0x04)
	char bAllowStaticLighting : 1; // 0xd4(0x01)
	char bUseNormalMapsForStaticLighting : 1; // 0xd4(0x01)
	char bForwardShading : 1; // 0xd4(0x01)
	char bVertexFoggingForOpaque : 1; // 0xd4(0x01)
	char bSeparateTranslucency : 1; // 0xd4(0x01)
	char pad_D4_5 : 3; // 0xd4(0x01)
	char pad_D5[0x3]; // 0xd5(0x03)
	enum class ETranslucentSortPolicy TranslucentSortPolicy; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
	struct FVector TranslucentSortAxis; // 0xe0(0x18)
	enum class EFixedFoveationLevels HMDFixedFoveationLevel; // 0xf8(0x01)
	char pad_F9[0x3]; // 0xf9(0x03)
	char bHMDFixedFoveationDynamic : 1; // 0xfc(0x01)
	char pad_FC_1 : 7; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	enum class ECustomDepthStencil CustomDepthStencil; // 0x100(0x01)
	char pad_101[0x3]; // 0x101(0x03)
	char bCustomDepthTaaJitter : 1; // 0x104(0x01)
	char pad_104_1 : 7; // 0x104(0x01)
	char pad_105[0x3]; // 0x105(0x03)
	enum class EAlphaChannelMode bEnableAlphaChannelInPostProcessing; // 0x108(0x01)
	char pad_109[0x3]; // 0x109(0x03)
	char bDefaultFeatureBloom : 1; // 0x10c(0x01)
	char bDefaultFeatureAmbientOcclusion : 1; // 0x10c(0x01)
	char bDefaultFeatureAmbientOcclusionStaticFraction : 1; // 0x10c(0x01)
	char bDefaultFeatureAutoExposure : 1; // 0x10c(0x01)
	char pad_10C_4 : 4; // 0x10c(0x01)
	char pad_10D[0x3]; // 0x10d(0x03)
	enum class EAutoExposureMethodUI DefaultFeatureAutoExposure; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	float DefaultFeatureAutoExposureBias; // 0x114(0x04)
	char bExtendDefaultLuminanceRangeInAutoExposureSettings : 1; // 0x118(0x01)
	char bDefaultFeatureMotionBlur : 1; // 0x118(0x01)
	char bDefaultFeatureLensFlare : 1; // 0x118(0x01)
	char bTemporalUpsampling : 1; // 0x118(0x01)
	char pad_118_4 : 4; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	enum class EAntiAliasingMethod DefaultFeatureAntiAliasing; // 0x11c(0x01)
	enum class ECompositingSampleCount MSAASampleCount; // 0x11d(0x01)
	enum class ELightUnits DefaultLightUnits; // 0x11e(0x01)
	enum class EDefaultBackBufferPixelFormat DefaultBackBufferPixelFormat; // 0x11f(0x01)
	char bRenderUnbuiltPreviewShadowsInGame : 1; // 0x120(0x01)
	char bStencilForLODDither : 1; // 0x120(0x01)
	char pad_120_2 : 6; // 0x120(0x01)
	char pad_121[0x3]; // 0x121(0x03)
	enum class EEarlyZPass EarlyZPass; // 0x124(0x01)
	char pad_125[0x3]; // 0x125(0x03)
	char bEarlyZPassOnlyMaterialMasking : 1; // 0x128(0x01)
	char bEnableCSMCaching : 1; // 0x128(0x01)
	char bDBuffer : 1; // 0x128(0x01)
	char pad_128_3 : 5; // 0x128(0x01)
	char pad_129[0x3]; // 0x129(0x03)
	enum class EClearSceneOptions ClearSceneMethod; // 0x12c(0x01)
	enum class EVelocityOutputPass VelocityPass; // 0x12d(0x01)
	enum class EVertexDeformationOutputsVelocity VertexDeformationOutputsVelocity; // 0x12e(0x01)
	char pad_12F[0x1]; // 0x12f(0x01)
	char bSelectiveBasePassOutputs : 1; // 0x130(0x01)
	char bDefaultParticleCutouts : 1; // 0x130(0x01)
	char pad_130_2 : 6; // 0x130(0x01)
	char pad_131[0x3]; // 0x131(0x03)
	int32_t GPUSimulationTextureSizeX; // 0x134(0x04)
	int32_t GPUSimulationTextureSizeY; // 0x138(0x04)
	char bGlobalClipPlane : 1; // 0x13c(0x01)
	char pad_13C_1 : 7; // 0x13c(0x01)
	char pad_13D[0x3]; // 0x13d(0x03)
	enum class EGBufferFormat GBufferFormat; // 0x140(0x01)
	char pad_141[0x3]; // 0x141(0x03)
	char bUseGPUMorphTargets : 1; // 0x144(0x01)
	char bNvidiaAftermathEnabled : 1; // 0x144(0x01)
	char bMultiView : 1; // 0x144(0x01)
	char bMobilePostProcessing : 1; // 0x144(0x01)
	char bMobileMultiView : 1; // 0x144(0x01)
	char bMobileUseHWsRGBEncoding : 1; // 0x144(0x01)
	char bRoundRobinOcclusion : 1; // 0x144(0x01)
	char bODSCapture : 1; // 0x144(0x01)
	char bMeshStreaming : 1; // 0x145(0x01)
	char pad_145_1 : 7; // 0x145(0x01)
	char pad_146[0x2]; // 0x146(0x02)
	float WireframeCullThreshold; // 0x148(0x04)
	char bSupportStationarySkylight : 1; // 0x14c(0x01)
	char bSupportLowQualityLightmaps : 1; // 0x14c(0x01)
	char bSupportPointLightWholeSceneShadows : 1; // 0x14c(0x01)
	char bSupportSkyAtmosphere : 1; // 0x14c(0x01)
	char bSupportSkyAtmosphereAffectsHeightFog : 1; // 0x14c(0x01)
	char bSupportCloudShadowOnForwardLitTranslucent : 1; // 0x14c(0x01)
	char bSupportCloudShadowOnSingleLayerWater : 1; // 0x14c(0x01)
	char bEnableStrata : 1; // 0x14c(0x01)
	char pad_14D[0x3]; // 0x14d(0x03)
	uint32_t StrataBytePerPixel; // 0x150(0x04)
	char StrataOpaqueMaterialRoughRefraction : 1; // 0x154(0x01)
	char StrataDebugAdvancedVisualizationShaders : 1; // 0x154(0x01)
	char bMaterialRoughDiffuse : 1; // 0x154(0x01)
	char bMaterialEnergyConservation : 1; // 0x154(0x01)
	char bOrderedIndependentTransparencyEnable : 1; // 0x154(0x01)
	char bSupportSkinCacheShaders : 1; // 0x154(0x01)
	char bSkipCompilingGPUSkinVF : 1; // 0x154(0x01)
	char pad_154_7 : 1; // 0x154(0x01)
	char pad_155[0x3]; // 0x155(0x03)
	enum class ESkinCacheDefaultBehavior DefaultSkinCacheBehavior; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	float SkinCacheSceneMemoryLimitInMB; // 0x15c(0x04)
	char bMobileEnableStaticAndCSMShadowReceivers : 1; // 0x160(0x01)
	char bMobileEnableMovableLightCSMShaderCulling : 1; // 0x160(0x01)
	char bMobileForwardEnableLocalLights : 1; // 0x160(0x01)
	char bMobileForwardEnableClusteredReflections : 1; // 0x160(0x01)
	char bMobileEnableNoPrecomputedLightingCSMShader : 1; // 0x160(0x01)
	char bMobileAllowDistanceFieldShadows : 1; // 0x160(0x01)
	char bMobileAllowMovableDirectionalLights : 1; // 0x160(0x01)
	char bMobileAllowMovableSpotlightShadows : 1; // 0x160(0x01)
	char bSupport16BitBoneIndex : 1; // 0x161(0x01)
	char bGPUSkinLimit2BoneInfluences : 1; // 0x161(0x01)
	char bSupportDepthOnlyIndexBuffers : 1; // 0x161(0x01)
	char bSupportReversedIndexBuffers : 1; // 0x161(0x01)
	char bMobileAmbientOcclusion : 1; // 0x161(0x01)
	char bUseUnlimitedBoneInfluences : 1; // 0x161(0x01)
	char pad_161_6 : 2; // 0x161(0x01)
	char pad_162[0x2]; // 0x162(0x02)
	int32_t UnlimitedBonInfluencesThreshold; // 0x164(0x04)
	struct FPerPlatformInt MaxSkinBones; // 0x168(0x04)
	enum class EMobilePlanarReflectionMode MobilePlanarReflectionMode; // 0x16c(0x01)
	char pad_16D[0x3]; // 0x16d(0x03)
	char bMobileSupportsGen4TAA : 1; // 0x170(0x01)
	char pad_170_1 : 7; // 0x170(0x01)
	char pad_171[0x3]; // 0x171(0x03)
	struct FPerPlatformBool bStreamSkeletalMeshLODs; // 0x174(0x01)
	struct FPerPlatformBool bDiscardSkeletalMeshOptionalLODs; // 0x175(0x01)
	char pad_176[0x2]; // 0x176(0x02)
	struct FSoftObjectPath VisualizeCalibrationColorMaterialPath; // 0x178(0x18)
	struct FSoftObjectPath VisualizeCalibrationCustomMaterialPath; // 0x190(0x18)
	struct FSoftObjectPath VisualizeCalibrationGrayscaleMaterialPath; // 0x1a8(0x18)
};

// Class Engine.RendererOverrideSettings
// Size: 0x38 (Inherited: 0x30)
struct URendererOverrideSettings : UDeveloperSettings {
	char bSupportAllShaderPermutations : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ReplayNetConnection
// Size: 0x3d30 (Inherited: 0x32c0)
struct UReplayNetConnection : UNetConnection {
	char pad_32C0[0xa70]; // 0x32c0(0xa70)
};

// Class Engine.ReplaySubsystem
// Size: 0x40 (Inherited: 0x30)
struct UReplaySubsystem : UGameInstanceSubsystem {
	bool bLoadDefaultMapOnStop; // 0x30(0x01)
	char pad_31[0xf]; // 0x31(0x0f)

	void RequestCheckpoint(); // Function Engine.ReplaySubsystem.RequestCheckpoint // (Final|Native|Public|BlueprintCallable) // @ game+0x9337d18
	bool IsRecording(); // Function Engine.ReplaySubsystem.IsRecording // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9337cf4
	bool IsPlaying(); // Function Engine.ReplaySubsystem.IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9337cd0
	float GetReplayCurrentTime(); // Function Engine.ReplaySubsystem.GetReplayCurrentTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9337ca8
	struct FString GetActiveReplayName(); // Function Engine.ReplaySubsystem.GetActiveReplayName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9337c34
};

// Class Engine.ReporterBase
// Size: 0x30 (Inherited: 0x28)
struct UReporterBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ReporterGraph
// Size: 0xc8 (Inherited: 0x30)
struct UReporterGraph : UReporterBase {
	char pad_30[0x98]; // 0x30(0x98)
};

// Class Engine.ReverbEffect
// Size: 0x60 (Inherited: 0x28)
struct UReverbEffect : UObject {
	bool bBypassEarlyReflections; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float ReflectionsDelay; // 0x2c(0x04)
	float GainHF; // 0x30(0x04)
	float ReflectionsGain; // 0x34(0x04)
	bool bBypassLateReflections; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float LateDelay; // 0x3c(0x04)
	float DecayTime; // 0x40(0x04)
	float Density; // 0x44(0x04)
	float Diffusion; // 0x48(0x04)
	float AirAbsorptionGainHF; // 0x4c(0x04)
	float DecayHFRatio; // 0x50(0x04)
	float LateGain; // 0x54(0x04)
	float Gain; // 0x58(0x04)
	float RoomRolloffFactor; // 0x5c(0x04)
};

// Class Engine.Rig
// Size: 0x50 (Inherited: 0x28)
struct URig : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct FTransformBase> TransformBases; // 0x30(0x10)
	struct TArray<struct FNode> Nodes; // 0x40(0x10)
};

// Class Engine.RotatingMovementComponent
// Size: 0x140 (Inherited: 0x108)
struct URotatingMovementComponent : UMovementComponent {
	struct FRotator RotationRate; // 0x108(0x18)
	struct FVector PivotTranslation; // 0x120(0x18)
	char bRotationInLocalSpace : 1; // 0x138(0x01)
	char pad_138_1 : 7; // 0x138(0x01)
	char pad_139[0x7]; // 0x139(0x07)
};

// Class Engine.RPCDoSDetectionConfig
// Size: 0x78 (Inherited: 0x28)
struct URPCDoSDetectionConfig : UObject {
	bool bRPCDoSDetection; // 0x28(0x01)
	bool bRPCDoSAnalytics; // 0x29(0x01)
	char pad_2A[0x2]; // 0x2a(0x02)
	int32_t HitchTimeQuotaMS; // 0x2c(0x04)
	int32_t HitchSuspendDetectionTimeMS; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct FString> DetectionSeverity; // 0x38(0x10)
	int32_t InitialConnectToleranceMS; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct TArray<struct FName> RPCBlockWhitelist; // 0x50(0x10)
	struct TArray<struct FRPCAnalyticsThreshold> RPCAnalyticsThresholds; // 0x60(0x10)
	double RPCAnalyticsOverrideChance; // 0x70(0x08)
};

// Class Engine.RuntimeVirtualTexture
// Size: 0xe0 (Inherited: 0x28)
struct URuntimeVirtualTexture : UObject {
	int32_t TileCount; // 0x28(0x04)
	int32_t TileSize; // 0x2c(0x04)
	int32_t TileBorderSize; // 0x30(0x04)
	enum class ERuntimeVirtualTextureMaterialType MaterialType; // 0x34(0x01)
	bool bCompressTextures; // 0x35(0x01)
	bool bUseLowQualityCompression; // 0x36(0x01)
	bool bClearTextures; // 0x37(0x01)
	bool bSinglePhysicalSpace; // 0x38(0x01)
	bool bPrivateSpace; // 0x39(0x01)
	bool bAdaptive; // 0x3a(0x01)
	bool bContinuousUpdate; // 0x3b(0x01)
	int32_t RemoveLowMips; // 0x3c(0x04)
	enum class TextureGroup LODGroup; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	int32_t Size; // 0x44(0x04)
	struct URuntimeVirtualTextureStreamingProxy* StreamingTexture; // 0x48(0x08)
	char pad_50[0x90]; // 0x50(0x90)

	int32_t GetTileSize(); // Function Engine.RuntimeVirtualTexture.GetTileSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93392f8
	int32_t GetTileCount(); // Function Engine.RuntimeVirtualTexture.GetTileCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93392d0
	int32_t GetTileBorderSize(); // Function Engine.RuntimeVirtualTexture.GetTileBorderSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93392a0
	int32_t GetSize(); // Function Engine.RuntimeVirtualTexture.GetSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933927c
	int32_t GetPageTableSize(); // Function Engine.RuntimeVirtualTexture.GetPageTableSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9339230
};

// Class Engine.RuntimeVirtualTextureComponent
// Size: 0x330 (Inherited: 0x2a0)
struct URuntimeVirtualTextureComponent : USceneComponent {
	struct TSoftObjectPtr<AActor> BoundsAlignActor; // 0x2a0(0x28)
	bool bSetBoundsButton; // 0x2c8(0x01)
	bool bSnapBoundsToLandscape; // 0x2c9(0x01)
	char pad_2CA[0x6]; // 0x2ca(0x06)
	struct URuntimeVirtualTexture* VirtualTexture; // 0x2d0(0x08)
	bool bEnableScalability; // 0x2d8(0x01)
	char pad_2D9[0x3]; // 0x2d9(0x03)
	uint32_t ScalabilityGroup; // 0x2dc(0x04)
	bool bHidePrimitives; // 0x2e0(0x01)
	char pad_2E1[0x7]; // 0x2e1(0x07)
	struct UVirtualTextureBuilder* StreamingTexture; // 0x2e8(0x08)
	int32_t StreamLowMips; // 0x2f0(0x04)
	bool bBuildStreamingMipsButton; // 0x2f4(0x01)
	enum class ETextureLossyCompressionAmount LossyCompressionAmount; // 0x2f5(0x01)
	bool bUseStreamingLowMipsInEditor; // 0x2f6(0x01)
	bool bBuildDebugStreamingMips; // 0x2f7(0x01)
	char pad_2F8[0x38]; // 0x2f8(0x38)

	void Invalidate(struct FBoxSphereBounds& WorldBounds); // Function Engine.RuntimeVirtualTextureComponent.Invalidate // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9339328
};

// Class Engine.RuntimeVirtualTextureVolume
// Size: 0x290 (Inherited: 0x288)
struct ARuntimeVirtualTextureVolume : AActor {
	struct URuntimeVirtualTextureComponent* VirtualTextureComponent; // 0x288(0x08)
};

// Class Engine.RVOAvoidanceInterface
// Size: 0x28 (Inherited: 0x28)
struct URVOAvoidanceInterface : UInterface {
};

// Class Engine.Scene
// Size: 0x28 (Inherited: 0x28)
struct UScene : UObject {
};

// Class Engine.SceneCapture2D
// Size: 0x2a0 (Inherited: 0x298)
struct ASceneCapture2D : ASceneCapture {
	struct USceneCaptureComponent2D* CaptureComponent2D; // 0x298(0x08)

	void OnInterpToggle(bool bEnable); // Function Engine.SceneCapture2D.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x9324fbc
};

// Class Engine.SceneCaptureComponentCube
// Size: 0x390 (Inherited: 0x360)
struct USceneCaptureComponentCube : USceneCaptureComponent {
	struct UTextureRenderTargetCube* TextureTarget; // 0x358(0x08)
	bool bCaptureRotation; // 0x360(0x01)
	struct UTextureRenderTargetCube* TextureTargetLeft; // 0x368(0x08)
	struct UTextureRenderTargetCube* TextureTargetRight; // 0x370(0x08)
	struct UTextureRenderTarget2D* TextureTargetODS; // 0x378(0x08)
	float IPD; // 0x380(0x04)
	char pad_385[0xb]; // 0x385(0x0b)

	void CaptureScene(); // Function Engine.SceneCaptureComponentCube.CaptureScene // (Final|Native|Public|BlueprintCallable) // @ game+0x933a62c
};

// Class Engine.SceneCaptureCube
// Size: 0x2a0 (Inherited: 0x298)
struct ASceneCaptureCube : ASceneCapture {
	struct USceneCaptureComponentCube* CaptureComponentCube; // 0x298(0x08)

	void OnInterpToggle(bool bEnable); // Function Engine.SceneCaptureCube.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x9324fbc
};

// Class Engine.SCS_Node
// Size: 0xc8 (Inherited: 0x28)
struct USCS_Node : UObject {
	ClassPtrProperty ComponentClass; // 0x28(0x08)
	struct UActorComponent* ComponentTemplate; // 0x30(0x08)
	struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData; // 0x38(0x48)
	struct FName AttachToName; // 0x80(0x04)
	struct FName ParentComponentOrVariableName; // 0x84(0x04)
	struct FName ParentComponentOwnerClassName; // 0x88(0x04)
	bool bIsParentComponentNative; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)
	struct TArray<struct USCS_Node*> ChildNodes; // 0x90(0x10)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0xa0(0x10)
	struct FGuid VariableGuid; // 0xb0(0x10)
	struct FName InternalVariableName; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
};

// Class Engine.ServerStatReplicator
// Size: 0x350 (Inherited: 0x288)
struct AServerStatReplicator : AInfo {
	bool bUpdateStatNet; // 0x288(0x01)
	bool bOverwriteClientStats; // 0x289(0x01)
	char pad_28A[0x2]; // 0x28a(0x02)
	uint32_t Channels; // 0x28c(0x04)
	uint32_t InRate; // 0x290(0x04)
	uint32_t OutRate; // 0x294(0x04)
	char pad_298[0x4]; // 0x298(0x04)
	uint32_t MaxPacketOverhead; // 0x29c(0x04)
	uint32_t InRateClientMax; // 0x2a0(0x04)
	uint32_t InRateClientMin; // 0x2a4(0x04)
	uint32_t InRateClientAvg; // 0x2a8(0x04)
	uint32_t InPacketsClientMax; // 0x2ac(0x04)
	uint32_t InPacketsClientMin; // 0x2b0(0x04)
	uint32_t InPacketsClientAvg; // 0x2b4(0x04)
	uint32_t OutRateClientMax; // 0x2b8(0x04)
	uint32_t OutRateClientMin; // 0x2bc(0x04)
	uint32_t OutRateClientAvg; // 0x2c0(0x04)
	uint32_t OutPacketsClientMax; // 0x2c4(0x04)
	uint32_t OutPacketsClientMin; // 0x2c8(0x04)
	uint32_t OutPacketsClientAvg; // 0x2cc(0x04)
	uint32_t NetNumClients; // 0x2d0(0x04)
	uint32_t InPackets; // 0x2d4(0x04)
	uint32_t OutPackets; // 0x2d8(0x04)
	uint32_t InBunches; // 0x2dc(0x04)
	uint32_t OutBunches; // 0x2e0(0x04)
	uint32_t OutLoss; // 0x2e4(0x04)
	uint32_t InLoss; // 0x2e8(0x04)
	uint32_t VoiceBytesSent; // 0x2ec(0x04)
	uint32_t VoiceBytesRecv; // 0x2f0(0x04)
	uint32_t VoicePacketsSent; // 0x2f4(0x04)
	uint32_t VoicePacketsRecv; // 0x2f8(0x04)
	uint32_t PercentInVoice; // 0x2fc(0x04)
	uint32_t PercentOutVoice; // 0x300(0x04)
	uint32_t NumActorChannels; // 0x304(0x04)
	uint32_t NumConsideredActors; // 0x308(0x04)
	uint32_t PrioritizedActors; // 0x30c(0x04)
	uint32_t NumRelevantActors; // 0x310(0x04)
	uint32_t NumRelevantDeletedActors; // 0x314(0x04)
	uint32_t NumReplicatedActorAttempts; // 0x318(0x04)
	uint32_t NumReplicatedActors; // 0x31c(0x04)
	uint32_t NumActors; // 0x320(0x04)
	uint32_t NumNetActors; // 0x324(0x04)
	uint32_t NumDormantActors; // 0x328(0x04)
	uint32_t NumInitiallyDormantActors; // 0x32c(0x04)
	uint32_t NumNetGUIDsAckd; // 0x330(0x04)
	uint32_t NumNetGUIDsPending; // 0x334(0x04)
	uint32_t NumNetGUIDsUnAckd; // 0x338(0x04)
	uint32_t ObjPathBytes; // 0x33c(0x04)
	uint32_t NetGUIDOutRate; // 0x340(0x04)
	uint32_t NetGUIDInRate; // 0x344(0x04)
	uint32_t NetSaturated; // 0x348(0x04)
	char pad_34C[0x4]; // 0x34c(0x04)
};

// Class Engine.ShadowMapTexture2D
// Size: 0x180 (Inherited: 0x178)
struct UShadowMapTexture2D : UTexture2D {
	enum class EShadowMapFlags ShadowmapFlags; // 0x178(0x01)
	char pad_179[0x7]; // 0x179(0x07)
};

// Class Engine.SimpleConstructionScript
// Size: 0xa0 (Inherited: 0x28)
struct USimpleConstructionScript : UObject {
	struct TArray<struct USCS_Node*> RootNodes; // 0x28(0x10)
	struct TArray<struct USCS_Node*> AllNodes; // 0x38(0x10)
	struct USCS_Node* DefaultSceneRootNode; // 0x48(0x08)
	char pad_50[0x50]; // 0x50(0x50)
};

// Class Engine.SkeletalMesh
// Size: 0x4d8 (Inherited: 0xd0)
struct USkeletalMesh : UStreamableRenderAsset {
	char pad_D0[0x28]; // 0xd0(0x28)
	struct USkeleton* Skeleton; // 0xf8(0x08)
	struct FBoxSphereBounds ImportedBounds; // 0x100(0x38)
	struct FBoxSphereBounds ExtendedBounds; // 0x138(0x38)
	struct FVector PositiveBoundsExtension; // 0x170(0x18)
	struct FVector NegativeBoundsExtension; // 0x188(0x18)
	struct TArray<struct FSkeletalMaterial> Materials; // 0x1a0(0x10)
	struct TArray<struct FBoneMirrorInfo> SkelMirrorTable; // 0x1b0(0x10)
	struct TArray<struct FSkeletalMeshLODInfo> LODInfo; // 0x1c0(0x10)
	char pad_1D0[0x50]; // 0x1d0(0x50)
	struct FPerQualityLevelInt MinQualityLevelLOD; // 0x220(0x68)
	struct FPerPlatformInt MinLOD; // 0x288(0x04)
	struct FPerPlatformBool DisableBelowMinLodStripping; // 0x28c(0x01)
	enum class EAxis SkelMirrorAxis; // 0x28d(0x01)
	enum class EAxis SkelMirrorFlipAxis; // 0x28e(0x01)
	char bUseFullPrecisionUVs : 1; // 0x28f(0x01)
	char bUseHighPrecisionTangentBasis : 1; // 0x28f(0x01)
	char bHasBeenSimplified : 1; // 0x28f(0x01)
	char bHasVertexColors : 1; // 0x28f(0x01)
	char pad_28F_4 : 1; // 0x28f(0x01)
	char bEnablePerPolyCollision : 1; // 0x28f(0x01)
	char pad_28F_6 : 2; // 0x28f(0x01)
	struct UBodySetup* BodySetup; // 0x290(0x08)
	struct UPhysicsAsset* PhysicsAsset; // 0x298(0x08)
	struct UPhysicsAsset* ShadowPhysicsAsset; // 0x2a0(0x08)
	struct TArray<struct UNodeMappingContainer*> NodeMappingData; // 0x2a8(0x10)
	char bSupportRayTracing : 1; // 0x2b8(0x01)
	char pad_2B8_1 : 7; // 0x2b8(0x01)
	char pad_2B9[0x3]; // 0x2b9(0x03)
	int32_t RayTracingMinLOD; // 0x2bc(0x04)
	enum class EClothLODBiasMode ClothLODBiasMode; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)
	struct TArray<struct UMorphTarget*> MorphTargets; // 0x2c8(0x10)
	char pad_2D8[0x178]; // 0x2d8(0x178)
	struct UAnimInstance* PostProcessAnimBlueprint; // 0x450(0x08)
	struct TArray<struct UClothingAssetBase*> MeshClothingAssets; // 0x458(0x10)
	struct FSkeletalMeshSamplingInfo SamplingInfo; // 0x468(0x30)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x498(0x10)
	struct TArray<struct USkeletalMeshSocket*> Sockets; // 0x4a8(0x10)
	char pad_4B8[0x10]; // 0x4b8(0x10)
	struct TArray<struct FSkinWeightProfileInfo> SkinWeightProfiles; // 0x4c8(0x10)

	void SetSkeleton(struct USkeleton* InSkeleton); // Function Engine.SkeletalMesh.SetSkeleton // (Final|Native|Public|BlueprintCallable) // @ game+0x7661e90
	void SetMorphTargets(struct TArray<struct UMorphTarget*>& InMorphTargets); // Function Engine.SkeletalMesh.SetMorphTargets // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x933f6d4
	void SetMinLODForQualityLevels(struct TMap<enum class EPerQualityLevels, int32_t>& QualityLevelMinimumLODs, int32_t Default); // Function Engine.SkeletalMesh.SetMinLODForQualityLevels // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x933f5d8
	void SetMeshClothingAssets(struct TArray<struct UClothingAssetBase*>& InMeshClothingAssets); // Function Engine.SkeletalMesh.SetMeshClothingAssets // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x933f4fc
	void SetMaterials(struct TArray<struct FSkeletalMaterial>& InMaterials); // Function Engine.SkeletalMesh.SetMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x933f45c
	void SetLODSettings(struct USkeletalMeshLODSettings* InLODSettings); // Function Engine.SkeletalMesh.SetLODSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x64a2a4c
	void SetDefaultAnimatingRig(struct TSoftObjectPtr<UObject> InAnimatingRig); // Function Engine.SkeletalMesh.SetDefaultAnimatingRig // (Final|Native|Public|BlueprintCallable) // @ game+0x933f34c
	int32_t NumSockets(); // Function Engine.SkeletalMesh.NumSockets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933f32c
	struct TArray<struct FString> K2_GetAllMorphTargetNames(); // Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933f2f0
	bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections); // Function Engine.SkeletalMesh.IsSectionUsingCloth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933f1e8
	struct USkeletalMeshSocket* GetSocketByIndex(int32_t Index); // Function Engine.SkeletalMesh.GetSocketByIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933f15c
	struct USkeleton* GetSkeleton(); // Function Engine.SkeletalMesh.GetSkeleton // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x295aa0c
	struct UPhysicsAsset* GetShadowPhysicsAsset(); // Function Engine.SkeletalMesh.GetShadowPhysicsAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2605140
	struct UPhysicsAsset* GetPhysicsAsset(); // Function Engine.SkeletalMesh.GetPhysicsAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x7561fd0
	struct TArray<struct UNodeMappingContainer*> GetNodeMappingData(); // Function Engine.SkeletalMesh.GetNodeMappingData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933f0e8
	struct UNodeMappingContainer* GetNodeMappingContainer(struct UBlueprint* SourceAsset); // Function Engine.SkeletalMesh.GetNodeMappingContainer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933f058
	struct TArray<struct UMorphTarget*> GetMorphTargets(); // Function Engine.SkeletalMesh.GetMorphTargets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933f020
	void GetMinLODForQualityLevels(struct TMap<enum class EPerQualityLevels, int32_t>& QualityLevelMinimumLODs, int32_t& Default); // Function Engine.SkeletalMesh.GetMinLODForQualityLevels // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x933ef10
	struct TArray<struct UClothingAssetBase*> GetMeshClothingAssets(); // Function Engine.SkeletalMesh.GetMeshClothingAssets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933ee9c
	struct TArray<struct FSkeletalMaterial> GetMaterials(); // Function Engine.SkeletalMesh.GetMaterials // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933ee80
	struct USkeletalMeshLODSettings* GetLODSettings(); // Function Engine.SkeletalMesh.GetLODSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5d0c950
	struct FBoxSphereBounds GetImportedBounds(); // Function Engine.SkeletalMesh.GetImportedBounds // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x933ee40
	struct TSoftObjectPtr<UObject> GetDefaultAnimatingRig(); // Function Engine.SkeletalMesh.GetDefaultAnimatingRig // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933ed60
	struct FBoxSphereBounds GetBounds(); // Function Engine.SkeletalMesh.GetBounds // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x933ed20
	struct USkeletalMeshSocket* FindSocketInfo(struct FName InSocketName, struct FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x933eb48
	struct USkeletalMeshSocket* FindSocketAndIndex(struct FName InSocketName, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketAndIndex // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x933ea7c
	struct USkeletalMeshSocket* FindSocket(struct FName InSocketName); // Function Engine.SkeletalMesh.FindSocket // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x933e9f8
};

// Class Engine.SkeletalMeshEditorData
// Size: 0x28 (Inherited: 0x28)
struct USkeletalMeshEditorData : UObject {
};

// Class Engine.SkeletalMeshLODSettings
// Size: 0xb8 (Inherited: 0x30)
struct USkeletalMeshLODSettings : UDataAsset {
	struct FPerQualityLevelInt MinQualityLevelLOD; // 0x30(0x68)
	struct FPerPlatformInt MinLOD; // 0x98(0x04)
	struct FPerPlatformBool DisableBelowMinLodStripping; // 0x9c(0x01)
	bool bOverrideLODStreamingSettings; // 0x9d(0x01)
	struct FPerPlatformBool bSupportLODStreaming; // 0x9e(0x01)
	char pad_9F[0x1]; // 0x9f(0x01)
	struct FPerPlatformInt MaxNumStreamedLODs; // 0xa0(0x04)
	struct FPerPlatformInt MaxNumOptionalLODs; // 0xa4(0x04)
	struct TArray<struct FSkeletalMeshLODGroupSettings> LODGroups; // 0xa8(0x10)
};

// Class Engine.SkeletalMeshSimplificationSettings
// Size: 0x38 (Inherited: 0x30)
struct USkeletalMeshSimplificationSettings : UDeveloperSettings {
	struct FName SkeletalMeshReductionModuleName; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.SkeletalMeshSocket
// Size: 0x80 (Inherited: 0x28)
struct USkeletalMeshSocket : UObject {
	struct FName SocketName; // 0x28(0x04)
	struct FName BoneName; // 0x2c(0x04)
	struct FVector RelativeLocation; // 0x30(0x18)
	struct FRotator RelativeRotation; // 0x48(0x18)
	struct FVector RelativeScale; // 0x60(0x18)
	bool bForceAlwaysAnimated; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)

	void InitializeSocketFromLocation(struct USkeletalMeshComponent* SkelComp, struct FVector WorldLocation, struct FVector WorldNormal); // Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9345e60
	struct FVector GetSocketLocation(struct USkeletalMeshComponent* SkelComp); // Function Engine.SkeletalMeshSocket.GetSocketLocation // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9345b70
};

// Class Engine.SkyAtmosphere
// Size: 0x290 (Inherited: 0x288)
struct ASkyAtmosphere : AInfo {
	struct USkyAtmosphereComponent* SkyAtmosphereComponent; // 0x288(0x08)
};

// Class Engine.SkyLightComponent
// Size: 0x4b0 (Inherited: 0x2e0)
struct USkyLightComponent : ULightComponentBase {
	bool bRealTimeCapture; // 0x2d8(0x01)
	enum class ESkyLightSourceType SourceType; // 0x2d9(0x01)
	struct UTextureCube* Cubemap; // 0x2e0(0x08)
	float SourceCubemapAngle; // 0x2e8(0x04)
	int32_t CubemapResolution; // 0x2ec(0x04)
	float SkyDistanceThreshold; // 0x2f0(0x04)
	bool bCaptureEmissiveOnly; // 0x2f4(0x01)
	bool bLowerHemisphereIsBlack; // 0x2f5(0x01)
	struct FLinearColor LowerHemisphereColor; // 0x2f8(0x10)
	float OcclusionMaxDistance; // 0x308(0x04)
	float Contrast; // 0x30c(0x04)
	float OcclusionExponent; // 0x310(0x04)
	float MinOcclusion; // 0x314(0x04)
	struct FColor OcclusionTint; // 0x318(0x04)
	char bCloudAmbientOcclusion : 1; // 0x31c(0x01)
	char pad_31C_1 : 7; // 0x31c(0x01)
	char pad_31D[0x3]; // 0x31d(0x03)
	float CloudAmbientOcclusionStrength; // 0x320(0x04)
	float CloudAmbientOcclusionExtent; // 0x324(0x04)
	float CloudAmbientOcclusionMapResolutionScale; // 0x328(0x04)
	float CloudAmbientOcclusionApertureScale; // 0x32c(0x04)
	enum class EOcclusionCombineMode OcclusionCombineMode; // 0x330(0x01)
	char pad_331[0xa7]; // 0x331(0xa7)
	struct UTextureCube* BlendDestinationCubemap; // 0x3d8(0x08)
	char pad_3E0[0xd0]; // 0x3e0(0xd0)

	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x9348ad4
	void SetSourceCubemapAngle(float NewValue); // Function Engine.SkyLightComponent.SetSourceCubemapAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x9348a50
	void SetOcclusionTint(struct FColor& InTint); // Function Engine.SkyLightComponent.SetOcclusionTint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93486a4
	void SetOcclusionExponent(float InOcclusionExponent); // Function Engine.SkyLightComponent.SetOcclusionExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x9348620
	void SetOcclusionContrast(float InOcclusionContrast); // Function Engine.SkyLightComponent.SetOcclusionContrast // (Final|Native|Public|BlueprintCallable) // @ game+0x934859c
	void SetMinOcclusion(float InMinOcclusion); // Function Engine.SkyLightComponent.SetMinOcclusion // (Final|Native|Public|BlueprintCallable) // @ game+0x9348494
	void SetLowerHemisphereColor(struct FLinearColor& InLowerHemisphereColor); // Function Engine.SkyLightComponent.SetLowerHemisphereColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9348094
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.SkyLightComponent.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x934800c
	void SetIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x9347f88
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIndirectLightingIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x9347f04
	void SetCubemapBlend(struct UTextureCube* SourceCubemap, struct UTextureCube* DestinationCubemap, float InBlendFraction); // Function Engine.SkyLightComponent.SetCubemapBlend // (Final|Native|Public|BlueprintCallable) // @ game+0x9347d80
	void SetCubemap(struct UTextureCube* NewCubemap); // Function Engine.SkyLightComponent.SetCubemap // (Final|Native|Public|BlueprintCallable) // @ game+0x9347d00
	void RecaptureSky(); // Function Engine.SkyLightComponent.RecaptureSky // (Final|Native|Public|BlueprintCallable) // @ game+0x9347be4
};

// Class Engine.SlateBrushAsset
// Size: 0xf0 (Inherited: 0x28)
struct USlateBrushAsset : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FSlateBrush Brush; // 0x30(0xc0)
};

// Class Engine.SlateTextureAtlasInterface
// Size: 0x28 (Inherited: 0x28)
struct USlateTextureAtlasInterface : UInterface {
};

// Class Engine.SMInstanceElementAssetDataInterface
// Size: 0x30 (Inherited: 0x28)
struct USMInstanceElementAssetDataInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.SMInstanceElementHierarchyInterface
// Size: 0x30 (Inherited: 0x28)
struct USMInstanceElementHierarchyInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.SMInstanceElementIdMapTransactor
// Size: 0x28 (Inherited: 0x28)
struct USMInstanceElementIdMapTransactor : UObject {
};

// Class Engine.SMInstanceElementSelectionInterface
// Size: 0x30 (Inherited: 0x28)
struct USMInstanceElementSelectionInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.SMInstanceElementWorldInterface
// Size: 0x30 (Inherited: 0x28)
struct USMInstanceElementWorldInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.SMInstanceManager
// Size: 0x28 (Inherited: 0x28)
struct USMInstanceManager : UInterface {
};

// Class Engine.SMInstanceManagerProvider
// Size: 0x28 (Inherited: 0x28)
struct USMInstanceManagerProvider : UInterface {
};

// Class Engine.SmokeTestCommandlet
// Size: 0x80 (Inherited: 0x80)
struct USmokeTestCommandlet : UCommandlet {
};

// Class Engine.SoundAttenuation
// Size: 0x3e0 (Inherited: 0x28)
struct USoundAttenuation : UObject {
	struct FSoundAttenuationSettings Attenuation; // 0x28(0x3b8)
};

// Class Engine.SoundClass
// Size: 0xc8 (Inherited: 0x28)
struct USoundClass : UObject {
	struct FSoundClassProperties Properties; // 0x28(0x78)
	struct TArray<struct USoundClass*> ChildClasses; // 0xa0(0x10)
	struct TArray<struct FPassiveSoundMixModifier> PassiveSoundMixModifiers; // 0xb0(0x10)
	struct USoundClass* ParentClass; // 0xc0(0x08)
};

// Class Engine.SoundConcurrency
// Size: 0x48 (Inherited: 0x28)
struct USoundConcurrency : UObject {
	struct FSoundConcurrencySettings Concurrency; // 0x28(0x20)
};

// Class Engine.SoundEffectPresetWidgetInterface
// Size: 0x28 (Inherited: 0x28)
struct USoundEffectPresetWidgetInterface : UAudioPanelWidgetInterface {

	void OnPropertyChanged(struct USoundEffectPreset* Preset, struct FName PropertyName); // Function Engine.SoundEffectPresetWidgetInterface.OnPropertyChanged // (Event|Public|BlueprintEvent) // @ game+0xd67374
	void OnConstructed(struct USoundEffectPreset* Preset); // Function Engine.SoundEffectPresetWidgetInterface.OnConstructed // (Event|Public|BlueprintEvent) // @ game+0xd67374
	struct USoundEffectPreset* GetClass(); // Function Engine.SoundEffectPresetWidgetInterface.GetClass // (Event|Public|BlueprintEvent) // @ game+0xd67374
};

// Class Engine.SoundEffectSourcePresetChain
// Size: 0x40 (Inherited: 0x28)
struct USoundEffectSourcePresetChain : UObject {
	struct TArray<struct FSourceEffectChainEntry> Chain; // 0x28(0x10)
	char bPlayEffectChainTails : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.SoundGroups
// Size: 0x88 (Inherited: 0x28)
struct USoundGroups : UObject {
	struct TArray<struct FSoundGroup> SoundGroupProfiles; // 0x28(0x10)
	char pad_38[0x50]; // 0x38(0x50)
};

// Class Engine.SoundMix
// Size: 0x90 (Inherited: 0x28)
struct USoundMix : UObject {
	char bApplyEQ : 1; // 0x28(0x01)
	char pad_28_1 : 7; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float EQPriority; // 0x2c(0x04)
	struct FAudioEQEffect EQSettings; // 0x30(0x40)
	struct TArray<struct FSoundClassAdjuster> SoundClassEffects; // 0x70(0x10)
	float InitialDelay; // 0x80(0x04)
	float FadeInTime; // 0x84(0x04)
	float Duration; // 0x88(0x04)
	float FadeOutTime; // 0x8c(0x04)
};

// Class Engine.SoundNodeAssetReferencer
// Size: 0x48 (Inherited: 0x48)
struct USoundNodeAssetReferencer : USoundNode {
};

// Class Engine.SoundNodeAttenuation
// Size: 0x410 (Inherited: 0x48)
struct USoundNodeAttenuation : USoundNode {
	struct USoundAttenuation* AttenuationSettings; // 0x48(0x08)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x50(0x3b8)
	char bOverrideAttenuation : 1; // 0x408(0x01)
	char pad_408_1 : 7; // 0x408(0x01)
	char pad_409[0x7]; // 0x409(0x07)
};

// Class Engine.SoundNodeBranch
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeBranch : USoundNode {
	struct FName BoolParameterName; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.SoundNodeConcatenator
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeConcatenator : USoundNode {
	struct TArray<float> InputVolume; // 0x48(0x10)
};

// Class Engine.SoundNodeDelay
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeDelay : USoundNode {
	float DelayMin; // 0x48(0x04)
	float DelayMax; // 0x4c(0x04)
};

// Class Engine.SoundNodeDialoguePlayer
// Size: 0x70 (Inherited: 0x48)
struct USoundNodeDialoguePlayer : USoundNode {
	struct FDialogueWaveParameter DialogueWaveParameter; // 0x48(0x20)
	char bLooping : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.SoundNodeDistanceCrossFade
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeDistanceCrossFade : USoundNode {
	struct TArray<struct FDistanceDatum> CrossFadeInput; // 0x48(0x10)
};

// Class Engine.SoundNodeDoppler
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeDoppler : USoundNode {
	float DopplerIntensity; // 0x48(0x04)
	bool bUseSmoothing; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float SmoothingInterpSpeed; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.SoundNodeEnveloper
// Size: 0x190 (Inherited: 0x48)
struct USoundNodeEnveloper : USoundNode {
	float LoopStart; // 0x48(0x04)
	float LoopEnd; // 0x4c(0x04)
	float DurationAfterLoop; // 0x50(0x04)
	int32_t LoopCount; // 0x54(0x04)
	char bLoopIndefinitely : 1; // 0x58(0x01)
	char bLoop : 1; // 0x58(0x01)
	char pad_58_2 : 6; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct UDistributionFloatConstantCurve* VolumeInterpCurve; // 0x60(0x08)
	struct UDistributionFloatConstantCurve* PitchInterpCurve; // 0x68(0x08)
	struct FRuntimeFloatCurve VolumeCurve; // 0x70(0x88)
	struct FRuntimeFloatCurve PitchCurve; // 0xf8(0x88)
	float PitchMin; // 0x180(0x04)
	float PitchMax; // 0x184(0x04)
	float VolumeMin; // 0x188(0x04)
	float VolumeMax; // 0x18c(0x04)
};

// Class Engine.SoundNodeGroupControl
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeGroupControl : USoundNode {
	struct TArray<int32_t> GroupSizes; // 0x48(0x10)
};

// Class Engine.SoundNodeLooping
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeLooping : USoundNode {
	int32_t LoopCount; // 0x48(0x04)
	char bLoopIndefinitely : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
};

// Class Engine.SoundNodeMature
// Size: 0x48 (Inherited: 0x48)
struct USoundNodeMature : USoundNode {
};

// Class Engine.SoundNodeMixer
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeMixer : USoundNode {
	struct TArray<float> InputVolume; // 0x48(0x10)
};

// Class Engine.SoundNodeModulator
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeModulator : USoundNode {
	float PitchMin; // 0x48(0x04)
	float PitchMax; // 0x4c(0x04)
	float VolumeMin; // 0x50(0x04)
	float VolumeMax; // 0x54(0x04)
};

// Class Engine.SoundNodeModulatorContinuous
// Size: 0x80 (Inherited: 0x48)
struct USoundNodeModulatorContinuous : USoundNode {
	struct FModulatorContinuousParams PitchModulationParams; // 0x48(0x1c)
	struct FModulatorContinuousParams VolumeModulationParams; // 0x64(0x1c)
};

// Class Engine.SoundNodeOscillator
// Size: 0x70 (Inherited: 0x48)
struct USoundNodeOscillator : USoundNode {
	char bModulateVolume : 1; // 0x48(0x01)
	char bModulatePitch : 1; // 0x48(0x01)
	char pad_48_2 : 6; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float AmplitudeMin; // 0x4c(0x04)
	float AmplitudeMax; // 0x50(0x04)
	float FrequencyMin; // 0x54(0x04)
	float FrequencyMax; // 0x58(0x04)
	float OffsetMin; // 0x5c(0x04)
	float OffsetMax; // 0x60(0x04)
	float CenterMin; // 0x64(0x04)
	float CenterMax; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.SoundNodeParamCrossFade
// Size: 0x60 (Inherited: 0x58)
struct USoundNodeParamCrossFade : USoundNodeDistanceCrossFade {
	struct FName ParamName; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.SoundNodeQualityLevel
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeQualityLevel : USoundNode {
	int32_t CookedQualityLevelIndex; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.SoundNodeRandom
// Size: 0x78 (Inherited: 0x48)
struct USoundNodeRandom : USoundNode {
	struct TArray<float> Weights; // 0x48(0x10)
	struct TArray<bool> HasBeenUsed; // 0x58(0x10)
	int32_t NumRandomUsed; // 0x68(0x04)
	int32_t PreselectAtLevelLoad; // 0x6c(0x04)
	char bShouldExcludeFromBranchCulling : 1; // 0x70(0x01)
	char bSoundCueExcludedFromBranchCulling : 1; // 0x70(0x01)
	char bRandomizeWithoutReplacement : 1; // 0x70(0x01)
	char pad_70_3 : 5; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Engine.SoundNodeSoundClass
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeSoundClass : USoundNode {
	struct USoundClass* SoundClassOverride; // 0x48(0x08)
	char pad_50[0x8]; // 0x50(0x08)
};

// Class Engine.SoundNodeSwitch
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeSwitch : USoundNode {
	struct FName IntParameterName; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.SoundNodeWaveParam
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeWaveParam : USoundNode {
	struct FName WaveParameterName; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.SoundNodeWavePlayer
// Size: 0x80 (Inherited: 0x48)
struct USoundNodeWavePlayer : USoundNodeAssetReferencer {
	struct TSoftObjectPtr<USoundWave> SoundWaveAssetPtr; // 0x48(0x28)
	struct USoundWave* SoundWave; // 0x70(0x08)
	char pad_78_0 : 1; // 0x78(0x01)
	char bLooping : 1; // 0x78(0x01)
	char pad_78_2 : 6; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Engine.SoundParameterControllerInterface
// Size: 0x28 (Inherited: 0x28)
struct USoundParameterControllerInterface : UAudioParameterControllerInterface {
};

// Class Engine.AudioParameterConversionStatics
// Size: 0x28 (Inherited: 0x28)
struct UAudioParameterConversionStatics : UBlueprintFunctionLibrary {

	struct FAudioParameter StringToAudioParameter(struct FName Name, struct FString String); // Function Engine.AudioParameterConversionStatics.StringToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x934a728
	struct FAudioParameter StringArrayToAudioParameter(struct FName Name, struct TArray<struct FString> Strings); // Function Engine.AudioParameterConversionStatics.StringArrayToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x934a614
	struct FAudioParameter ObjectToAudioParameter(struct FName Name, struct UObject* Object); // Function Engine.AudioParameterConversionStatics.ObjectToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9349a68
	struct FAudioParameter ObjectArrayToAudioParameter(struct FName Name, struct TArray<struct UObject*> Objects); // Function Engine.AudioParameterConversionStatics.ObjectArrayToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x934994c
	struct FAudioParameter IntegerToAudioParameter(struct FName Name, int32_t Integer); // Function Engine.AudioParameterConversionStatics.IntegerToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x934982c
	struct FAudioParameter IntegerArrayToAudioParameter(struct FName Name, struct TArray<int32_t> Integers); // Function Engine.AudioParameterConversionStatics.IntegerArrayToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9349718
	struct FAudioParameter FloatToAudioParameter(struct FName Name, float float); // Function Engine.AudioParameterConversionStatics.FloatToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x934961c
	struct FAudioParameter FloatArrayToAudioParameter(struct FName Name, struct TArray<float> Floats); // Function Engine.AudioParameterConversionStatics.FloatArrayToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x934950c
	struct FAudioParameter BooleanToAudioParameter(struct FName Name, bool bool); // Function Engine.AudioParameterConversionStatics.BooleanToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93493e8
	struct FAudioParameter BooleanArrayToAudioParameter(struct FName Name, struct TArray<bool> Bools); // Function Engine.AudioParameterConversionStatics.BooleanArrayToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93492d0
};

// Class Engine.SoundSourceBus
// Size: 0x328 (Inherited: 0x310)
struct USoundSourceBus : USoundWave {
	enum class ESourceBusChannels SourceBusChannels; // 0x310(0x01)
	char pad_311[0x3]; // 0x311(0x03)
	float SourceBusDuration; // 0x314(0x04)
	struct UAudioBus* AudioBus; // 0x318(0x08)
	char bAutoDeactivateWhenSilent : 1; // 0x320(0x01)
	char pad_320_1 : 7; // 0x320(0x01)
	char pad_321[0x7]; // 0x321(0x07)
};

// Class Engine.SoundSubmixBase
// Size: 0x40 (Inherited: 0x28)
struct USoundSubmixBase : UObject {
	bool bAutoDisable; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float AutoDisableTime; // 0x2c(0x04)
	struct TArray<struct USoundSubmixBase*> ChildSubmixes; // 0x30(0x10)
};

// Class Engine.SoundSubmixWithParentBase
// Size: 0x48 (Inherited: 0x40)
struct USoundSubmixWithParentBase : USoundSubmixBase {
	struct USoundSubmixBase* ParentSubmix; // 0x40(0x08)
};

// Class Engine.SoundSubmix
// Size: 0xd0 (Inherited: 0x48)
struct USoundSubmix : USoundSubmixWithParentBase {
	char bMuteWhenBackgrounded : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct TArray<struct USoundEffectSubmixPreset*> SubmixEffectChain; // 0x50(0x10)
	struct USoundfieldEncodingSettingsBase* AmbisonicsPluginSettings; // 0x60(0x08)
	int32_t EnvelopeFollowerAttackTime; // 0x68(0x04)
	int32_t EnvelopeFollowerReleaseTime; // 0x6c(0x04)
	float OutputVolume; // 0x70(0x04)
	float WetLevel; // 0x74(0x04)
	float DryLevel; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FSoundModulationDestinationSettings OutputVolumeModulation; // 0x80(0x10)
	struct FSoundModulationDestinationSettings WetLevelModulation; // 0x90(0x10)
	struct FSoundModulationDestinationSettings DryLevelModulation; // 0xa0(0x10)
	struct UAudioLinkSettingsAbstract* AudioLinkSettings; // 0xb0(0x08)
	struct FMulticastInlineDelegate OnSubmixRecordedFileDone; // 0xb8(0x10)
	char pad_C8[0x8]; // 0xc8(0x08)

	void StopSpectralAnalysis(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StopSpectralAnalysis // (Final|Native|Public|BlueprintCallable) // @ game+0x934a594
	void StopRecordingOutput(struct UObject* WorldContextObject, enum class EAudioRecordingExportType ExportType, struct FString Name, struct FString Path, struct USoundWave* ExistingSoundWaveToOverwrite); // Function Engine.SoundSubmix.StopRecordingOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x934a268
	void StopEnvelopeFollowing(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StopEnvelopeFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x934a1e8
	void StartSpectralAnalysis(struct UObject* WorldContextObject, enum class EFFTSize FFTSize, enum class EFFTPeakInterpolationMethod InterpolationMethod, enum class EFFTWindowType WindowType, float HopSize, enum class EAudioSpectrumType SpectrumType); // Function Engine.SoundSubmix.StartSpectralAnalysis // (Final|Native|Public|BlueprintCallable) // @ game+0x934a01c
	void StartRecordingOutput(struct UObject* WorldContextObject, float ExpectedDuration); // Function Engine.SoundSubmix.StartRecordingOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x9349f54
	void StartEnvelopeFollowing(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StartEnvelopeFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x9349ed4
	void SetSubmixWetLevel(struct UObject* WorldContextObject, float InWetLevel); // Function Engine.SoundSubmix.SetSubmixWetLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x9349e0c
	void SetSubmixOutputVolume(struct UObject* WorldContextObject, float InOutputVolume); // Function Engine.SoundSubmix.SetSubmixOutputVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x9349d44
	void SetSubmixDryLevel(struct UObject* WorldContextObject, float InDryLevel); // Function Engine.SoundSubmix.SetSubmixDryLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x9349c7c
	void RemoveSpectralAnalysisDelegate(struct UObject* WorldContextObject, struct FDelegate& OnSubmixSpectralAnalysisBP); // Function Engine.SoundSubmix.RemoveSpectralAnalysisDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9349b90
	void AddSpectralAnalysisDelegate(struct UObject* WorldContextObject, struct TArray<struct FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, struct FDelegate& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime); // Function Engine.SoundSubmix.AddSpectralAnalysisDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9348fc8
	void AddEnvelopeFollowerDelegate(struct UObject* WorldContextObject, struct FDelegate& OnSubmixEnvelopeBP); // Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9348edc
};

// Class Engine.SoundfieldSubmix
// Size: 0x70 (Inherited: 0x48)
struct USoundfieldSubmix : USoundSubmixWithParentBase {
	struct FName SoundfieldEncodingFormat; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct USoundfieldEncodingSettingsBase* EncodingSettings; // 0x50(0x08)
	struct TArray<struct USoundfieldEffectBase*> SoundfieldEffectChain; // 0x58(0x10)
	struct USoundfieldEncodingSettingsBase* EncodingSettingsClass; // 0x68(0x08)
};

// Class Engine.EndpointSubmix
// Size: 0x58 (Inherited: 0x40)
struct UEndpointSubmix : USoundSubmixBase {
	struct FName EndpointType; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct UAudioEndpointSettingsBase* EndpointSettingsClass; // 0x48(0x08)
	struct UAudioEndpointSettingsBase* EndpointSettings; // 0x50(0x08)
};

// Class Engine.SoundfieldEndpointSubmix
// Size: 0x78 (Inherited: 0x40)
struct USoundfieldEndpointSubmix : USoundSubmixBase {
	struct FName SoundfieldEndpointType; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct UAudioEndpointSettingsBase* EndpointSettingsClass; // 0x48(0x08)
	struct USoundfieldEndpointSettingsBase* EndpointSettings; // 0x50(0x08)
	struct USoundfieldEncodingSettingsBase* EncodingSettingsClass; // 0x58(0x08)
	struct USoundfieldEncodingSettingsBase* EncodingSettings; // 0x60(0x08)
	struct TArray<struct USoundfieldEffectBase*> SoundfieldEffectChain; // 0x68(0x10)
};

// Class Engine.SoundSubmixWidgetInterface
// Size: 0x28 (Inherited: 0x28)
struct USoundSubmixWidgetInterface : UInterface {

	void OnConstructed(struct USoundSubmixBase* SoundSubmix); // Function Engine.SoundSubmixWidgetInterface.OnConstructed // (Event|Public|BlueprintEvent) // @ game+0xd67374
};

// Class Engine.SphereReflectionCapture
// Size: 0x298 (Inherited: 0x290)
struct ASphereReflectionCapture : AReflectionCapture {
	struct UDrawSphereComponent* DrawCaptureRadius; // 0x290(0x08)
};

// Class Engine.SphereReflectionCaptureComponent
// Size: 0x330 (Inherited: 0x320)
struct USphereReflectionCaptureComponent : UReflectionCaptureComponent {
	float InfluenceRadius; // 0x318(0x04)
	float CaptureDistanceScale; // 0x31c(0x04)
	struct UDrawSphereComponent* PreviewInfluenceRadius; // 0x320(0x08)
};

// Class Engine.SplineMeshActor
// Size: 0x290 (Inherited: 0x288)
struct ASplineMeshActor : AActor {
	struct USplineMeshComponent* SplineMeshComponent; // 0x288(0x08)
};

// Class Engine.SplineMeshComponent
// Size: 0x6f0 (Inherited: 0x5f0)
struct USplineMeshComponent : UStaticMeshComponent {
	char pad_5F0[0x8]; // 0x5f0(0x08)
	struct FSplineMeshParams SplineParams; // 0x5f8(0xb0)
	struct FVector SplineUpDir; // 0x6a8(0x18)
	float SplineBoundaryMin; // 0x6c0(0x04)
	struct FGuid CachedMeshBodySetupGuid; // 0x6c4(0x10)
	char pad_6D4[0x4]; // 0x6d4(0x04)
	struct UBodySetup* BodySetup; // 0x6d8(0x08)
	float SplineBoundaryMax; // 0x6e0(0x04)
	char bAllowSplineEditingPerInstance : 1; // 0x6e4(0x01)
	char bSmoothInterpRollScale : 1; // 0x6e4(0x01)
	char bMeshDirty : 1; // 0x6e4(0x01)
	char pad_6E4_3 : 5; // 0x6e4(0x01)
	enum class ESplineMeshAxis ForwardAxis; // 0x6e5(0x01)
	char pad_6E6[0x2]; // 0x6e6(0x02)
	float VirtualTextureMainPassMaxDrawDistance; // 0x6e8(0x04)
	char pad_6EC[0x4]; // 0x6ec(0x04)

	void UpdateMesh(); // Function Engine.SplineMeshComponent.UpdateMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x93537bc
	void SetStartTangent(struct FVector StartTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartTangent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9353644
	void SetStartScale(struct FVector2D StartScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9353578
	void SetStartRoll(float StartRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartRoll // (Final|Native|Public|BlueprintCallable) // @ game+0x93534a0
	void SetStartPosition(struct FVector StartPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93533c8
	void SetStartOffset(struct FVector2D StartOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93532f8
	void SetStartAndEnd(struct FVector StartPos, struct FVector StartTangent, struct FVector EndPos, struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartAndEnd // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1c2af54
	void SetSplineUpDir(struct FVector& InSplineUpDir, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetSplineUpDir // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9353220
	void SetForwardAxis(enum class ESplineMeshAxis InForwardAxis, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetForwardAxis // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2b158
	void SetEndTangent(struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndTangent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9352e88
	void SetEndScale(struct FVector2D EndScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9352dbc
	void SetEndRoll(float EndRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndRoll // (Final|Native|Public|BlueprintCallable) // @ game+0x9352ce4
	void SetEndPosition(struct FVector EndPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9352c0c
	void SetEndOffset(struct FVector2D EndOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9352b3c
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMin // (Final|Native|Public|BlueprintCallable) // @ game+0x9352a64
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMax // (Final|Native|Public|BlueprintCallable) // @ game+0x935298c
	struct FVector GetStartTangent(); // Function Engine.SplineMeshComponent.GetStartTangent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9352848
	struct FVector2D GetStartScale(); // Function Engine.SplineMeshComponent.GetStartScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x935282c
	float GetStartRoll(); // Function Engine.SplineMeshComponent.GetStartRoll // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9352814
	struct FVector GetStartPosition(); // Function Engine.SplineMeshComponent.GetStartPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93527ec
	struct FVector2D GetStartOffset(); // Function Engine.SplineMeshComponent.GetStartOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93527d0
	struct FVector GetSplineUpDir(); // Function Engine.SplineMeshComponent.GetSplineUpDir // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93527a8
	enum class ESplineMeshAxis GetForwardAxis(); // Function Engine.SplineMeshComponent.GetForwardAxis // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93522bc
	struct FVector GetEndTangent(); // Function Engine.SplineMeshComponent.GetEndTangent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9352294
	struct FVector2D GetEndScale(); // Function Engine.SplineMeshComponent.GetEndScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9352278
	float GetEndRoll(); // Function Engine.SplineMeshComponent.GetEndRoll // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9352260
	struct FVector GetEndPosition(); // Function Engine.SplineMeshComponent.GetEndPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9352238
	struct FVector2D GetEndOffset(); // Function Engine.SplineMeshComponent.GetEndOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x935221c
	float GetBoundaryMin(); // Function Engine.SplineMeshComponent.GetBoundaryMin // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x75eca30
	float GetBoundaryMax(); // Function Engine.SplineMeshComponent.GetBoundaryMax // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93520d4
};

// Class Engine.SpringArmComponent
// Size: 0x3a0 (Inherited: 0x2a0)
struct USpringArmComponent : USceneComponent {
	float TargetArmLength; // 0x2a0(0x04)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct FVector SocketOffset; // 0x2a8(0x18)
	struct FVector TargetOffset; // 0x2c0(0x18)
	float ProbeSize; // 0x2d8(0x04)
	enum class ECollisionChannel ProbeChannel; // 0x2dc(0x01)
	char pad_2DD[0x3]; // 0x2dd(0x03)
	char bDoCollisionTest : 1; // 0x2e0(0x01)
	char bUsePawnControlRotation : 1; // 0x2e0(0x01)
	char bInheritPitch : 1; // 0x2e0(0x01)
	char bInheritYaw : 1; // 0x2e0(0x01)
	char bInheritRoll : 1; // 0x2e0(0x01)
	char bEnableCameraLag : 1; // 0x2e0(0x01)
	char bEnableCameraRotationLag : 1; // 0x2e0(0x01)
	char bUseCameraLagSubstepping : 1; // 0x2e0(0x01)
	char bDrawDebugLagMarkers : 1; // 0x2e1(0x01)
	char pad_2E1_1 : 7; // 0x2e1(0x01)
	char pad_2E2[0x2]; // 0x2e2(0x02)
	float CameraLagSpeed; // 0x2e4(0x04)
	float CameraRotationLagSpeed; // 0x2e8(0x04)
	float CameraLagMaxTimeStep; // 0x2ec(0x04)
	float CameraLagMaxDistance; // 0x2f0(0x04)
	char bClampToMaxPhysicsDeltaTime : 1; // 0x2f4(0x01)
	char pad_2F4_1 : 7; // 0x2f4(0x01)
	char pad_2F5[0xab]; // 0x2f5(0xab)

	bool IsCollisionFixApplied(); // Function Engine.SpringArmComponent.IsCollisionFixApplied // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93528ec
	struct FVector GetUnfixedCameraPosition(); // Function Engine.SpringArmComponent.GetUnfixedCameraPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93528c4
	struct FRotator GetTargetRotation(); // Function Engine.SpringArmComponent.GetTargetRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x935288c
};

// Class Engine.StaticMesh
// Size: 0x258 (Inherited: 0xd0)
struct UStaticMesh : UStreamableRenderAsset {
	char pad_D0[0x20]; // 0xd0(0x20)
	struct FPerQualityLevelInt MinQualityLevelLOD; // 0xf0(0x68)
	struct FPerPlatformInt MinLOD; // 0x158(0x04)
	char pad_15C[0x4]; // 0x15c(0x04)
	struct TArray<struct FStaticMaterial> StaticMaterials; // 0x160(0x10)
	float LightmapUVDensity; // 0x170(0x04)
	int32_t LightMapResolution; // 0x174(0x04)
	int32_t LightMapCoordinateIndex; // 0x178(0x04)
	float DistanceFieldSelfShadowBias; // 0x17c(0x04)
	struct UBodySetup* BodySetup; // 0x180(0x08)
	int32_t LODForCollision; // 0x188(0x04)
	char bGenerateMeshDistanceField : 1; // 0x18c(0x01)
	char bStripComplexCollisionForConsole : 1; // 0x18c(0x01)
	char bHasNavigationData : 1; // 0x18c(0x01)
	char bSupportUniformlyDistributedSampling : 1; // 0x18c(0x01)
	char bSupportPhysicalMaterialMasks : 1; // 0x18c(0x01)
	char bSupportRayTracing : 1; // 0x18c(0x01)
	char bDoFastBuild : 1; // 0x18c(0x01)
	char bIsBuiltAtRuntime : 1; // 0x18c(0x01)
	char pad_18D_0 : 1; // 0x18d(0x01)
	char bAllowCPUAccess : 1; // 0x18d(0x01)
	char bSupportGpuUniformlyDistributedSampling : 1; // 0x18d(0x01)
	char pad_18D_3 : 5; // 0x18d(0x01)
	char pad_18E[0x22]; // 0x18e(0x22)
	struct TArray<struct UStaticMeshSocket*> Sockets; // 0x1b0(0x10)
	char pad_1C0[0x10]; // 0x1c0(0x10)
	struct FVector PositiveBoundsExtension; // 0x1d0(0x18)
	struct FVector NegativeBoundsExtension; // 0x1e8(0x18)
	struct FBoxSphereBounds ExtendedBounds; // 0x200(0x38)
	int32_t ElementToIgnoreForTexFactor; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x240(0x10)
	struct UNavCollisionBase* NavCollision; // 0x250(0x08)

	void SetStaticMaterials(struct TArray<struct FStaticMaterial>& InStaticMaterials); // Function Engine.StaticMesh.SetStaticMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x935371c
	void SetMinLODForQualityLevels(struct TMap<enum class EPerQualityLevels, int32_t>& QualityLevelMinimumLODs, int32_t Default); // Function Engine.StaticMesh.SetMinLODForQualityLevels // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x933f5d8
	void SetMinimumLODForPlatforms(struct TMap<struct FName, int32_t>& PlatformMinimumLODs); // Function Engine.StaticMesh.SetMinimumLODForPlatforms // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x93523d8
	void SetMinimumLODForPlatform(struct FName& PlatformName, int32_t InMinLOD); // Function Engine.StaticMesh.SetMinimumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x935306c
	void RemoveSocket(struct UStaticMeshSocket* Socket); // Function Engine.StaticMesh.RemoveSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9352904
	struct UStaticMeshDescription* GetStaticMeshDescription(int32_t LODIndex); // Function Engine.StaticMesh.GetStaticMeshDescription // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x675127c
	struct TArray<struct FStaticMaterial> GetStaticMaterials(); // Function Engine.StaticMesh.GetStaticMaterials // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9352870
	struct TArray<struct UStaticMeshSocket*> GetSocketsByTag(struct FString InSocketTag); // Function Engine.StaticMesh.GetSocketsByTag // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9352608
	int32_t GetNumTriangles(int32_t LODIndex); // Function Engine.StaticMesh.GetNumTriangles // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x935255c
	int32_t GetNumSections(int32_t InLOD); // Function Engine.StaticMesh.GetNumSections // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93524d0
	int32_t GetNumLODs(); // Function Engine.StaticMesh.GetNumLODs // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93524a8
	void GetMinLODForQualityLevels(struct TMap<enum class EPerQualityLevels, int32_t>& QualityLevelMinimumLODs, int32_t& Default); // Function Engine.StaticMesh.GetMinLODForQualityLevels // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x933ef10
	void GetMinimumLODForQualityLevels(struct TMap<struct FName, int32_t>& QualityLevelMinimumLODs); // Function Engine.StaticMesh.GetMinimumLODForQualityLevels // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x93523d8
	int32_t GetMinimumLODForQualityLevel(struct FName& QualityLevel); // Function Engine.StaticMesh.GetMinimumLODForQualityLevel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9352360
	void GetMinimumLODForPlatforms(struct TMap<struct FName, int32_t>& PlatformMinimumLODs); // Function Engine.StaticMesh.GetMinimumLODForPlatforms // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x93523d8
	int32_t GetMinimumLODForPlatform(struct FName& PlatformName); // Function Engine.StaticMesh.GetMinimumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x9352360
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.StaticMesh.GetMaterialIndex // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x93522d4
	struct UMaterialInterface* GetMaterial(int32_t MaterialIndex); // Function Engine.StaticMesh.GetMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x259ec60
	struct FBoxSphereBounds GetBounds(); // Function Engine.StaticMesh.GetBounds // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93521dc
	struct FBox GetBoundingBox(); // Function Engine.StaticMesh.GetBoundingBox // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93520ec
	struct UStaticMeshSocket* FindSocket(struct FName InSocketName); // Function Engine.StaticMesh.FindSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9352048
	struct UStaticMeshDescription* CreateStaticMeshDescription(struct UObject* Outer); // Function Engine.StaticMesh.CreateStaticMeshDescription // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9351fb4
	void BuildFromStaticMeshDescriptions(struct TArray<struct UStaticMeshDescription*>& StaticMeshDescriptions, bool bBuildSimpleCollision, bool bFastBuild); // Function Engine.StaticMesh.BuildFromStaticMeshDescriptions // (Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9351dc4
	void AddSocket(struct UStaticMeshSocket* Socket); // Function Engine.StaticMesh.AddSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9351cf8
	struct FName AddMaterial(struct UMaterialInterface* Material); // Function Engine.StaticMesh.AddMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9351b1c
};

// Class Engine.StaticMeshSocket
// Size: 0x88 (Inherited: 0x28)
struct UStaticMeshSocket : UObject {
	struct FName SocketName; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct FVector RelativeLocation; // 0x30(0x18)
	struct FRotator RelativeRotation; // 0x48(0x18)
	struct FVector RelativeScale; // 0x60(0x18)
	struct FString tag; // 0x78(0x10)
};

// Class Engine.StaticMeshDescriptionBulkData
// Size: 0x28 (Inherited: 0x28)
struct UStaticMeshDescriptionBulkData : UMeshDescriptionBaseBulkData {
};

// Class Engine.StereoLayerShape
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerShape : UObject {
};

// Class Engine.StereoLayerShapeQuad
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerShapeQuad : UStereoLayerShape {
};

// Class Engine.StereoLayerShapeCylinder
// Size: 0x38 (Inherited: 0x28)
struct UStereoLayerShapeCylinder : UStereoLayerShape {
	float Radius; // 0x28(0x04)
	float OverlayArc; // 0x2c(0x04)
	int32_t Height; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	void SetRadius(float InRadius); // Function Engine.StereoLayerShapeCylinder.SetRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x9354790
	void SetOverlayArc(float InOverlayArc); // Function Engine.StereoLayerShapeCylinder.SetOverlayArc // (Final|Native|Public|BlueprintCallable) // @ game+0x93545dc
	void SetHeight(int32_t InHeight); // Function Engine.StereoLayerShapeCylinder.SetHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x9354430
};

// Class Engine.StereoLayerShapeCubemap
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerShapeCubemap : UStereoLayerShape {
};

// Class Engine.StereoLayerShapeEquirect
// Size: 0xb8 (Inherited: 0x28)
struct UStereoLayerShapeEquirect : UStereoLayerShape {
	struct FBox2D LeftUVRect; // 0x28(0x28)
	struct FBox2D RightUVRect; // 0x50(0x28)
	struct FVector2D LeftScale; // 0x78(0x10)
	struct FVector2D RightScale; // 0x88(0x10)
	struct FVector2D LeftBias; // 0x98(0x10)
	struct FVector2D RightBias; // 0xa8(0x10)

	void SetEquirectProps(struct FEquirectProps InScaleBiases); // Function Engine.StereoLayerShapeEquirect.SetEquirectProps // (Final|Native|Public|BlueprintCallable) // @ game+0x93541c8
};

// Class Engine.StereoLayerComponent
// Size: 0x430 (Inherited: 0x2a0)
struct UStereoLayerComponent : USceneComponent {
	char bLiveTexture : 1; // 0x2a0(0x01)
	char bSupportsDepth : 1; // 0x2a0(0x01)
	char bNoAlphaChannel : 1; // 0x2a0(0x01)
	char pad_2A0_3 : 5; // 0x2a0(0x01)
	char pad_2A1[0x7]; // 0x2a1(0x07)
	struct UTexture* Texture; // 0x2a8(0x08)
	struct UTexture* LeftTexture; // 0x2b0(0x08)
	char bQuadPreserveTextureRatio : 1; // 0x2b8(0x01)
	char pad_2B8_1 : 7; // 0x2b8(0x01)
	char pad_2B9[0x7]; // 0x2b9(0x07)
	struct FVector2D QuadSize; // 0x2c0(0x10)
	struct FBox2D UVRect; // 0x2d0(0x28)
	float CylinderRadius; // 0x2f8(0x04)
	float CylinderOverlayArc; // 0x2fc(0x04)
	int32_t CylinderHeight; // 0x300(0x04)
	char pad_304[0x4]; // 0x304(0x04)
	struct FEquirectProps EquirectProps; // 0x308(0x90)
	enum class EStereoLayerType StereoLayerType; // 0x398(0x01)
	enum class EStereoLayerShape StereoLayerShape; // 0x399(0x01)
	char pad_39A[0x6]; // 0x39a(0x06)
	struct UStereoLayerShape* Shape; // 0x3a0(0x08)
	int32_t Priority; // 0x3a8(0x04)
	char pad_3AC[0x84]; // 0x3ac(0x84)

	void SetUVRect(struct FBox2D InUVRect); // Function Engine.StereoLayerComponent.SetUVRect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9354ad8
	void SetTexture(struct UTexture* InTexture); // Function Engine.StereoLayerComponent.SetTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x9354a48
	void SetQuadSize(struct FVector2D InQuadSize); // Function Engine.StereoLayerComponent.SetQuadSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x93546ec
	void SetPriority(int32_t InPriority); // Function Engine.StereoLayerComponent.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x9354660
	void SetLeftTexture(struct UTexture* InTexture); // Function Engine.StereoLayerComponent.SetLeftTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x93544cc
	void SetEquirectProps(struct FEquirectProps InScaleBiases); // Function Engine.StereoLayerComponent.SetEquirectProps // (Final|Native|Public|BlueprintCallable) // @ game+0x93540e0
	void MarkTextureForUpdate(); // Function Engine.StereoLayerComponent.MarkTextureForUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x9354044
	struct FBox2D GetUVRect(); // Function Engine.StereoLayerComponent.GetUVRect // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9354010
	struct UTexture* GetTexture(); // Function Engine.StereoLayerComponent.GetTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9353ff8
	struct FVector2D GetQuadSize(); // Function Engine.StereoLayerComponent.GetQuadSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9353fdc
	int32_t GetPriority(); // Function Engine.StereoLayerComponent.GetPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29eef8c
	struct UTexture* GetLeftTexture(); // Function Engine.StereoLayerComponent.GetLeftTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9353ee4
};

// Class Engine.StereoLayerFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerFunctionLibrary : UBlueprintFunctionLibrary {

	void ShowSplashScreen(); // Function Engine.StereoLayerFunctionLibrary.ShowSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x8e0a820
	void SetSplashScreen(struct UTexture* Texture, struct FVector2D Scale, struct FVector Offset, bool bShowLoadingMovie, bool bShowOnSet); // Function Engine.StereoLayerFunctionLibrary.SetSplashScreen // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x93548b0
	void HideSplashScreen(); // Function Engine.StereoLayerFunctionLibrary.HideSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x8e0a2c4
	void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled); // Function Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9353e58
};

// Class Engine.StringTable
// Size: 0x40 (Inherited: 0x28)
struct UStringTable : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class Engine.SubsurfaceProfile
// Size: 0xc8 (Inherited: 0x28)
struct USubsurfaceProfile : UObject {
	struct FSubsurfaceProfileStruct Settings; // 0x28(0x9c)
	char pad_C4[0x4]; // 0xc4(0x04)
};

// Class Engine.SubsystemBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct USubsystemBlueprintLibrary : UBlueprintFunctionLibrary {

	struct UWorldSubsystem* GetWorldSubsystem(struct UObject* ContextObject, struct UWorldSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetWorldSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e23dac
	struct ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(struct APlayerController* PlayerController, struct ULocalPlayerSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubSystemFromPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x25776e0
	struct ULocalPlayerSubsystem* GetLocalPlayerSubsystem(struct UObject* ContextObject, struct ULocalPlayerSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20333e8
	struct UGameInstanceSubsystem* GetGameInstanceSubsystem(struct UObject* ContextObject, struct UGameInstanceSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e23c90
	struct UEngineSubsystem* GetEngineSubsystem(struct UEngineSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetEngineSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2389f18
	struct UAudioEngineSubsystem* GetAudioEngineSubsystem(struct UObject* ContextObject, struct UAudioEngineSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetAudioEngineSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93552e0
};

// Class Engine.SubUVAnimation
// Size: 0x68 (Inherited: 0x28)
struct USubUVAnimation : UObject {
	struct UTexture2D* SubUVTexture; // 0x28(0x08)
	int32_t SubImages_Horizontal; // 0x30(0x04)
	int32_t SubImages_Vertical; // 0x34(0x04)
	enum class ESubUVBoundingVertexCount BoundingMode; // 0x38(0x01)
	enum class EOpacitySourceMode OpacitySourceMode; // 0x39(0x01)
	char pad_3A[0x2]; // 0x3a(0x02)
	float AlphaThreshold; // 0x3c(0x04)
	char pad_40[0x28]; // 0x40(0x28)
};

// Class Engine.SystemTimeTimecodeProvider
// Size: 0x40 (Inherited: 0x30)
struct USystemTimeTimecodeProvider : UTimecodeProvider {
	struct FFrameRate FrameRate; // 0x30(0x08)
	bool bGenerateFullFrame; // 0x38(0x01)
	bool bUseHighPerformanceClock; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
};

// Class Engine.TargetPoint
// Size: 0x288 (Inherited: 0x288)
struct ATargetPoint : AActor {
};

// Class Engine.TextPropertyTestObject
// Size: 0x70 (Inherited: 0x28)
struct UTextPropertyTestObject : UObject {
	struct FText DefaultedText; // 0x28(0x18)
	struct FText UndefaultedText; // 0x40(0x18)
	struct FText TransientText; // 0x58(0x18)
};

// Class Engine.TextRenderActor
// Size: 0x290 (Inherited: 0x288)
struct ATextRenderActor : AActor {
	struct UTextRenderComponent* TextRender; // 0x288(0x08)
};

// Class Engine.TextRenderComponent
// Size: 0x580 (Inherited: 0x530)
struct UTextRenderComponent : UPrimitiveComponent {
	struct FText Text; // 0x530(0x18)
	struct UMaterialInterface* TextMaterial; // 0x548(0x08)
	struct UFont* Font; // 0x550(0x08)
	enum class EHorizTextAligment HorizontalAlignment; // 0x558(0x01)
	enum class EVerticalTextAligment VerticalAlignment; // 0x559(0x01)
	char pad_55A[0x2]; // 0x55a(0x02)
	struct FColor TextRenderColor; // 0x55c(0x04)
	float XScale; // 0x560(0x04)
	float YScale; // 0x564(0x04)
	float WorldSize; // 0x568(0x04)
	float InvDefaultSize; // 0x56c(0x04)
	float HorizSpacingAdjust; // 0x570(0x04)
	float VertSpacingAdjust; // 0x574(0x04)
	char bAlwaysRenderAsText : 1; // 0x578(0x01)
	char pad_578_1 : 7; // 0x578(0x01)
	char pad_579[0x7]; // 0x579(0x07)

	void SetYScale(float Value); // Function Engine.TextRenderComponent.SetYScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9355aa4
	void SetXScale(float Value); // Function Engine.TextRenderComponent.SetXScale // (Final|Native|Public|BlueprintCallable) // @ game+0x9355a18
	void SetWorldSize(float Value); // Function Engine.TextRenderComponent.SetWorldSize // (Final|Native|Public|BlueprintCallable) // @ game+0x9297190
	void SetVertSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetVertSpacingAdjust // (Final|Native|Public|BlueprintCallable) // @ game+0x9355908
	void SetVerticalAlignment(enum class EVerticalTextAligment Value); // Function Engine.TextRenderComponent.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x9355994
	void SetTextRenderColor(struct FColor Value); // Function Engine.TextRenderComponent.SetTextRenderColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x9355888
	void SetTextMaterial(struct UMaterialInterface* Material); // Function Engine.TextRenderComponent.SetTextMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x9355800
	void SetHorizSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetHorizSpacingAdjust // (Final|Native|Public|BlueprintCallable) // @ game+0x93556f0
	void SetHorizontalAlignment(enum class EHorizTextAligment Value); // Function Engine.TextRenderComponent.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x935577c
	void SetFont(struct UFont* Value); // Function Engine.TextRenderComponent.SetFont // (Final|Native|Public|BlueprintCallable) // @ game+0x9355580
	void K2_SetText(struct FText& Value); // Function Engine.TextRenderComponent.K2_SetText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x93554bc
	struct FVector GetTextWorldSize(); // Function Engine.TextRenderComponent.GetTextWorldSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x9355430
	struct FVector GetTextLocalSize(); // Function Engine.TextRenderComponent.GetTextLocalSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x93553a4
};

// Class Engine.Texture2DArray
// Size: 0x1b8 (Inherited: 0x158)
struct UTexture2DArray : UTexture {
	char pad_158[0x58]; // 0x158(0x58)
	enum class TextureAddress AddressX; // 0x1b0(0x01)
	enum class TextureAddress AddressY; // 0x1b1(0x01)
	enum class TextureAddress AddressZ; // 0x1b2(0x01)
	char pad_1B3[0x5]; // 0x1b3(0x05)
};

// Class Engine.Texture2DDynamic
// Size: 0x170 (Inherited: 0x158)
struct UTexture2DDynamic : UTexture {
	char pad_158[0x8]; // 0x158(0x08)
	enum class EPixelFormat Format; // 0x160(0x01)
	char pad_161[0xf]; // 0x161(0x0f)
};

// Class Engine.TextureCubeArray
// Size: 0x1b0 (Inherited: 0x158)
struct UTextureCubeArray : UTexture {
	char pad_158[0x58]; // 0x158(0x58)
};

// Class Engine.TextureEncodingProjectSettings
// Size: 0x48 (Inherited: 0x30)
struct UTextureEncodingProjectSettings : UDeveloperSettings {
	char bFinalUsesRDO : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int8_t FinalRDOLambda; // 0x34(0x01)
	enum class ETextureEncodeEffort FinalEffortLevel; // 0x35(0x01)
	enum class ETextureUniversalTiling FinalUniversalTiling; // 0x36(0x01)
	char pad_37[0x1]; // 0x37(0x01)
	char bFastUsesRDO : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int8_t FastRDOLambda; // 0x3c(0x01)
	enum class ETextureEncodeEffort FastEffortLevel; // 0x3d(0x01)
	enum class ETextureUniversalTiling FastUniversalTiling; // 0x3e(0x01)
	enum class ETextureEncodeSpeed CookUsesSpeed; // 0x3f(0x01)
	enum class ETextureEncodeSpeed EditorUsesSpeed; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.TextureEncodingUserSettings
// Size: 0x38 (Inherited: 0x30)
struct UTextureEncodingUserSettings : UDeveloperSettings {
	enum class ETextureEncodeSpeedOverride ForceEncodeSpeed; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.TextureLightProfile
// Size: 0x180 (Inherited: 0x178)
struct UTextureLightProfile : UTexture2D {
	float Brightness; // 0x178(0x04)
	float TextureMultiplier; // 0x17c(0x04)
};

// Class Engine.TextureRenderTarget2DArray
// Size: 0x180 (Inherited: 0x160)
struct UTextureRenderTarget2DArray : UTextureRenderTarget {
	int32_t SizeX; // 0x160(0x04)
	int32_t SizeY; // 0x164(0x04)
	int32_t Slices; // 0x168(0x04)
	struct FLinearColor ClearColor; // 0x16c(0x10)
	enum class EPixelFormat OverrideFormat; // 0x17c(0x01)
	char bHDR : 1; // 0x17d(0x01)
	char bForceLinearGamma : 1; // 0x17d(0x01)
	char pad_17D_2 : 6; // 0x17d(0x01)
	char pad_17E[0x2]; // 0x17e(0x02)
};

// Class Engine.TextureRenderTargetCube
// Size: 0x178 (Inherited: 0x160)
struct UTextureRenderTargetCube : UTextureRenderTarget {
	int32_t SizeX; // 0x160(0x04)
	struct FLinearColor ClearColor; // 0x164(0x10)
	enum class EPixelFormat OverrideFormat; // 0x174(0x01)
	char bHDR : 1; // 0x175(0x01)
	char bForceLinearGamma : 1; // 0x175(0x01)
	char pad_175_2 : 6; // 0x175(0x01)
	char pad_176[0x2]; // 0x176(0x02)
};

// Class Engine.TextureRenderTargetVolume
// Size: 0x180 (Inherited: 0x160)
struct UTextureRenderTargetVolume : UTextureRenderTarget {
	int32_t SizeX; // 0x160(0x04)
	int32_t SizeY; // 0x164(0x04)
	int32_t SizeZ; // 0x168(0x04)
	struct FLinearColor ClearColor; // 0x16c(0x10)
	enum class EPixelFormat OverrideFormat; // 0x17c(0x01)
	char bHDR : 1; // 0x17d(0x01)
	char bForceLinearGamma : 1; // 0x17d(0x01)
	char pad_17D_2 : 6; // 0x17d(0x01)
	char pad_17E[0x2]; // 0x17e(0x02)
};

// Class Engine.ThumbnailInfo
// Size: 0x28 (Inherited: 0x28)
struct UThumbnailInfo : UObject {
};

// Class Engine.TimelineComponent
// Size: 0x138 (Inherited: 0xa0)
struct UTimelineComponent : UActorComponent {
	struct FTimeline TheTimeline; // 0xa0(0x90)
	char bIgnoreTimeDilation : 1; // 0x130(0x01)
	char pad_130_1 : 7; // 0x130(0x01)
	char pad_131[0x7]; // 0x131(0x07)

	void Stop(); // Function Engine.TimelineComponent.Stop // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x26c8070
	void SetVectorCurve(struct UCurveVector* NewVectorCurve, struct FName VectorTrackName); // Function Engine.TimelineComponent.SetVectorCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9357380
	void SetTimelineLengthMode(enum class ETimelineLengthMode NewLengthMode); // Function Engine.TimelineComponent.SetTimelineLengthMode // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9357304
	void SetTimelineLength(float NewLength); // Function Engine.TimelineComponent.SetTimelineLength // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9357280
	void SetPlayRate(float NewRate); // Function Engine.TimelineComponent.SetPlayRate // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x2384b8c
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate); // Function Engine.TimelineComponent.SetPlaybackPosition // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x2bfefa4
	void SetNewTime(float NewTime); // Function Engine.TimelineComponent.SetNewTime // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x93571f8
	void SetLooping(bool bNewLooping); // Function Engine.TimelineComponent.SetLooping // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9357174
	void SetLinearColorCurve(struct UCurveLinearColor* NewLinearColorCurve, struct FName LinearColorTrackName); // Function Engine.TimelineComponent.SetLinearColorCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x93570ac
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation); // Function Engine.TimelineComponent.SetIgnoreTimeDilation // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9357024
	void SetFloatCurve(struct UCurveFloat* NewFloatCurve, struct FName FloatTrackName); // Function Engine.TimelineComponent.SetFloatCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9356f5c
	void ReverseFromEnd(); // Function Engine.TimelineComponent.ReverseFromEnd // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x21b0930
	void Reverse(); // Function Engine.TimelineComponent.Reverse // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x21b0980
	void PlayFromStart(); // Function Engine.TimelineComponent.PlayFromStart // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x21b09ec
	void Play(); // Function Engine.TimelineComponent.Play // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x21b09b0
	void OnRep_Timeline(struct FTimeline& OldTimeline); // Function Engine.TimelineComponent.OnRep_Timeline // (Final|Native|Public|HasOutParms) // @ game+0x25d260c
	bool IsReversing(); // Function Engine.TimelineComponent.IsReversing // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9356d28
	bool IsPlaying(); // Function Engine.TimelineComponent.IsPlaying // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x248bd20
	bool IsLooping(); // Function Engine.TimelineComponent.IsLooping // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9356d0c
	float GetTimelineLength(); // Function Engine.TimelineComponent.GetTimelineLength // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x484a04c
	float GetScaledTimelineLength(); // Function Engine.TimelineComponent.GetScaledTimelineLength // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9356ce0
	float GetPlayRate(); // Function Engine.TimelineComponent.GetPlayRate // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x63d6c6c
	float GetPlaybackPosition(); // Function Engine.TimelineComponent.GetPlaybackPosition // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x8f958b8
	bool GetIgnoreTimeDilation(); // Function Engine.TimelineComponent.GetIgnoreTimeDilation // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x9356c9c
};

// Class Engine.TimelineTemplate
// Size: 0xa8 (Inherited: 0x28)
struct UTimelineTemplate : UObject {
	float TimelineLength; // 0x28(0x04)
	enum class ETimelineLengthMode LengthMode; // 0x2c(0x01)
	char bAutoPlay : 1; // 0x2d(0x01)
	char bLoop : 1; // 0x2d(0x01)
	char bReplicated : 1; // 0x2d(0x01)
	char bIgnoreTimeDilation : 1; // 0x2d(0x01)
	char pad_2D_4 : 4; // 0x2d(0x01)
	char pad_2E[0x2]; // 0x2e(0x02)
	struct TArray<struct FTTEventTrack> EventTracks; // 0x30(0x10)
	struct TArray<struct FTTFloatTrack> FloatTracks; // 0x40(0x10)
	struct TArray<struct FTTVectorTrack> VectorTracks; // 0x50(0x10)
	struct TArray<struct FTTLinearColorTrack> LinearColorTracks; // 0x60(0x10)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0x70(0x10)
	struct FGuid TimelineGuid; // 0x80(0x10)
	enum class ETickingGroup TimelineTickGroup; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	struct FName VariableName; // 0x94(0x04)
	struct FName DirectionPropertyName; // 0x98(0x04)
	struct FName UpdateFunctionName; // 0x9c(0x04)
	struct FName FinishedFunctionName; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Engine.TireType
// Size: 0x38 (Inherited: 0x30)
struct UTireType : UDataAsset {
	float FrictionScale; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.TouchInterface
// Size: 0x58 (Inherited: 0x28)
struct UTouchInterface : UObject {
	struct TArray<struct FTouchInputControl> Controls; // 0x28(0x10)
	float ActiveOpacity; // 0x38(0x04)
	float InactiveOpacity; // 0x3c(0x04)
	float TimeUntilDeactive; // 0x40(0x04)
	float TimeUntilReset; // 0x44(0x04)
	float ActivationDelay; // 0x48(0x04)
	bool bPreventRecenter; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float StartupDelay; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.TransactionDiffingTestObject
// Size: 0x98 (Inherited: 0x28)
struct UTransactionDiffingTestObject : UObject {
	struct TArray<struct FName> NamesArray; // 0x28(0x10)
	struct FName AdditionalName; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct UObject*> ObjectsArray; // 0x40(0x10)
	struct UObject* AdditionalObject; // 0x50(0x08)
	struct TArray<struct TSoftObjectPtr<UObject>> SoftObjectsArray; // 0x58(0x10)
	struct TSoftObjectPtr<UObject> AdditionalSoftObject; // 0x68(0x28)
	int32_t PropertyData; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class Engine.TriggerBase
// Size: 0x290 (Inherited: 0x288)
struct ATriggerBase : AActor {
	struct UShapeComponent* CollisionComponent; // 0x288(0x08)
};

// Class Engine.TriggerBox
// Size: 0x290 (Inherited: 0x290)
struct ATriggerBox : ATriggerBase {
};

// Class Engine.TriggerCapsule
// Size: 0x290 (Inherited: 0x290)
struct ATriggerCapsule : ATriggerBase {
};

// Class Engine.TriggerSphere
// Size: 0x290 (Inherited: 0x290)
struct ATriggerSphere : ATriggerBase {
};

// Class Engine.TriggerVolume
// Size: 0x2c0 (Inherited: 0x2c0)
struct ATriggerVolume : AVolume {
};

// Class Engine.TwitterIntegrationBase
// Size: 0x38 (Inherited: 0x38)
struct UTwitterIntegrationBase : UPlatformInterfaceBase {

	bool TwitterRequest(struct FString URL, struct TArray<struct FString>& ParamKeysAndValues, enum class ETwitterRequestMethod RequestMethod, int32_t AccountIndex); // Function Engine.TwitterIntegrationBase.TwitterRequest // (Native|Public|HasOutParms) // @ game+0x93577c4
	bool ShowTweetUI(struct FString InitialMessage, struct FString URL, struct FString Picture); // Function Engine.TwitterIntegrationBase.ShowTweetUI // (Native|Public) // @ game+0x9357448
	void Init(); // Function Engine.TwitterIntegrationBase.Init // (Native|Public) // @ game+0x18168e4
	int32_t GetNumAccounts(); // Function Engine.TwitterIntegrationBase.GetNumAccounts // (Native|Public) // @ game+0x9356cb8
	struct FString GetAccountName(int32_t AccountIndex); // Function Engine.TwitterIntegrationBase.GetAccountName // (Native|Public) // @ game+0x9356bf4
	bool CanShowTweetUI(); // Function Engine.TwitterIntegrationBase.CanShowTweetUI // (Native|Public) // @ game+0x26aa344
	bool AuthorizeAccounts(); // Function Engine.TwitterIntegrationBase.AuthorizeAccounts // (Native|Public) // @ game+0x74b2ee4
};

// Class Engine.TypedElementCommonActions
// Size: 0x828 (Inherited: 0x28)
struct UTypedElementCommonActions : UObject {
	char pad_28[0x800]; // 0x28(0x800)

	struct TArray<struct FScriptTypedElementHandle> K2_DuplicateSelectedElements(struct UTypedElementSelectionSet* SelectionSet, struct UWorld* World, struct FVector& LocationOffset); // Function Engine.TypedElementCommonActions.K2_DuplicateSelectedElements // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9356d48
	struct TArray<struct FScriptTypedElementHandle> DuplicateNormalizedElements(struct FScriptTypedElementListProxy ElementList, struct UWorld* World, struct FVector& LocationOffset); // Function Engine.TypedElementCommonActions.DuplicateNormalizedElements // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9356954
	bool DeleteSelectedElements(struct UTypedElementSelectionSet* SelectionSet, struct UWorld* World, struct FTypedElementDeletionOptions& DeletionOptions); // Function Engine.TypedElementCommonActions.DeleteSelectedElements // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x93567c4
	bool DeleteNormalizedElements(struct FScriptTypedElementListProxy ElementList, struct UWorld* World, struct UTypedElementSelectionSet* InSelectionSet, struct FTypedElementDeletionOptions& DeletionOptions); // Function Engine.TypedElementCommonActions.DeleteNormalizedElements // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9356610
};

// Class Engine.TypedElementWorldInterface
// Size: 0x28 (Inherited: 0x28)
struct UTypedElementWorldInterface : UInterface {

	bool SetWorldTransform(struct FScriptTypedElementHandle& InElementHandle, struct FTransform& InTransform); // Function Engine.TypedElementWorldInterface.SetWorldTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93590ac
	bool SetRelativeTransform(struct FScriptTypedElementHandle& InElementHandle, struct FTransform& InTransform); // Function Engine.TypedElementWorldInterface.SetRelativeTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9358f48
	bool SetPivotOffset(struct FScriptTypedElementHandle& InElementHandle, struct FVector& InPivotOffset); // Function Engine.TypedElementWorldInterface.SetPivotOffset // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9358e34
	struct FScriptTypedElementHandle PromoteElement(struct FScriptTypedElementHandle& InElementHandle, struct UWorld* OverrideWorld); // Function Engine.TypedElementWorldInterface.PromoteElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9358c0c
	void NotifyMovementStarted(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.NotifyMovementStarted // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9358b64
	void NotifyMovementOngoing(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.NotifyMovementOngoing // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9358abc
	void NotifyMovementEnded(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.NotifyMovementEnded // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9358a14
	bool IsTemplateElement(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.IsTemplateElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x8f6e814
	bool GetWorldTransform(struct FScriptTypedElementHandle& InElementHandle, struct FTransform& OutTransform); // Function Engine.TypedElementWorldInterface.GetWorldTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93588b4
	bool GetRelativeTransform(struct FScriptTypedElementHandle& InElementHandle, struct FTransform& OutTransform); // Function Engine.TypedElementWorldInterface.GetRelativeTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9358750
	bool GetPivotOffset(struct FScriptTypedElementHandle& InElementHandle, struct FVector& OutPivotOffset); // Function Engine.TypedElementWorldInterface.GetPivotOffset // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x935863c
	struct UWorld* GetOwnerWorld(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.GetOwnerWorld // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9358588
	struct ULevel* GetOwnerLevel(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.GetOwnerLevel // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x93584d4
	bool GetBounds(struct FScriptTypedElementHandle& InElementHandle, struct FBoxSphereBounds& OutBounds); // Function Engine.TypedElementWorldInterface.GetBounds // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x93583c4
	struct FScriptTypedElementHandle DuplicateElement(struct FScriptTypedElementHandle& InElementHandle, struct UWorld* InWorld, struct FVector& InLocationOffset); // Function Engine.TypedElementWorldInterface.DuplicateElement // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9358268
	bool DeleteElement(struct FScriptTypedElementHandle& InElementHandle, struct UWorld* InWorld, struct UTypedElementSelectionSet* InSelectionSet, struct FTypedElementDeletionOptions& InDeletionOptions); // Function Engine.TypedElementWorldInterface.DeleteElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x93580e0
	bool CanPromoteElement(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.CanPromoteElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x935802c
	bool CanMoveElement(struct FScriptTypedElementHandle& InElementHandle, enum class ETypedElementWorldType InWorldType); // Function Engine.TypedElementWorldInterface.CanMoveElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9357f34
	bool CanEditElement(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.CanEditElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9357e80
	bool CanDuplicateElement(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.CanDuplicateElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9357dcc
	bool CanDeleteElement(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.CanDeleteElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9357d18
};

// Class Engine.UserDefinedEnum
// Size: 0xb8 (Inherited: 0x68)
struct UUserDefinedEnum : UEnum {
	struct TMap<struct FName, struct FText> DisplayNameMap; // 0x68(0x50)
};

// Class Engine.UserDefinedStruct
// Size: 0x108 (Inherited: 0xc0)
struct UUserDefinedStruct : UScriptStruct {
	enum class EUserDefinedStructureStatus Status; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	struct FGuid Guid; // 0xc4(0x10)
	char pad_D4[0x34]; // 0xd4(0x34)
};

// Class Engine.UserInterfaceSettings
// Size: 0x268 (Inherited: 0x30)
struct UUserInterfaceSettings : UDeveloperSettings {
	enum class ERenderFocusRule RenderFocusRule; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TMap<enum class EMouseCursor, struct FHardwareCursorReference> HardwareCursors; // 0x38(0x50)
	struct TMap<enum class EMouseCursor, struct FSoftClassPath> SoftwareCursors; // 0x88(0x50)
	struct FSoftClassPath DefaultCursor; // 0xd8(0x18)
	struct FSoftClassPath TextEditBeamCursor; // 0xf0(0x18)
	struct FSoftClassPath CrosshairsCursor; // 0x108(0x18)
	struct FSoftClassPath HandCursor; // 0x120(0x18)
	struct FSoftClassPath GrabHandCursor; // 0x138(0x18)
	struct FSoftClassPath GrabHandClosedCursor; // 0x150(0x18)
	struct FSoftClassPath SlashedCircleCursor; // 0x168(0x18)
	float ApplicationScale; // 0x180(0x04)
	enum class EUIScalingRule UIScaleRule; // 0x184(0x01)
	char pad_185[0x3]; // 0x185(0x03)
	struct FSoftClassPath CustomScalingRuleClass; // 0x188(0x18)
	struct FRuntimeFloatCurve UIScaleCurve; // 0x1a0(0x88)
	bool bAllowHighDPIInGameMode; // 0x228(0x01)
	char pad_229[0x3]; // 0x229(0x03)
	struct FIntPoint DesignScreenSize; // 0x22c(0x08)
	bool bLoadWidgetsOnDedicatedServer; // 0x234(0x01)
	char pad_235[0x3]; // 0x235(0x03)
	struct TArray<struct UObject*> CursorClasses; // 0x238(0x10)
	ClassPtrProperty CustomScalingRuleClassInstance; // 0x248(0x08)
	struct UDPICustomScalingRule* CustomScalingRule; // 0x250(0x08)
	char pad_258[0x10]; // 0x258(0x10)
};

// Class Engine.VectorField
// Size: 0x68 (Inherited: 0x28)
struct UVectorField : UObject {
	struct FBox Bounds; // 0x28(0x38)
	float Intensity; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.VectorFieldAnimated
// Size: 0xa8 (Inherited: 0x68)
struct UVectorFieldAnimated : UVectorField {
	struct UTexture2D* Texture; // 0x68(0x08)
	enum class EVectorFieldConstructionOp ConstructionOp; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	int32_t VolumeSizeX; // 0x74(0x04)
	int32_t VolumeSizeY; // 0x78(0x04)
	int32_t VolumeSizeZ; // 0x7c(0x04)
	int32_t SubImagesX; // 0x80(0x04)
	int32_t SubImagesY; // 0x84(0x04)
	int32_t FrameCount; // 0x88(0x04)
	float FramesPerSecond; // 0x8c(0x04)
	char bLoop : 1; // 0x90(0x01)
	char pad_90_1 : 7; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct UVectorFieldStatic* NoiseField; // 0x98(0x08)
	float NoiseScale; // 0xa0(0x04)
	float NoiseMax; // 0xa4(0x04)
};

// Class Engine.VectorFieldComponent
// Size: 0x560 (Inherited: 0x530)
struct UVectorFieldComponent : UPrimitiveComponent {
	struct UVectorField* VectorField; // 0x530(0x08)
	float Intensity; // 0x538(0x04)
	float Tightness; // 0x53c(0x04)
	char bPreviewVectorField : 1; // 0x540(0x01)
	char pad_540_1 : 7; // 0x540(0x01)
	char pad_541[0x1f]; // 0x541(0x1f)

	void SetIntensity(float NewIntensity); // Function Engine.VectorFieldComponent.SetIntensity // (Native|Public|BlueprintCallable) // @ game+0x9358dac
};

// Class Engine.VectorFieldStatic
// Size: 0xb0 (Inherited: 0x68)
struct UVectorFieldStatic : UVectorField {
	int32_t SizeX; // 0x68(0x04)
	int32_t SizeY; // 0x6c(0x04)
	int32_t SizeZ; // 0x70(0x04)
	bool bAllowCPUAccess; // 0x74(0x01)
	char pad_75[0x3b]; // 0x75(0x3b)
};

// Class Engine.VectorFieldVolume
// Size: 0x290 (Inherited: 0x288)
struct AVectorFieldVolume : AActor {
	struct UVectorFieldComponent* VectorFieldComponent; // 0x288(0x08)
};

// Class Engine.ViewportStatsSubsystem
// Size: 0x50 (Inherited: 0x30)
struct UViewportStatsSubsystem : UWorldSubsystem {
	char pad_30[0x20]; // 0x30(0x20)

	void RemoveDisplayDelegate(int32_t IndexToRemove); // Function Engine.ViewportStatsSubsystem.RemoveDisplayDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x9358d10
	void AddTimedDisplay(struct FText Text, struct FLinearColor Color, float Duration, struct FVector2D& DisplayOffset); // Function Engine.ViewportStatsSubsystem.AddTimedDisplay // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x9357b8c
	int32_t AddDisplayDelegate(struct FDelegate& Delegate); // Function Engine.ViewportStatsSubsystem.AddDisplayDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x9357ad8
};

// Class Engine.VirtualTexture
// Size: 0x28 (Inherited: 0x28)
struct UVirtualTexture : UObject {
};

// Class Engine.LightMapVirtualTexture
// Size: 0x28 (Inherited: 0x28)
struct ULightMapVirtualTexture : UVirtualTexture {
};

// Class Engine.RuntimeVirtualTextureStreamingProxy
// Size: 0x178 (Inherited: 0x178)
struct URuntimeVirtualTextureStreamingProxy : UTexture2D {
};

// Class Engine.VirtualTexture2D
// Size: 0x188 (Inherited: 0x178)
struct UVirtualTexture2D : UTexture2D {
	struct FVirtualTextureBuildSettings Settings; // 0x178(0x08)
	bool bContinuousUpdate; // 0x180(0x01)
	bool bSinglePhysicalSpace; // 0x181(0x01)
	char pad_182[0x6]; // 0x182(0x06)
};

// Class Engine.VirtualTextureBuilder
// Size: 0x38 (Inherited: 0x28)
struct UVirtualTextureBuilder : UObject {
	struct UVirtualTexture2D* Texture; // 0x28(0x08)
	uint64_t BuildHash; // 0x30(0x08)
};

// Class Engine.VirtualTexturePoolConfig
// Size: 0x40 (Inherited: 0x28)
struct UVirtualTexturePoolConfig : UObject {
	int32_t DefaultSizeInMegabyte; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct TArray<struct FVirtualTextureSpacePoolConfig> Pools; // 0x30(0x10)
};

// Class Engine.VisualLoggerAutomationTests
// Size: 0x28 (Inherited: 0x28)
struct UVisualLoggerAutomationTests : UObject {
};

// Class Engine.VisualLoggerDebugSnapshotInterface
// Size: 0x28 (Inherited: 0x28)
struct UVisualLoggerDebugSnapshotInterface : UInterface {
};

// Class Engine.VisualLoggerFilterVolume
// Size: 0x2c0 (Inherited: 0x2c0)
struct AVisualLoggerFilterVolume : AVolume {
};

// Class Engine.VisualLoggerKismetLibrary
// Size: 0x28 (Inherited: 0x28)
struct UVisualLoggerKismetLibrary : UBlueprintFunctionLibrary {

	void RedirectVislog(struct UObject* SourceOwner, struct UObject* DestinationOwner); // Function Engine.VisualLoggerKismetLibrary.RedirectVislog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x64c99dc
	void LogText(struct UObject* WorldContextObject, struct FString Text, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x935a12c
	void LogSegment(struct UObject* WorldContextObject, struct FVector SegmentStart, struct FVector SegmentEnd, struct FString Text, struct FLinearColor ObjectColor, float Thickness, struct FName CategoryName, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9359e0c
	void LogLocation(struct UObject* WorldContextObject, struct FVector Location, struct FString Text, struct FLinearColor ObjectColor, float Radius, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x9359b24
	void LogBox(struct UObject* WorldContextObject, struct FBox BoxShape, struct FString Text, struct FLinearColor ObjectColor, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x935986c
	void EnableRecording(bool bEnabled); // Function Engine.VisualLoggerKismetLibrary.EnableRecording // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x64a1f14
};

// Class Engine.VoiceChannel
// Size: 0x78 (Inherited: 0x68)
struct UVoiceChannel : UChannel {
	char pad_68[0x10]; // 0x68(0x10)
};

// Class Engine.VOIPTalker
// Size: 0xe0 (Inherited: 0xa0)
struct UVOIPTalker : UActorComponent {
	struct FVoiceSettings Settings; // 0xa0(0x18)
	char pad_B8[0x28]; // 0xb8(0x28)

	void RegisterWithPlayerState(struct APlayerState* OwningState); // Function Engine.VOIPTalker.RegisterWithPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x935a340
	float GetVoiceLevel(); // Function Engine.VOIPTalker.GetVoiceLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x741f190
	struct UVOIPTalker* CreateTalkerForPlayer(struct APlayerState* OwningState); // Function Engine.VOIPTalker.CreateTalkerForPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9359794
	void BPOnTalkingEnd(); // Function Engine.VOIPTalker.BPOnTalkingEnd // (Native|Event|Protected|BlueprintEvent) // @ game+0x73bb744
	void BPOnTalkingBegin(struct UAudioComponent* AudioComponent); // Function Engine.VOIPTalker.BPOnTalkingBegin // (Native|Event|Protected|BlueprintEvent) // @ game+0x63695b8
};

// Class Engine.VOIPStatics
// Size: 0x28 (Inherited: 0x28)
struct UVOIPStatics : UBlueprintFunctionLibrary {

	void SetMicThreshold(float InThreshold); // Function Engine.VOIPStatics.SetMicThreshold // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x935a68c
};

// Class Engine.VolumeTexture
// Size: 0x1b0 (Inherited: 0x158)
struct UVolumeTexture : UTexture {
	char pad_158[0x58]; // 0x158(0x58)
};

// Class Engine.VolumetricCloudComponent
// Size: 0x300 (Inherited: 0x2a0)
struct UVolumetricCloudComponent : USceneComponent {
	float LayerBottomAltitude; // 0x2a0(0x04)
	float LayerHeight; // 0x2a4(0x04)
	float TracingStartMaxDistance; // 0x2a8(0x04)
	float TracingMaxDistance; // 0x2ac(0x04)
	float PlanetRadius; // 0x2b0(0x04)
	struct FColor GroundAlbedo; // 0x2b4(0x04)
	struct UMaterialInterface* Material; // 0x2b8(0x08)
	char bUsePerSampleAtmosphericLightTransmittance : 1; // 0x2c0(0x01)
	char pad_2C0_1 : 7; // 0x2c0(0x01)
	char pad_2C1[0x3]; // 0x2c1(0x03)
	float SkyLightCloudBottomOcclusion; // 0x2c4(0x04)
	float ViewSampleCountScale; // 0x2c8(0x04)
	float ReflectionViewSampleCountScaleValue; // 0x2cc(0x04)
	float ReflectionViewSampleCountScale; // 0x2d0(0x04)
	float ReflectionSampleCountScale; // 0x2d4(0x04)
	float ShadowViewSampleCountScale; // 0x2d8(0x04)
	float ShadowReflectionViewSampleCountScaleValue; // 0x2dc(0x04)
	float ShadowReflectionViewSampleCountScale; // 0x2e0(0x04)
	float ShadowReflectionSampleCountScale; // 0x2e4(0x04)
	float ShadowTracingDistance; // 0x2e8(0x04)
	float StopTracingTransmittanceThreshold; // 0x2ec(0x04)
	char pad_2F0[0x10]; // 0x2f0(0x10)

	void SetViewSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetViewSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935add4
	void SetTracingStartMaxDistance(float NewValue); // Function Engine.VolumetricCloudComponent.SetTracingStartMaxDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935ad50
	void SetTracingMaxDistance(float NewValue); // Function Engine.VolumetricCloudComponent.SetTracingMaxDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9347c7c
	void SetStopTracingTransmittanceThreshold(float NewValue); // Function Engine.VolumetricCloudComponent.SetStopTracingTransmittanceThreshold // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935ac40
	void SetSkyLightCloudBottomOcclusion(float NewValue); // Function Engine.VolumetricCloudComponent.SetSkyLightCloudBottomOcclusion // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935ab30
	void SetShadowViewSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowViewSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935aaac
	void SetShadowTracingDistance(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowTracingDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935aa28
	void SetShadowReflectionViewSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowReflectionViewSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935a9a4
	void SetShadowReflectionSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowReflectionSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935a920
	void SetReflectionViewSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetReflectionViewSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935a89c
	void SetReflectionSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetReflectionSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935a818
	void SetPlanetRadius(float NewValue); // Function Engine.VolumetricCloudComponent.SetPlanetRadius // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x9348518
	void SetMaterial(struct UMaterialInterface* NewValue); // Function Engine.VolumetricCloudComponent.SetMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935a560
	void SetLayerHeight(float NewValue); // Function Engine.VolumetricCloudComponent.SetLayerHeight // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935a4dc
	void SetLayerBottomAltitude(float NewValue); // Function Engine.VolumetricCloudComponent.SetLayerBottomAltitude // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935a458
	void SetGroundAlbedo(struct FColor NewValue); // Function Engine.VolumetricCloudComponent.SetGroundAlbedo // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x935a3c0
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue); // Function Engine.VolumetricCloudComponent.SetbUsePerSampleAtmosphericLightTransmittance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x935aeec
};

// Class Engine.VolumetricCloud
// Size: 0x290 (Inherited: 0x288)
struct AVolumetricCloud : AInfo {
	struct UVolumetricCloudComponent* VolumetricCloudComponent; // 0x288(0x08)
};

// Class Engine.VolumetricLightmapDensityVolume
// Size: 0x2c8 (Inherited: 0x2c0)
struct AVolumetricLightmapDensityVolume : AVolume {
	struct FInt32Interval AllowedMipLevelRange; // 0x2c0(0x08)
};

// Class Engine.WindDirectionalSource
// Size: 0x290 (Inherited: 0x288)
struct AWindDirectionalSource : AInfo {
	struct UWindDirectionalSourceComponent* Component; // 0x288(0x08)
};

// Class Engine.WindDirectionalSourceComponent
// Size: 0x2c0 (Inherited: 0x2a0)
struct UWindDirectionalSourceComponent : USceneComponent {
	float Strength; // 0x2a0(0x04)
	float Speed; // 0x2a4(0x04)
	float MinGustAmount; // 0x2a8(0x04)
	float MaxGustAmount; // 0x2ac(0x04)
	float Radius; // 0x2b0(0x04)
	char bPointWind : 1; // 0x2b4(0x01)
	char pad_2B4_1 : 7; // 0x2b4(0x01)
	char pad_2B5[0xb]; // 0x2b5(0x0b)

	void SetWindType(enum class EWindSourceType InNewType); // Function Engine.WindDirectionalSourceComponent.SetWindType // (Final|Native|Public|BlueprintCallable) // @ game+0x935ae58
	void SetStrength(float InNewStrength); // Function Engine.WindDirectionalSourceComponent.SetStrength // (Final|Native|Public|BlueprintCallable) // @ game+0x935acc4
	void SetSpeed(float InNewSpeed); // Function Engine.WindDirectionalSourceComponent.SetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x935abb4
	void SetRadius(float InNewRadius); // Function Engine.WindDirectionalSourceComponent.SetRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x935a78c
	void SetMinimumGustAmount(float InNewMinGust); // Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x935a700
	void SetMaximumGustAmount(float InNewMaxGust); // Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x935a600
};

// Class Engine.WorldComposition
// Size: 0x68 (Inherited: 0x28)
struct UWorldComposition : UObject {
	char pad_28[0x20]; // 0x28(0x20)
	struct TArray<struct ULevelStreaming*> TilesStreaming; // 0x48(0x10)
	double TilesStreamingTimeThreshold; // 0x58(0x08)
	bool bLoadAllTilesDuringCinematic; // 0x60(0x01)
	bool bRebaseOriginIn3DSpace; // 0x61(0x01)
	char pad_62[0x2]; // 0x62(0x02)
	float RebaseOriginDistance; // 0x64(0x04)
};

// Class Engine.WorldPartition
// Size: 0x100 (Inherited: 0x28)
struct UWorldPartition : UObject {
	char pad_28[0x30]; // 0x28(0x30)
	struct UActorDescContainer* ActorDescContainer; // 0x58(0x08)
	struct UWorldPartitionRuntimeHash* RuntimeHash; // 0x60(0x08)
	struct UWorld* World; // 0x68(0x08)
	bool bEnableStreaming; // 0x70(0x01)
	char pad_71[0x7f]; // 0x71(0x7f)
	struct UWorldPartitionStreamingPolicy* StreamingPolicy; // 0xf0(0x08)
	char pad_F8[0x8]; // 0xf8(0x08)
};

// Class Engine.WorldPartitionActorLoaderInterface
// Size: 0x28 (Inherited: 0x28)
struct UWorldPartitionActorLoaderInterface : UInterface {
};

// Class Engine.WorldPartitionBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UWorldPartitionBlueprintLibrary : UBlueprintFunctionLibrary {

	void UnloadActors(struct TArray<struct FGuid>& InActorsToLoad); // Function Engine.WorldPartitionBlueprintLibrary.UnloadActors // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x935becc
	void LoadActors(struct TArray<struct FGuid>& InActorsToLoad); // Function Engine.WorldPartitionBlueprintLibrary.LoadActors // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x935becc
	struct FBox GetRuntimeWorldBounds(); // Function Engine.WorldPartitionBlueprintLibrary.GetRuntimeWorldBounds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x935bda4
	bool GetIntersectingActorDescs(struct FBox& InBox, struct TArray<struct FActorDesc>& OutActorDescs); // Function Engine.WorldPartitionBlueprintLibrary.GetIntersectingActorDescs // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x935be04
	struct FBox GetEditorWorldBounds(); // Function Engine.WorldPartitionBlueprintLibrary.GetEditorWorldBounds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x935bda4
	bool GetActorDescs(struct TArray<struct FActorDesc>& OutActorDescs); // Function Engine.WorldPartitionBlueprintLibrary.GetActorDescs // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x935bd20
};

// Class Engine.WorldPartitionEditorHash
// Size: 0x28 (Inherited: 0x28)
struct UWorldPartitionEditorHash : UObject {
};

// Class Engine.WorldPartitionEditorLoaderAdapter
// Size: 0x30 (Inherited: 0x28)
struct UWorldPartitionEditorLoaderAdapter : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.WorldPartitionEditorPerProjectUserSettings
// Size: 0x28 (Inherited: 0x28)
struct UWorldPartitionEditorPerProjectUserSettings : UObject {
};

// Class Engine.WorldPartitionEditorSpatialHash
// Size: 0x28 (Inherited: 0x28)
struct UWorldPartitionEditorSpatialHash : UWorldPartitionEditorHash {
};

// Class Engine.WorldPartitionLevelStreamingDynamic
// Size: 0x1a0 (Inherited: 0x190)
struct UWorldPartitionLevelStreamingDynamic : ULevelStreamingDynamic {
	bool bShouldBeAlwaysLoaded; // 0x188(0x01)
	struct TWeakObjectPtr<struct UWorldPartitionRuntimeLevelStreamingCell> StreamingCell; // 0x18c(0x08)
	struct TWeakObjectPtr<struct UWorldPartition> OuterWorldPartition; // 0x194(0x08)
};

// Class Engine.WorldPartitionStreamingPolicy
// Size: 0x9f8 (Inherited: 0x28)
struct UWorldPartitionStreamingPolicy : UObject {
	char pad_28[0x9d0]; // 0x28(0x9d0)
};

// Class Engine.WorldPartitionLevelStreamingPolicy
// Size: 0xa48 (Inherited: 0x9f8)
struct UWorldPartitionLevelStreamingPolicy : UWorldPartitionStreamingPolicy {
	struct TMap<struct FName, struct FName> SubObjectsToCellRemapping; // 0x9f8(0x50)
};

// Class Engine.WorldPartitionMiniMap
// Size: 0x358 (Inherited: 0x288)
struct AWorldPartitionMiniMap : AInfo {
	struct FBox MiniMapWorldBounds; // 0x288(0x38)
	struct FBox2D UVOffset; // 0x2c0(0x28)
	struct UTexture2D* MiniMapTexture; // 0x2e8(0x08)
	struct TSet<struct FActorDataLayer> ExcludedDataLayers; // 0x2f0(0x50)
	int32_t WorldUnitsPerPixel; // 0x340(0x04)
	int32_t BuilderCellSize; // 0x344(0x04)
	enum class ESceneCaptureSource CaptureSource; // 0x348(0x01)
	char pad_349[0x3]; // 0x349(0x03)
	uint32_t CaptureWarmupFrames; // 0x34c(0x04)
	int32_t MiniMapTileSize; // 0x350(0x04)
	char pad_354[0x4]; // 0x354(0x04)
};

// Class Engine.WorldPartitionMiniMapVolume
// Size: 0x2c0 (Inherited: 0x2c0)
struct AWorldPartitionMiniMapVolume : AVolume {
};

// Class Engine.WorldPartitionReplay
// Size: 0x2a8 (Inherited: 0x288)
struct AWorldPartitionReplay : AActor {
	struct TArray<struct FName> StreamingSourceNames; // 0x288(0x10)
	char pad_298[0x10]; // 0x298(0x10)
};

// Class Engine.WorldPartitionRuntimeCell
// Size: 0xc0 (Inherited: 0x28)
struct UWorldPartitionRuntimeCell : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	bool bIsAlwaysLoaded; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct FName> DataLayers; // 0x38(0x10)
	struct FVector2D MinMaxZ; // 0x48(0x10)
	struct FWorldPartitionRuntimeCellDebugInfo DebugInfo; // 0x58(0x30)
	int32_t Priority; // 0x88(0x04)
	bool bClientOnlyVisible; // 0x8c(0x01)
	bool bIsHLOD; // 0x8d(0x01)
	bool bBlockOnSlowLoading; // 0x8e(0x01)
	char pad_8F[0x1]; // 0x8f(0x01)
	struct FGuid ContentBundleID; // 0x90(0x10)
	char pad_A0[0x20]; // 0xa0(0x20)
};

// Class Engine.RuntimeHashExternalStreamingObjectBase
// Size: 0x28 (Inherited: 0x28)
struct URuntimeHashExternalStreamingObjectBase : UObject {
};

// Class Engine.WorldPartitionRuntimeHash
// Size: 0x28 (Inherited: 0x28)
struct UWorldPartitionRuntimeHash : UObject {
};

// Class Engine.WorldPartitionRuntimeSpatialHashCell
// Size: 0x110 (Inherited: 0xc0)
struct UWorldPartitionRuntimeSpatialHashCell : UWorldPartitionRuntimeCell {
	struct FVector Position; // 0xc0(0x18)
	float Extent; // 0xd8(0x04)
	int32_t Level; // 0xdc(0x04)
	char pad_E0[0x30]; // 0xe0(0x30)
};

// Class Engine.WorldPartitionRuntimeLevelStreamingCell
// Size: 0x118 (Inherited: 0x110)
struct UWorldPartitionRuntimeLevelStreamingCell : UWorldPartitionRuntimeSpatialHashCell {
	struct UWorldPartitionLevelStreamingDynamic* LevelStreaming; // 0x110(0x08)

	void OnLevelShown(); // Function Engine.WorldPartitionRuntimeLevelStreamingCell.OnLevelShown // (Final|Native|Private) // @ game+0x935c024
	void OnLevelHidden(); // Function Engine.WorldPartitionRuntimeLevelStreamingCell.OnLevelHidden // (Final|Native|Private) // @ game+0x935c010
};

// Class Engine.SpatialHashRuntimeGridInfo
// Size: 0x290 (Inherited: 0x288)
struct ASpatialHashRuntimeGridInfo : AInfo {
	struct FSpatialHashRuntimeGrid GridSettings; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
};

// Class Engine.RuntimeSpatialHashExternalStreamingObject
// Size: 0x38 (Inherited: 0x28)
struct URuntimeSpatialHashExternalStreamingObject : URuntimeHashExternalStreamingObjectBase {
	struct TArray<struct FSpatialHashStreamingGrid> StreamingGrids; // 0x28(0x10)
};

// Class Engine.WorldPartitionRuntimeSpatialHash
// Size: 0xa8 (Inherited: 0x28)
struct UWorldPartitionRuntimeSpatialHash : UWorldPartitionRuntimeHash {
	bool bEnableZCulling; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct TArray<struct FSpatialHashStreamingGrid> StreamingGrids; // 0x30(0x10)
	char pad_40[0x58]; // 0x40(0x58)
	struct TArray<struct TWeakObjectPtr<struct URuntimeSpatialHashExternalStreamingObject>> ExternalStreamingObjects; // 0x98(0x10)
};

// Class Engine.WorldPartitionStreamingSourceComponent
// Size: 0xd0 (Inherited: 0xa0)
struct UWorldPartitionStreamingSourceComponent : UActorComponent {
	char pad_A0[0x8]; // 0xa0(0x08)
	struct FName TargetGrid; // 0xa8(0x04)
	struct FColor DebugColor; // 0xac(0x04)
	struct UHLODLayer* TargetHLODLayer; // 0xb0(0x08)
	struct TArray<struct FStreamingSourceShape> Shapes; // 0xb8(0x10)
	enum class EStreamingSourcePriority Priority; // 0xc8(0x01)
	bool bStreamingSourceEnabled; // 0xc9(0x01)
	enum class EStreamingSourceTargetState TargetState; // 0xca(0x01)
	char pad_CB[0x5]; // 0xcb(0x05)

	bool IsStreamingSourceEnabled(); // Function Engine.WorldPartitionStreamingSourceComponent.IsStreamingSourceEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x935e5fc
	bool IsStreamingCompleted(); // Function Engine.WorldPartitionStreamingSourceComponent.IsStreamingCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x935e4b4
	void EnableStreamingSource(); // Function Engine.WorldPartitionStreamingSourceComponent.EnableStreamingSource // (Final|Native|Public|BlueprintCallable) // @ game+0x935e49c
	void DisableStreamingSource(); // Function Engine.WorldPartitionStreamingSourceComponent.DisableStreamingSource // (Final|Native|Public|BlueprintCallable) // @ game+0x935e484
};

// Class Engine.WorldPartitionSubsystem
// Size: 0x70 (Inherited: 0x40)
struct UWorldPartitionSubsystem : UTickableWorldSubsystem {
	char pad_40[0x30]; // 0x40(0x30)

	bool IsStreamingCompleted(enum class EWorldPartitionRuntimeCellState QueryState, struct TArray<struct FWorldPartitionStreamingQuerySource>& QuerySources, bool bExactState); // Function Engine.WorldPartitionSubsystem.IsStreamingCompleted // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x935e4d8
};

// Class Engine.WorldPartitionVolume
// Size: 0x2c0 (Inherited: 0x2c0)
struct AWorldPartitionVolume : AVolume {
};

// Class Engine.HierarchicalLODSetup
// Size: 0x60 (Inherited: 0x28)
struct UHierarchicalLODSetup : UObject {
	struct TArray<struct FHierarchicalSimplification> HierarchicalLODSetup; // 0x28(0x10)
	struct TSoftObjectPtr<UMaterialInterface> OverrideBaseMaterial; // 0x38(0x28)
};

// Class Engine.Model
// Size: 0x270 (Inherited: 0x28)
struct UModel : UObject {
	char pad_28[0x248]; // 0x28(0x248)
};

